<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <!-- Hotjar Tracking Code for https://samplesegmentation.theaudiobee.com/ -->
  <script>
    (function (h, o, t, j, a, r) {
      h.hj = h.hj || function () { (h.hj.q = h.hj.q || []).push(arguments) };
      h._hjSettings = { hjid: 1763253, hjsv: 6 };
      a = o.getElementsByTagName('head')[0];
      r = o.createElement('script'); r.async = 1;
      r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
      a.appendChild(r);
    })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');
  </script>
  <meta charset="utf-8">
  <title></title>
  <link rel="stylesheet" type="text/css" href="/css/styles.css">
  <link rel="stylesheet" type="text/css"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <style>
    body {
      overflow: hidden;
      margin-top: -10px;
    }

    /*CSS For errorToggle*/
    #errorToggle {
      display: none;
      position: relative;
      /*top: 160px;
      right: 20px;*/
      z-index: 1;
      -webkit-user-select: none;
      user-select: none;

    }

    #errorToggle span {
      display: none;
      width: 33px;
      height: 4px;
      margin-bottom: 5px;
      position: relative;
      background: black;
      border-radius: 3px;

      z-index: 1;

      transform-origin: 4px 0px;

      transition: transform 0.5s cubic-bezier(0.77, 0.2, 0.05, 1.0),
        background 0.5s cubic-bezier(0.77, 0.2, 0.05, 1.0),
        opacity 0.55s ease;
    }

    #errorToggle input {
      display: block;
      width: 40px;
      height: 32px;
      position: absolute;
      top: -7px;
      left: -5px;

      cursor: pointer;

      opacity: 0;
      /* hide this */
      z-index: 2;
      /* and place it over the hamburger */
    }

    #errorMenu {
      position: absolute;
      width: 300px;
      /*right: 0px;*/
      padding: 25px;
      top: -15px;

      background: #ededed;
      list-style-type: none;
      -webkit-font-smoothing: antialiased;
    }

    #errorMenu a {
      text-decoration: none;
      color: #232323;
      font-size: 12px;
      cursor: none;
    }

    #closeHamburger {
      display: none;
      width: 33px;
      margin-bottom: 5px;
      position: relative;
      font-size: 22px;
      margin-top: 5px;
      z-index: 1;
      font-weight: bold;
    }

    #guide-for-submit-button-appearance {
      text-align: center;
      font-size: 14px;
      width: 680px;
      color: #fff;
      font-weight: bold;
      padding: 8px;
      background: #3e97e6;
      display: inline-block;
      border-radius: 4%;
      list-style-type: none;
      -webkit-font-smoothing: antialiased;
      white-space: normal;
    }


    /*CSS For errorToggle*/
    #v-container {
      margin-top: -50vh;
    }

    #play-button {
      color: #555;
      cursor: pointer;
      display: block;
      float: left;
      font-size: 3.7em;
      margin: 0.1em 0.2em 0.5em 0.1em;
    }

    #time {
      color: #757575;
      float: left;
      font-size: 1.1em;
      font-weight: 300;
      margin-top: 10px;
    }

    #start-timestamp {
      color: #757575;
      float: left;
      font-size: 2em;
      font-weight: 300;
      margin-top: 20px;
      padding-right: 10px;
      width: 170px;
    }

    #total-timestamp {
      color: #757575;
      float: left;
      font-size: 1.5em;
      font-weight: 300;
      margin-right: 1em;
      margin-top: 26px;
    }

    .audio_time_hours {
      font-size: 0.7em;
      margin-top: 15px;

      margin-left: 4px;
      text-align: left;
    }

    #audio-time-divider {
      border-left: 2px solid #757575;
      height: 30px;
      margin: 1.5em 0.3em;
      padding-left: 5px;
    }

    .audio-button-top-container {
      /*width: 35em;*/
      float: left;
    }

    .audio-button-bottom-row {
      margin-top: 4em;
    }

    .playback_speed {
      float: left;
      margin-right: 0.25em;
    }

    header a {
      color: #888888;
      /*margin-right: 16px;*/
      text-decoration: none;
      font-weight: 300;
      color: #444;
      margin: 1em 1em .375em 1.5em;
      font-size: 1.85em;
      display: inline-block;
    }


    #time-line {
      /*transform: translate(0px,1040px);*/
    }

    #top-div-for-scrolling-enabling {
      width: 50vw;
      height: 30vh;
      position: absolute;
      z-index: 1;
      left: 0px;
      top: 150px;
    }

    #plus-button {
      margin-left: 56vw;
      position: fixed;
      z-index: 3;
      font-size: 16px;
      color: #fff;
      border: none;
      border-radius: 70%;
      width: 45px;
      height: 45px;
      background-color: #2f84ba;
    }

    #top-block {
      position: fixed;
      width: 100%;
      opacity: 1;
      margin-top: 50px;
      z-index: 99;
      background: #fff;
      border-bottom: 3px groove #888888;

      background: #fff;
      box-shadow: 0px 5px 5px #ccc;
      padding-left: 100px;
      height: 100px;
      overflow-y: hidden;
      overflow-x: hidden;
      white-space: nowrap;
      text-align: right;
    }

    #annotation-div-head {

      top: 150px;
      width: 50vw;
      position: fixed;
      opacity: 1;
      z-index: 99;
      height: 40px;
    }

    #annotation-div {
      position: relative;
      opacity: 1;
      z-index: 999;
      height: 35px;
      cursor: pointer;
    }

    #wave-container {
      display: fixed;
      height: 50vh;
    }

    #peaks-container {
      transform: translateX(0%) rotate(90deg);
      transform-origin: bottom left;
      position: relative;
      cursor: pointer;
      will-change: transform;
      /*width: calc(214 * 96px);*/
    }



    #annotation-box {
      box-shadow: 4px 4px 4px #888888;
      bottom: 2rem;
      right: 10rem;
      border: 1px solid grey;
      /*width: 350px;*/
      position: fixed;
      z-index: 3;
      background-color: white;
      overflow-x: :hidden;
      overflow-y: hidden;
      display: none;
    }

    #close {
      position: relative;
      cursor: pointer;
      font-size: 34px;
      font-weight: 300;
      /*margin-left: 9vw;*/
      float: right;
      margin-right: 12px;
    }

    #annotation-time {
      display: inline-block;
    }

    .annotation-time-class {
      font-size: 24px;
      font-weight: 520;
      padding-left: 5px;
      width: 30px;
      border: none;
    }

    .annotation-time-ms-class {
      font-size: 24px;
      font-weight: 520;
      padding-left: 5px;
      width: 40px;
      border: none;
    }

    #annotation-type {
      width: 350px;
      height: 50px;
      margin: 10px;
      border-radius: 15px;
      cursor: pointer;
    }

    .annotation-selection {
      font-size: 20px;
      padding: 10px;
    }

    #speaker-name {
      width: 325px;
      height: 25px;
      margin: 10px;
      border-radius: 15px;
    }

    .speaker-type {
      font-size: 20px;
      padding: 10px;
    }

    #transcription-area {
      width: 320px;
      margin: 10px;
      border-radius: 15px;
      padding: 10px;
      font-size: 16px;
      font-family: Arial, Helvetica, sans-serif;
    }

    #transcripted_text_paragraph {
      display: none;
      position: relative;
      width: 320px;
      height: 150px;
      border: 1px solid;
      overflow: auto;
      margin: 10px;
      border-radius: 15px;
      flex-direction: row;
      justify-content: space-between;
      padding: 10px;
      font-size: 16px;
      font-family: Arial, Helvetica, sans-serif;
    }

    #transcripted_text_paragraph:after {
      content: "";
      position: absolute;
      z-index: -1;
      top: 0;
      bottom: 0;
      left: 50%;
      border-left: 2px solid black;
      transform: translate(-50%);
    }


    /*.transcription_area_first_child:after {
      content: "";
      position: absolute;
      z-index: -1;
      top: 0;
      bottom: 0;
      left: 50%;
      border-left: 2px solid black;
      transform: translate(-50%);
    }*/

    .annotation-time-class:invalid {
      color: red;
    }

    .annotation-time-ms-class:invalid {
      color: red;
    }

    #confirmation-box {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    .confirm-changes {
      background-color: #1a73e8;
      border: 1px solid #1a73e8;
      clear: left;
      border-radius: 2px;
      box-shadow: none;
      color: #202124;
      cursor: pointer;
      float: right;
      font-size: 11px;
      font-weight: bold;
      height: 32px;
      margin: 3em 0 0 .5em;
      outline: 0px;
      padding: 0px 16px;
      text-align: center;
      vertical-align: top;
      white-space: nowrap;
    }

    .discard-changes {
      background-color: #ddd;
      border: 1px solid #ddd;
      clear: left;
      border-radius: 2px;
      box-shadow: none;
      color: #202124;
      cursor: pointer;
      float: right;
      font-size: 11px;
      font-weight: bold;
      height: 32px;
      margin: 3em 0 0 .5em;
      outline: 0px;
      padding: 0px 16px;
      text-align: center;
      vertical-align: top;
      white-space: nowrap;
    }

    #empty-speaker {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    #hundredMilliseconds-gap {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    #endTime-moreThanStartTime {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    #sameSpeaker-Overlapping {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    #top-speaker-remove-dialouge-box {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    #guidelines-box {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 1.5em;
      position: absolute;
      z-index: 10000;
      top: 16vh;
      left: 30vw;
      display: none;
    }

    .keyboard-shortcuts td {
      font-size: 1.1em;
      margin-bottom: 6px;
      font-weight: normal;
    }

    .keyboard-shortcuts caption {
      font-size: 1.6em;
      margin-bottom: 10px;
      text-align: center;
    }

    .keyboard-shortcuts th,
    .keyboard-shortcuts td {
      padding: 10px;
      padding-right: 20px;
    }

    .keyboard-shortcuts tbody tr:nth-child(even),
    .keyboard-shortcuts thead tr {
      background-color: #ddd;
    }

    .keyboard-shortcuts thead {
      font-size: 1.3em;
      display: table-header-group;
      vertical-align: middle;
    }

    caption,
    th,
    td {
      text-align: left;
      font-weight: normal;
    }

    table {
      border-spacing: 0px;
      border-collapse: collapse;
      margin: 0px;
      padding: 0px;
      border: 0px;
      outline: 0px
    }

    #close-guidelines {
      background-color: #1a73e8;
      border: 1px solid #1a73e8;
      clear: left;
      color: #eee;
      border-radius: 2px;
      box-shadow: none;
      cursor: pointer;
      float: right;
      font-size: 11px;
      font-weight: bold;
      height: 32px;
      margin: 2em 0 0 .5em;
      outline: 0px;
      padding: 0px 16px;
      text-align: center;
      vertical-align: top;
      white-space: nowrap;
    }

    #top-speaker-editor-box {
      box-shadow: 0 0 5px #999;
      bottom: 30rem;
      right: 35rem;
      border: 1px solid grey;
      /*width: 350px;*/
      position: fixed;
      z-index: 3;
      background-color: white;
      padding: 16px;
      display: none;
    }

    #submit-button {
      display: none;
      position: fixed;
      bottom: 2rem;
      right: 3rem;
      width: 5rem;
      height: 2rem;
      background-color: blue;
      color: #fff;
      font-size: 20px;
      border-radius: 10%;
      cursor: pointer;
    }

    #profile-link-button {
      display: none;
      position: fixed;
      bottom: 1rem;
      right: 0.1rem;
      height: 5%;
      background-color: blue;
      color: #fff;
      font-size: 18px;
      border-radius: 10%;
      cursor: pointer;
    }

    #top-div-speaker-control {
      right: 2rem;
      bottom: 10rem;
      border: 1px groove;
      width: 350px;
      position: fixed;
      background: rgb(233, 237, 225);
      display: none;
    }

    #top-div-control-header {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      margin: 8px;
      font-size: 1.1rem;
      font-family: Arial, Helvetica, sans-serif;
    }

    #top-div-control-close-button {
      background: none;
      border: none;
      font-size: 1.1rem;
      font-family: Arial, Helvetica, sans-serif;
    }

    #top-div-control-speaker-name {
      margin: 10px;
      padding: 5px;
      border: none;
      font-family: Arial, Helvetica, sans-serif;
      font-size: 1.5rem;
      background: transparent;
      font-size: 1.6em;


    }

    #top-div-control-speaker-name:hover {
      border-bottom: 1px solid rgba(0, 0, 0, 0.3);
    }


    #top-div-control-remove-save-section {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      margin: 8px;
      font-size: 1.1rem;
      font-family: Arial, Helvetica, sans-serif;
    }

    #top-div-control-remove-button {
      margin: 8px;
      border: none;

      color: red;
      background: none;
      font-family: Arial, Helvetica, sans-serif;
      border-radius: 4px;

      cursor: pointer;

      font-size: 14px;
      font-weight: 600;
      height: 36px;
      letter-spacing: 1.2;
      min-width: 72px;
    }

    #top-div-control-save-button {
      margin: 8px;
      border-radius: 4px;

      font-family: Arial, Helvetica, sans-serif;
      background: #4285f4;

      border: none;
      cursor: pointer;
      float: right;
      font-size: 14px;
      font-weight: 600;
      height: 36px;
      letter-spacing: 1.2;
      min-width: 72px;
      padding: 8px 16px;

    }

    #already-submitted-dialouge-box {
      background-color: white;
      box-shadow: 0 0 12px black;
      text-align: center;
      font-size: 18px;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      width: 20vw;
      height: 10vh;
      z-index: 10000;
      top: 20vh;
      left: 40vw;
      display: none;
    }

    #top-div-control-navigator {
      border-top: 1px solid #888888;
      display: flex;
      flex-direction: row;
      padding: 8px;
      font-size: 16px;
      justify-content: space-around;

    }

    #display-training-segments {
      display: none;
    }

    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    /* Firefox */
    input[type=number] {
      -moz-appearance: textfield;
    }
  </style>
</head>

<body>
  <div id="header">
    {{>header}}
  </div>

  {{>body}}

  <script src="https://code.jquery.com/jquery-3.4.1.js"></script>

  <script src="local_modules/wavesurfer.js/dist/wavesurfer.js"></script>
  <script src="local_modules/wavesurfer.js/dist/plugin/wavesurfer.timeline.js"></script>
  <script src="local_modules/wavesurfer.js/dist/plugin/wavesurfer.regions.js"></script>
  <script src="public/js/resize.js"></script>
  <script src="public/js/create-div.js"></script>
  <script src="public/js/create-top-speaker-div.js"></script>
  <script src="public/js/repeat-region.js"></script>
  <script src="public/js/loadingScreen.js"></script>
  <!--<script src="wavesurfer.js/src/drawer.multicanvas.js"></script>-->
  <script>
    var user_id;
    var audio_id;
    audio_id = {{ audio_id }};
    user_id = {{ user_id }};
    var VENDOR_WEBSITE;
    VENDOR_WEBSITE={{isVendorWebsite}};
    console.log({{VENDOR_WEBSITE}});

    //////console.log(user_id);
  </script>
  {{!-- Amplitude --}}
  <script type="text/javascript">
    (function (e, t) {
      var n = e.amplitude || {
        _q: [],
        _iq: {}
      };
      var r = t.createElement("script");
      r.type = "text/javascript";
      r.integrity =
        "sha384-RsEu4WZflrqYcEacpfoGSib3qaSvdYwT4D+DrWqeBuDarSzjwUQR1jO8gDiXZd0E";
      r.crossOrigin = "anonymous";
      r.async = true;
      r.src = "https://cdn.amplitude.com/libs/amplitude-6.2.0-min.gz.js";
      r.onload = function () {
        if (!e.amplitude.runQueuedFunctions) {
          //console.log("[Amplitude] Error: could not load SDK");
        }
      };
      var i = t.getElementsByTagName("script")[0];
      i.parentNode.insertBefore(r, i);


      function s(e, t) {
        e.prototype[t] = function () {
          this._q.push([t].concat(Array.prototype.slice.call(arguments, 0)));
          return this;
        };
      }
      var o = function () {
        this._q = [];
        return this;
      };
      var a = [
        "add",
        "append",
        "clearAll",
        "prepend",
        "set",
        "setOnce",
        "unset",
      ];
      for (var u = 0; u < a.length; u++) {
        s(o, a[u]);
      }
      n.Identify = o;
      var c = function () {
        this._q = [];
        return this;
      };
      var l = [
        "setProductId",
        "setQuantity",
        "setPrice",
        "setRevenueType",
        "setEventProperties",
      ];
      for (var p = 0; p < l.length; p++) {
        s(c, l[p]);
      }
      n.Revenue = c;
      var d = [
        "init",
        "logEvent",
        "logRevenue",
        "setUserId",
        "setUserProperties",
        "setOptOut",
        "setVersionName",
        "setDomain",
        "setDeviceId",
        "enableTracking",
        "setGlobalUserProperties",
        "identify",
        "clearUserProperties",
        "setGroup",
        "logRevenueV2",
        "regenerateDeviceId",
        "groupIdentify",
        "onInit",
        "logEventWithTimestamp",
        "logEventWithGroups",
        "setSessionId",
        "resetSessionId",
      ];

      function v(e) {
        function t(t) {
          e[t] = function () {
            e._q.push([t].concat(Array.prototype.slice.call(arguments, 0)));
          };
        }
        for (var n = 0; n < d.length; n++) {
          t(d[n]);
        }
      }
      v(n);
      n.getInstance = function (e) {
        e = (!e || e.length === 0 ? "$default_instance" : e).toLowerCase();
        if (!n._iq.hasOwnProperty(e)) {
          n._iq[e] = {
            _q: []
          };
          v(n._iq[e]);
        }
        return n._iq[e];
      };
      e.amplitude = n;
    })(window, document);
    var reqAPIKey = "{{ amplitude_api_key }}";
    var params = {
      user_id
    }
    $.ajax({
      method: "POST",
      url: "/get-web-app-id",
      data: params,
      success: function (response) {
        amplitude.getInstance().init(reqAPIKey, response[0].web_app_id.toString(), {
          includeReferrer: true,
          includeUtm: true,
          includeGclid: true,
        });
        logEvent("Audio Test Screen Loaded - Trans", {
          type: "Single Audio"
        });
      }
    });
  </script>
  <script>
    function logEvent(ampEventName, ampEventProp) {
      amplitude.getInstance().logEvent(ampEventName, ampEventProp);
    }

    function setUserProp(identifyObj) {
      amplitude.getInstance().Identify(identifyObj);
    }
  </script>
  <script>
  </script>
  <script>
    var is_submitted = "FALSE";
    var diffCheckSubmit = false;//Checking diff checker
    var actualResponseLength = 0;//Assigns total response length
    var postsResponseLength = 0;//Assigns total posts length
    var wrongSpeakerScore = 0;
    var wrongAnnotationScore = 0;
    var unnecessarySegmentsErrors = 0;
    var overallScore = 0;//var to assign score
    var scoreInPercentage = 0;
    var rightWordsScore = 0;
    var totalWordCount = 0;
    var passOrFail = ""//var to assign pass or fail
    var reqSpeakers = [];//var to check if speakers are already available  
    var addRegionBool = true;//Bool for adding region only one on click
    var canvasHeight = 0;
    var updateAnnotationOnClick = false;//allow updating annotation box only on click
    var updateAnnotationOnChange = false;//allow updating annotation box only on change
    var updateTopDivSpeakerOnClick = false;//allow updating only on click 
    var updateTopDivSpeaker = false;//checking top div speaker changes
    var updateSegments = true;//update segments only if not new region 
    var dragging = false;//allow dragging
    var temp, y, diff, segmentStart, segmentEnd = 0;
    var pressed = false;
    var segmentId = 1;
    var currentId = "";
    var currentStartTime, currentEndTime = 0;
    var newStartTime, newEndTime = 0;
    var confirmChangesboxBool = false;//boolean true if confirm changes box appears
    var speakerNameCheckBool = true;//true if speaker name is valid
    var hundredMillisecSegmentCheck = true;//true if segment is created above 100 ms
    var segmentEndingTimeMoreThanStartingTime = false;
    var sameSpeakerOverlapping = false;//true if two same speakers overlap each other
    var pixels = 0;
    var correctSegmentCreated = false;
    var getTopClickedId;

    //var TimelinePlugin=window.WaveSurfer.timeline;
    var temp = 0, scrolltop = 0, relativeScroll = 0;
    var buttons = {
      play: document.getElementById("play-button")
    }

    //Creating the audio stream from Wavesurfer 
    var spectrum = WaveSurfer.create({
      container: '#peaks-container',
      waveColor: 'grey',
      progressColor: 'grey',
      minPxPerSec: 96,
      scrollParent: false,
      autoCenter: true,
      backgroundColor: "#fff",
      seekStyle: "line",
      mediaControls: true,
      barWidth: 1,
      barHeight: 0.5,
      height: 316,
      plugins: [
        WaveSurfer.timeline.create({
          container: "#time-line",
          timeInterval: 0.1,
          height: 50,
          notchPercentHeight: 25
        }),
        WaveSurfer.regions.create({})
      ]
    });
    spectrum.zoom(96);

    displayWaveSurferLoading();


    //handle play button
    buttons.play.addEventListener("click", function (event) {
      event.preventDefault();
      if (!spectrum.isPlaying()) {
        spectrum.play();
        $("#play-button").find($(".fa")).toggleClass('fa-play fa-pause');
      } else {
        spectrum.pause();
        $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
      }
      document.getElementById('total-timestamp').innerText = secondsToTimestamp(spectrum.getDuration());
    })

    //function on spectrum is ready 
    spectrum.on("ready", function () {

      totalDuration = spectrum.getDuration();

      
      //canvas height to set the top speaker annotation div position from left 
      canvasHeight = $("#peaks-container > wave canvas").height();

      //audio wave total height 
      $("#peaks-container").css({
        "width": `calc(${totalDuration} * 96px)`
      })

      $("#plus-button").css({
        "marginTop": `${$("#peaks-container").position().top}px`
      })
      $("#time-line").css({
        "transform": `translate(0px,${$("wave").height() - 10}px)`
      })
      $("#annotation-div-head").css({
        "left": `${canvasHeight}px`
      })
      buttons.play.disabled = false;
      totalDuration = spectrum.getDuration();
      document.getElementById('total-timestamp').innerText = secondsToTimestamp(totalDuration);

      //Changes for top information 
      $("#guide-for-submit-button-appearance").text("Press the SUBMIT button once you finish. The SUBMIT button will only appear after you finish transcribing all the speaker segments.");

      //Add Region on key down
      $("html").on("keydown", function (event) {

        if (!updateTopDivSpeaker) {
          if (event.ctrlKey && event.shiftKey && event.which == 65) {
            //console.log("Pressed");
            //addRegion();
            if (addRegionBool == true && !updateAnnotationOnChange && !updateTopDivSpeaker) {
              //renew();
            }
          }
        }
      });

      //Replay Region on KeyDown
      $("html").on("keydown", function (event) {
        if (event.altKey && event.which == 82 || event.which == 82 && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "top-div-control-speaker-name" && event.target.id !="feedback-textarea") {
          ////////console.log("Pressed");
          repeatRegion();
        }
      });//Replay Function end

      //play pause on space bar
      $("html").on("keydown", function (event) {
        if ((event.which == 32 || event.which == 96 || event.which == 48) && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "annotation-start-minute" && event.target.id != "annotation-start-seconds" && event.target.id != "annotation-start-milliseconds" && event.target.id != "annotation-end-minute" && event.target.id != "annotation-end-seconds" && event.target.id != "annotation-end-milliseconds" && event.target.id != "top-div-control-speaker-name" && event.target.id !="feedback-textarea") {
          ////console.log(event.target);

          if (spectrum.isPlaying()) {
            spectrum.pause();
            $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
          }
          else {
            spectrum.play();
            $("#play-button").find($(".fa")).toggleClass('fa-play fa-pause');
            highlightRegion();
          }
        } else if ((event.ctrlKey && event.which == 32) && (event.target.id == "speaker-name" || event.target.id == "transcription-area" || event.target.id == "annotation-start-minute" || event.target.id == "annotation-start-seconds" || event.target.id == "annotation-start-milliseconds" || event.target.id == "annotation-end-minute" || event.target.id == "annotation-end-seconds" || event.target.id == "annotation-end-milliseconds" || event.target.id == "top-div-control-speaker-name")) {
          if (spectrum.isPlaying()) {
            spectrum.pause();
            $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
          }
          else {
            spectrum.play();
            $("#play-button").find($(".fa")).toggleClass('fa-play fa-pause');
            highlightRegion();
          }
        }
      });//play pause function end

      //skip audio backwards 500ms on "8" pressed
      $("html").on("keydown", function (event) {
        if ((event.which == 104 || event.which == 56) && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "annotation-start-minute" && event.target.id != "annotation-start-seconds" && event.target.id != "annotation-start-milliseconds" && event.target.id != "annotation-end-minute" && event.target.id != "annotation-end-seconds" && event.target.id != "annotation-end-milliseconds") {
          skipAudio(-0.5);
        }
      });

      //skip audio backwards 500ms on "5" pressed
      $("html").on("keydown", function (event) {
        if ((event.which == 101 || event.which == 53) && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "annotation-start-minute" && event.target.id != "annotation-start-seconds" && event.target.id != "annotation-start-milliseconds" && event.target.id != "annotation-end-minute" && event.target.id != "annotation-end-seconds" && event.target.id != "annotation-end-milliseconds") {
          skipAudio(0.5);
        }
      });

      //jump audio to start
      $("html").on("keydown", function (event) {
        if (event.which == 36 || (event.which == 18 && event.which == 37)) {
          event.preventDefault();
          spectrum.seekTo(0);
        }
      });

      //jump audio to end
      $("html").on("keydown", function (event) {
        if (event.which == 35) {
          skipAudio(spectrum.getDuration());
        }
      });

      //function to skip audio
      function skipAudio(timeToSkip) {
        spectrum.skip(timeToSkip);
      }

      //Making our canvas line visible 
      $("#peaks-container > wave").css({ "overflow": "" });
      //Creating a Canvas straight Line
      var canvas = $("#peaks-container > wave canvas");
      var newCanvas = document.createElement("canvas");
      newCanvas.width = "2000";
      newCanvas.height = "316";
      newCanvas.style.cssText = ("position: absolute; z-index: 2; left: -2000px; bottom: 0px; height: 35.5%; pointer-events: none; width: 2000px;");
      canvas[0].before(newCanvas);
      canvas = $("#peaks-container > wave canvas");
      for (var i = 0; i < canvas.length; i++) {
        var context = canvas[i].getContext("2d");
        var x = (canvas[i].width);
        var y = (canvas[i].height) / 2;

        context.beginPath();
        // Staring point (10,45)
        context.moveTo(0, y);
        // End point (180,47)
        context.lineTo(x, y);
        // Make the line visible
        context.strokeStyle = "#000";
        context.lineWidth = 1;
        context.stroke();
      }//Canvas Creation End      
    });//Function end for on ready spectrum


    //Resize Window on ready
    $(document).ready(function () {
      resizeWindow();
    });

    window.onload = function (e) {
      resizeWindow();
    }

    window.addEventListener("resize", resizeWindow)


    //function to seek to set cookie
    function seekToCookie() {
      //Load Wave to previous time stamp from cookie
      setTimeout(function () {
        if (getCookie("current_time") > 0 && $("#peaks-container").children("div").length > 1) {
          spectrum.seekTo(parseFloat(getCookie("current_time")));
           updateTimer();
          //spectrum.seekTo(0.0404);
        };
      }, 1500);
    }


    //Function to set current time
    function updateTimer() {
      var formatTime = secondsToTimestamp(spectrum.getCurrentTime());
      document.getElementById('start-timestamp').innerText = formatTime;
      //setTimeout(updateTimer, 100);
      if ((spectrum.getCurrentTime()) > 0) {
        setCookie("current_time", `${spectrum.getCurrentTime() / spectrum.getDuration()}`, 30);
      }
    }
    setInterval(updateTimer(), 100);

    //function to set cookie for current time stamp
    function setCookie(cookieName, cookieValue, expireDays) {
      var date = new Date();
      date.setTime(date.getTime() + (expireDays * 24 * 60 * 60 * 1000));
      var expires = "expires=" + date.toUTCString();
      document.cookie = cookieName + "=" + cookieValue + ";" +
        expires + ";path=/";
    }

    //function to get cookie for currentTime Stamp
    function getCookie(cookieName) {
      var name = cookieName + "=";
      var decodedCookie = decodeURIComponent(document.cookie);
      var cookieArray = decodedCookie.split(";");
      for (var i = 0; i < cookieArray.length; i++) {
        var cookie = cookieArray[i];
        while (cookie.charAt(0) == ' ') {
          cookie = cookie.substring(1);
        }
        if (cookie.indexOf(name) == 0) {
          return cookie.substring(name.length, cookie.length);
        }
      }
      return "";
    }

    //function to convert seconds to minute, seconds and milliseconds
    function secondsToTimestamp(seconds) {

      var n = Math.floor(seconds);
      var ms = (seconds - n).toFixed(3);
      seconds = Math.floor(seconds);
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      var s = seconds - (h * 3600) - (m * 60);

      m = m < 10 ? '0' + m : m;
      s = s < 10 ? '0' + s : s;
      ms = ms < 10 ? '0' + ms : ms;

      return m + ':' + s + '.' + ms.split(".")[1];
    }

    //function to convert seconds to minute for editing annotation box  
    function secondsToMinutes(seconds) {
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      m = m < 10 ? '0' + m : m;
      return m;
    }

    //function to convert seconds to seconds for editing annotation box  
    function secondsToSeconds(seconds) {
      seconds = Math.floor(seconds);
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      var s = seconds - (h * 3600) - (m * 60);
      s = s < 10 ? '0' + s : s;
      return s;
    }

    //function to convert seconds to milliseconds for editing annotation box  
    function secondsToMilliseconds(seconds) {
      var n = Math.floor(seconds);
      var ms = (seconds - n).toFixed(3);
      ms = ms < 10 ? '0' + ms : ms;
      return ms.split(".")[1];
    }


    //Loading the Audio
    spectrum.load("{{audio_url}}");

    //function for dragging spectrum on mousedown
    window.onload = (function () {
      if (!confirmChangesboxBool) {
        $("#peaks-container,#top-div-for-scrolling-enabling").on("mousedown", function (e) {
          ////console.log("Touched");
          if (spectrum.isPlaying()) {
            spectrum.pause();
            $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
          }
          dragging = true;
          temp = y = e.clientY;
        })
        $("#peaks-container,#top-div-for-scrolling-enabling").on("mousemove", function (e) {

          if (dragging == true) {
            y = e.clientY;
            diff = y - temp;
            temp = y;

            var req = (spectrum.getCurrentTime() + (diff * (-1) / 96)) / spectrum.getDuration();

            req < 0 ? req = 0 : req = req;
            req > 1 ? req = 1 : req = req;
            spectrum.seekTo(req);

          }
        })
        $(window).on("mouseup", function (e) {
          dragging = false;
        })
      }
    })//Window.onload function end for mouse events

    //Function on scrolling to seek spectrum  
    document.getElementById("peaks-container").addEventListener("wheel", function (event) {

      /*if (parseInt($("#peaks-container").css("marginTop").replace("px", "")) < -100) {
        $("#top-div-for-scrolling-enabling").css({ "display": "none" });
      } else if (parseInt($("#peaks-container").css("marginTop").replace("px", "")) > -100) {
        $("#top-div-for-scrolling-enabling").css({ "display": "block" });
      }*/

      if (!confirmChangesboxBool) {
        if (spectrum.isPlaying()) {
          spectrum.pause();
          $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
        }
        var req = (spectrum.getCurrentTime() + (event.deltaY / 96)) / spectrum.getDuration();
        req < 0 ? req = 0 : req = req;
        req > 1 ? req = 1 : req = req;
        spectrum.seekTo(req);
      }
    });

    document.getElementById("top-div-for-scrolling-enabling").addEventListener("wheel", function (event) {
      if (!confirmChangesboxBool) {
        if (spectrum.isPlaying()) {
          spectrum.pause();
          $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
        }
        var req = (spectrum.getCurrentTime() + (event.deltaY / 96)) / spectrum.getDuration();
        req < 0 ? req = 0 : req = req;
        req > 1 ? req = 1 : req = req;
        spectrum.seekTo(req);
      }
    });

    //Scroll Function Ends


    window.addEventListener("scroll", function (event) {
      event.preventDefault();
    })

    //function to display the textarea and speakerfield
    function displayArea() {
      var val = document.getElementById("annotation-type");
      if (val.value !== "default" && val.value !== "Singing") {
        document.getElementById("speaker-name").value = val.value;
        document.getElementById("transcription-area").value = "";
        document.getElementById("transcription-area").style.display = "none";
        document.getElementById("speaker-name").style.display = "none";
      }
      else {
        document.getElementById("transcription-area").style.display = "block";
        document.getElementById("speaker-name").style.display = "block";
      }
    }

    //function on spectrum ready
    spectrum.on("ready", function () {
      //Responsiveness for annotation box
      if (((window.screen.width * window.devicePixelRatio) < 1920) && ((window.screen.height * window.devicePixelRatio) < 1080)) {
        $("#annotation-box").css({
          "bottom": "1vh",
          "transform": "scale(0.7)"
        })
      }

      //Load Wave to previous time stamp from cookie
      if (getCookie("current_time") > 0) {
        spectrum.seekTo(parseFloat(getCookie("current_time")));
        //spectrum.seekTo(0.0404);
      };

      //Hiding Annotation Div
      $("#annotation-box").hide();
      //function on ctrl+quote key down and ctrl+colon
      //ctrlquote();
      //ctrlcolon();

      //getting actual data from actual table in database   
      getPreviousCreatedSegments();

      const params = new URLSearchParams(window.location.search);
      if (!(params.has('linguist_reviewer_test') && params.get('linguist_reviewer_test') == "true")) {

        //disable unnecessary elemeats for transcription  
        disableForTranscription()
      }

      /*
      //ajax to create previously created segments by user on spectrum load
      $.ajax({
        method: "POST",
        url: "/get-segments",
        data: { 
          user_id: user_id,
          audio_id:audio_id          
           },
        async: true,
        success: function (response) {

          //////console.log(response[0]["segment_id"]);
          for (var i = 0; i < response.length; i++) {
            var segmentId = response[i]["segment_id"];
            var speakerName = response[i]["div_className"];
            var annotationType = response[i]["div_title"];
            var segmentStart = response[i]["segment_start"];
            var segmentEnd = response[i]["segment_end"];
            var annotationText = response[i]["annotation_text"];

            //creating Segments 
            spectrum.addRegion({
              id: segmentId,
              start: segmentStart,
              end: segmentEnd,
              drag: false,
              color: "rgba(0,0,0,0)"
            })
            if (!reqSpeakers.includes(speakerName) && speakerName.includes("speaker")) {
              $("#select-options").append(`<option value="${speakerName}"/>`);
              reqSpeakers.push(speakerName);
            }
            //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
            createDiv(segmentId, speakerName, annotationType, segmentStart, segmentEnd, annotationText);
          }

          //ajax to check if the user has already submitted
          $.ajax({
            method: "POST",
            url: "/get-submitted-or-not",
            data: { 
              user_id: user_id,
              audio_id:audio_id
              },
            async: true,
            success: function (response) {
              if (response.length > 0) {
                is_submitted = response[0]["is_submitted"];
                //Checking if already submitted
                if (is_submitted == "TRUE") {
                  //console.log("Euta log");
                  disableAllInterfaceOnSubmit();
                  ajaxReq();//Ajax Request to check correct incorrect segment
                  displayHamburger();
                  $("#submit-button").hide();
                  $("#profile-link-button").show();
                }
              }
            }
          })
        }
      });*/

      //Creating a new region on plus button click
      $("#plus-button").on("click", function () {
        if (!updateTopDivSpeaker) {
          //addRegion();
        }
      });
    });//spectrum on ready function end

    function getPreviousCreatedSegments() {
      //ajax to create previously created segments by user on spectrum load
      $.ajax({
        method: "POST",
        url: "/transcription-actual-segments",
        data: {
          user_id,
          audio_id: audio_id
        },
        async: true,
        success: function (response) {

          //////console.log(response[0]["segment_id"]);
          for (var i = 0; i < response.length; i++) {
            var segmentId = response[i]["segment_id"];
            var speakerName = response[i]["div_className"];
            var annotationType = response[i]["div_title"];
            var segmentStart = response[i]["segment_start"];
            var segmentEnd = response[i]["segment_end"];
            var annotationText = response[i]["annotation_text"];

            //creating Segments 
            spectrum.addRegion({
              id: segmentId,
              start: segmentStart,
              end: segmentEnd,
              drag: false,
              color: "rgba(0,0,0,0)"
            })
            if (!reqSpeakers.includes(speakerName) && speakerName.includes("speaker")) {
              $("#select-options").append(`<option value="${speakerName}"/>`);
              reqSpeakers.push(speakerName);
            }
            //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
            createDiv(segmentId, speakerName, annotationType, segmentStart, segmentEnd, annotationText);
          }

          //ajax to check if the user has already submitted
          $.ajax({
            method: "POST",
            url: "/get-submitted-or-not-for-transcription",
            data: {
              user_id: user_id,
              audio_id: audio_id
            },
            async: true,
            success: function (response) {
              if (response.length > 0) {
                is_submitted = response[0]["is_submitted"];
                //Checking if already submitted
                if (is_submitted == "TRUE") {
                  disableAllInterfaceOnSubmit();
                  //ajaxReq();//Ajax Request to check correct incorrect segment
                  //diffCheck();
                  //displayHamburger();
                  $("#submit-button").hide();
                  $("#profile-link-button").show();

                  $("#already-submitted-dialouge-box").show();
                  $("body").not("#already-submitted-dialouge-box").css({
                    backgroundColor: "#c2c1c0",
                    opacity: "0.8"
                  })
                  //Boolean to stop user from using LT
                  confirmChangesboxBool = true;
                }
              }
            }
          })
        }
      })
    }

    //Saving Segments On Save Button Click
    $("#annotation-save").on("click", function () {
      saveClick();

    });

    //onClick for close(X) button on Annotation Box
    $("#close").on("click", function () {
      updateSegments = true;
      updateAnnotationOnClick = false;
      updateTopDivSpeakerOnClick = false;
      if (updateAnnotationOnChange) {
        confirmDialogue();
        confirmChangesboxBool = true;
      } else {
        $("#annotation-box").hide();
        addRegionBool = true;
      }
      //current region highlight
      highlightRegion();
    });

    $("#top-div-control-close-button").on("click", function () {
      if (updateTopDivSpeaker) {
        confirmDialogue();
      } else {
        $("#top-div-speaker-control").hide();

      }
    });

    //Remove Region             
    $("#annotation-remove").on("click", function () {
      updateSegments == true;
      var regionId = currentId;
      //ajax request to remove segments
      var params = {
        regionId,
        user_id,
        audio_id: audio_id
      }
      if (regionId != null) {
        $.ajax({
          method: "POST",
          url: "/remove-segments",
          data: params,
          success: function () {
            //Hiding Annotation Div      
            $("#annotation-box").hide();
            ////console.log("Removed");
            updateAnnotationOnChange = false;
            updateAnnotationOnClick = false;
            //Changed RegionId to CurrentId
            if (spectrum.regions.list[regionId] != null) {
              spectrum.regions.list[regionId].remove();
            }
            $("#" + regionId).empty();
            $("#" + regionId).remove();
          }
        });
      }
      addRegionBool = true;
    });//Remove Region Function End

    //Remove top speaker divs
    $("#top-div-control-remove-button").on("click", function () {
      removeTopDivSpeakers(getTopClickedId);
    });

    function removeTopDivSpeakers(topSpeakerClickedId) {
      //Getting the clicked Top Div Class
      var getClickedIdClass = document.getElementById(topSpeakerClickedId).className;
      //Checking if the segments of the class still remain
      if ($("#peaks-container").children().hasClass(getClickedIdClass)) {

        topSpeakerRemoveDialougeBox();
      } else {
        //Removing top div
        $("#" + topSpeakerClickedId).remove();
        $("#top-div-speaker-control").hide();
        updateTopDivSpeakerOnClick = false;
        updateTopDivSpeaker = false;
        //console.log("Class Not Found");
      }
    }

    //function to save all top div speakers
    $("#top-div-control-save-button").on("click", function () {
      saveTopDivSpeakers(getTopClickedId);
    });

    function saveTopDivSpeakers(topSpeakerClickedId) {
      //Getting the clicked Top Div Class
      var getClickedIdClass = document.getElementById(topSpeakerClickedId).className;
      var speakerNameFound = false;
      var userInputTopSpeakerName = $("#top-div-control-speaker-name").val();
      if (spellCheckSpeakerName(userInputTopSpeakerName)) {
        document.getElementById(topSpeakerClickedId).className = userInputTopSpeakerName.replace(/ /g, "-");
        document.getElementById(topSpeakerClickedId).querySelector("p").innerText = userInputTopSpeakerName;
        $("#peaks-container").children().each(function (index, value) {
          if (this.className == getClickedIdClass) {
            speakerNameFound = true;
            ////console.log(this.className);
            this.className = userInputTopSpeakerName.replace(/ /g, "-");
          }
        });
        if (speakerNameFound) {
          params = {
            userInputTopSpeakerName: userInputTopSpeakerName,
            previousTopSpeakerName: getClickedIdClass.replace(/-/g, " "),
            user_id,
            audio_id: audio_id
          }

          $.ajax({
            method: "POST",
            url: "/top-speaker-control-save-button",
            data: params,
            success: function (response) {
              //console.log("Top Speakers Name Updated");
              updateTopDivSpeaker = false;
              updateTopDivSpeakerOnClick = false;
            }
          })
        };
      } else {
        emptySpeaker();
      }
    }
    //save top div speakers function end 

    //First Navigator Turn Button
    $("#top-speaker-first-navigator-button").on("click", function () {
      navigateTurnsFirstButton(getTopClickedId);
    });

    function navigateTurnsFirstButton(topSpeakerClickedId) {
      var getClickedIdClass = document.getElementById(topSpeakerClickedId).className;
      if ($("#peaks-container").children().hasClass(getClickedIdClass)) {
        var firstSegmentId = $(`#peaks-container .${getClickedIdClass}`)[0].id;
        var firstSegmentStartTime = spectrum.regions.list[firstSegmentId].start;
        spectrum.seekTo(firstSegmentStartTime / spectrum.getDuration());
      }
    }

    //first navigator function end

    //second navigator function start
    $("#top-speaker-last-navigator-button").on("click", function () {
      navigateTurnsLastButton(getTopClickedId);
    });

    function navigateTurnsLastButton(topSpeakerClickedId) {
      var getClickedIdClass = document.getElementById(topSpeakerClickedId).className;
      if ($("#peaks-container").children().hasClass(getClickedIdClass)) {
        var lastSegmentId = $(`#peaks-container .${getClickedIdClass}`)[$(`#peaks-container .${getClickedIdClass}`).length - 1].id;

        var lastSegmentStartTime = spectrum.regions.list[lastSegmentId].start;
        spectrum.seekTo(lastSegmentStartTime / spectrum.getDuration());
      }

    }

    //Second Navigator Function End

    //displaying contents on audio processing
    spectrum.on("audioprocess", () => {
      if (spectrum.regions.getCurrentRegion() != null && !updateAnnotationOnChange && !updateTopDivSpeaker) {
        currentId = spectrum.regions.getCurrentRegion().id;
        displayCurrentContents();
        highlightRegion();
      }
    })

    //Seeking Specturm
    spectrum.on("seek", function () {
      //Displaying Current Segments Contents in our Annotation Box      
      //Var to check whether the user has filled segments
      var checkTextsForSubmit = true;
      if (!updateTopDivSpeaker) {
        displayCurrentContents();
      }
      //Displaying submit button only if audio is played to last and 10 segements are created    
      if (is_submitted == "FALSE" && $("#peaks-container").children("div").length > 1) {
        for (var i = 1; i < $("#peaks-container").children("div").length; i++) {
          if ($("#peaks-container").children("div")[i].title == "default" || $("#peaks-container").children("div")[i].title == "Singing") {
            if ($("#peaks-container").children("div")[i].innerText === "") {
              //console.log("False");
              checkTextsForSubmit = false;
            }
          }

        }
        if ((spectrum.getCurrentTime() > (spectrum.getDuration() / 2)) && checkTextsForSubmit) {
          if (is_submitted == "FALSE") {
            $("#submit-button").show();
          }

        }else{
          if(is_submitted!="FALSE"){
            $("#submit-button").hide();
          }
            
        }

      }
    });

    //colorPicker
    function getRandomColor() {
      var hue = Math.floor(Math.random() * 355);
      return `hsl(${hue},100%,90%)`;
    }

    //function to create a div
    var zindexLoop = 1000;
    /*
    function createDiv(segmentId, segmentClass = "", segmentTitle = "", segmentStart, segmentEnd, annotationText, actual = false) {
      //leftMargin =400;
      //declaring the add region bool true to allow adding regions
      addRegionBool = true;
      var leftMargin = canvasHeight - 8;
      var div = document.createElement("div");
      //div.style.marginTop="450px";           
      div.id = segmentId;

      div.className = segmentClass.replace(/ /g, "-");
      div.title = segmentTitle;
      var p = document.createElement("p");
      var colorArr = ["#f5d98c", "#f29363", "#b4ede9", "#a1edbc"];
      var neededColor = getRandomColor();
      div.style.height = "250px";
      //if it is actual data from database, display correct or incorrect 
      if (actual) {
        if (correctSegmentCreated) {
          div.style.border = `3.5px dashed #05f234`;
          div.style.opacity = "0.4";
        } else {
          div.style.border = `3.5px dashed #ff0a0e`;
          div.style.opacity = "0.4";
        }
      }
      //div.style.boxShadow = "1px 1px 5px";
      div.style.background = neededColor;
      div.style.zIndex = zindexLoop + 1;
      p.innerHTML = annotationText;
    
      p.style.transform = "translateX(0%) rotate(270deg)";
      p.style.width = "200px";
      p.style.height = "200px";
      p.style.padding = "5px";
      p.style.fontSize = "18px";
      p.style.pointerEvents = "none";
      p.style.wordBreak = "break-word";
      div.appendChild(p);
      div.style.position = "absolute";
      //div.style.top = "0px";
      var progress1 = segmentStart / spectrum.getDuration();
      var progress2 = (segmentEnd - segmentStart) / spectrum.getDuration();
      var minPxDelta = 1 / spectrum.params.pixelRatio;
      var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
      var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta - 3;

      div.style.left = pos + "px";
      div.style.width = pos1 + "px";

      //onClick and onChange action listener
      div.addEventListener("click", changeAnnotationOnClick);

      if ($("#peaks-container").children().hasClass(segmentClass.replace(/ /g, "-").toString())) {
        if (segmentTitle !== "default" && segmentTitle !== "Singing") {
          div.style.top = "0px";
          div.style.height = "180px";
          p.style.width = "150px";
          p.style.height = "150px";
          $("#peaks-container").append(div);

        } else {
          $("#annotation-div").children().each(function (index, value) {
            if (value.className == segmentClass.replace(/ /g, "-")) {
              div.style.background = value.style.backgroundColor;
              div.style.bottom = (leftMargin + leftSpeakerCategoryDivMargin * (index)) + "px";
              div.style.height = "250px";
              $("#peaks-container").append(div);
              return false;
            };
          });
        }
      } else if (segmentTitle !== "default" && segmentTitle !== "Singing") {
        div.style.top = "0px";
        div.style.height = "180px";
        p.style.width = "150px";
        p.style.height = "150px";
        $("#peaks-container").append(div);
      }
      else {
        //var topValue=$("#peaks-container").find("."+segmentClass.replace(" ","-")).position().top;
        div.style.bottom = (leftMargin + leftSpeakerCategoryDivMargin * (($("#annotation-div").children("div").length))) + "px";
        div.style.height = "250px";
        $("#peaks-container").append(div);
        topSpeakerDiv(segmentClass, neededColor);
      }
    }//function createDiv end
  */

    var leftSpeakerCategoryDivMargin = 120;
  

    //function to update Segment Start on start time change
    function updateSegmentonTimeChange() {
      // if (updateSegments) {
      updateAnnotationOnChange = true;
      var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + ($("#annotation-start-milliseconds").val());
      var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + ($("#annotation-end-milliseconds").val());

      if (spectrum.regions.list[currentId] != null) {
        ////console.log("Id" + currentId);
        if ((parseFloat(ending) - parseFloat(starting)) < 0.100 && (parseFloat(ending) - parseFloat(starting)) >= 0) {
          spectrum.regions.list[currentId].update({
            start: starting,//-0.050,
            end: parseFloat(ending) + 0.01//+900
          });
          hundredMillisecSegmentCheck = false;
          segmentEndingTimeMoreThanStartingTime = false;
        } else if ((parseFloat(ending) - parseFloat(starting)) < 0) {
          ////console.log(ending);
          ////console.log(starting);
          spectrum.regions.list[currentId].update({
            end: starting,
            start: ending
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = true;
        } else {
          spectrum.regions.list[currentId].update({
            start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + $("#annotation-start-milliseconds").val(),
            end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + $("#annotation-end-milliseconds").val()
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = false;
        }

        //highlight clicked region
        highlightRegion();

        newStartTime = spectrum.regions.list[currentId].start;
        newEndTime = spectrum.regions.list[currentId].end;
        ////console.log(newStartTime);
        var progress1 = newStartTime / spectrum.getDuration();
        var progress2 = (newEndTime - newStartTime) / spectrum.getDuration();
        var minPxDelta = 1 / spectrum.params.pixelRatio;
        var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
        var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;

        if ($("#peaks-container").children().is("#" + currentId)) {
          document.getElementById(currentId).style.left = pos + "px";
          document.getElementById(currentId).style.width = pos1 + "px";
        }

        //Change start and end on change
        segmentStart = spectrum.regions.list[currentId].start;
        segmentEnd = spectrum.regions.list[currentId].end;

        /*if(dragging==true){
          spectrum.regions.list[regionId].update({
             start:currentStartTime,
             end:currentEndTime
          });     
        }*/
      }
      //}
    }//Update Segment On Change End

    //function to check changes on top div speaker control
    function updateTopSpeakerControl() {
      updateTopDivSpeaker = true;
    }

    $(document).on("mousedown", "wave", function () {
      ////console.log("Okay");
    });

    //function for annotation contents change on click
    function changeAnnotationOnClick(evt) {
      //Displaying Annotation Div
      if (!updateTopDivSpeaker) {
        $("#top-div-speaker-control").hide();
        $("#annotation-box").show();
      }

      if (!updateAnnotationOnChange && !updateTopDivSpeaker) {
        var clickedId = evt.target.id;
        currentId = evt.target.id;
        //highlight clicked region
        highlightRegion();
        //Changed currentId to clicked Id to check if it works, works until now 
        currentStartTime = spectrum.regions.list[clickedId].start;
        currentEndTime = spectrum.regions.list[clickedId].end;
        ////console.log(clickedId);

        //segment start variables
        var startMinute = secondsToMinutes(spectrum.regions.list[clickedId].start);
        var startSeconds = secondsToSeconds(spectrum.regions.list[clickedId].start);
        var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[clickedId].start);

        //segment end variables
        var endMinute = secondsToMinutes(spectrum.regions.list[clickedId].end);
        var endSeconds = secondsToSeconds(spectrum.regions.list[clickedId].end);
        var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[clickedId].end);

        //displaying texts   
        $("#annotation-start-minute").val(startMinute);
        $("#annotation-start-seconds").val(startSeconds);
        $("#annotation-start-milliseconds").val(startMilliseconds);
        $("#annotation-end-minute").val(endMinute);
        $("#annotation-end-seconds").val(endSeconds);
        $("#annotation-end-milliseconds").val(endMilliseconds);

        if ($("#peaks-container").children().is("#" + clickedId) > 0) {
          var segmentType = document.getElementById(clickedId).title;
          var segmentSpeaker = document.getElementById(clickedId).className.replace(/-/g, " ");
          var segmentText = document.getElementById(clickedId).innerText;
          var divColor = document.getElementById(clickedId).style.background;

          //changing color of Annotation Heading
          $(".annotation-editHeading").css("backgroundColor", divColor);
          if (segmentType !== "default" && segmentType !== "Singing") {
            document.getElementById("transcription-area").style.display = "none";
            document.getElementById("speaker-name").style.display = "none";
            //$("#annotation-box").css("height", 250 + "px");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = "";
            document.getElementById("transcription-area").value = "";
          } else {
            document.getElementById("transcription-area").style.display = "block";
            document.getElementById("speaker-name").style.display = "block";
            //$("#annotation-box").css("height", 32 + "rem");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = segmentSpeaker;
            document.getElementById("transcription-area").value = segmentText;

            //Checking if submitted or not
            /* if (diffCheckSubmit) {
               if (document.getElementById(clickedId).querySelector("p").childNodes.length > 0) {
                 //Storing values from segment
                 var p1_child_text = document.getElementById(clickedId).querySelector("p").childNodes[0].innerHTML;
                 var p2_child_text = document.getElementById(clickedId).querySelector("p").childNodes[1].innerHTML;
                 document.getElementById("transcripted_text_paragraph").style.display = "flex";
                 //Clearing the tag value
                 document.getElementById("transcripted_text_paragraph").innerHTML = "";
                 document.getElementById("transcription-area").style.display = "none";
                 ////console.log(p1_child_text);
                 //Creating child tags to display text
                 document.getElementById("transcripted_text_paragraph").appendChild(document.createElement("p")).innerHTML = p1_child_text;
                 document.getElementById("transcripted_text_paragraph").appendChild(document.createElement("p")).innerHTML = p2_child_text;
                 var p1_child = document.getElementById(`transcripted_text_paragraph`).childNodes[0];
                 p1_child.className = "transcription_area_first_child";
                 var p2_child = document.getElementById(`transcripted_text_paragraph`).childNodes[1];
                 p1_child.style.width = "40%";
 
                 p1_child.style.margin = "10px";
 
                 p2_child.style.width = "40%";
 
                 p2_child.style.margin = "10px";
 
               } else {
                 document.getElementById("transcripted_text_paragraph").style.display = "none";
                 document.getElementById("transcription-area").style.display = "block";
                 //Display Normal Text
                 document.getElementById("transcription-area").value = segmentText;
               }
             }*/
          }
        }
      }
    };

    function changeTopSpeakerDivControlOnClick(event) {
      if (!updateAnnotationOnChange && !updateTopDivSpeaker) {
        getTopClickedId = event.target.id;
        var getTopClickedClass = document.getElementById(getTopClickedId).className.replace(/-/g, " ");

        displayTopDivSpeakersControls(getTopClickedClass);
      }
    }

    //function to display top div speakers on click
    function displayTopDivSpeakersControls(speakerName) {
      if (!updateAnnotationOnChange) {
        $("#annotation-box").hide();
        $("#top-div-speaker-control").show();
        $("#top-div-control-speaker-name").val(speakerName);
      }
    }


    //function for annotation contents change on click    
    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area").on("click", function () {
      updateAnnotationOnClick = true;

    });

    //function to check if top div speaker control is clicked
    $("#top-div-control-speaker-name").on("click", function () {
      updateTopDivSpeakerOnClick = true;
    });

    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area,#top-div-control-speaker-name").on("focusout", function () {
      if (updateAnnotationOnClick) {
        updateAnnotationOnClick = false;

      }
      if (updateTopDivSpeakerOnClick) {
        updateTopDivSpeakerOnClick = false;
      }
    })

    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area").on("change", function () {
      updateSegmentonTimeChange();
    });

    $("#top-div-control-speaker-name").on("change", function () {
      updateTopDivSpeaker = true;
    });



    //function to highlight current region
    function highlightRegion() {
      var highlightId = currentId;
      //////console.log(spectrum.regions.list[highlightId].element);

      Object.keys(spectrum.regions.list).forEach(function (id) {
        var region = spectrum.regions.list[id];
        if (region.id == highlightId) {
          region.element.children[0].style.backgroundColor = "rgba(94, 196, 247,1)";
          region.element.children[1].style.backgroundColor = "rgba(94, 196, 247,1)";
          region.element.style.backgroundColor = "rgba(168,221,227,0.6)";
          if ($("#peaks-container").children().is("#" + highlightId)) {
            //document.getElementById(highlightId).style.opacity = "0.8";
            document.getElementById(highlightId).style.boxShadow = "2px 2px 20px";
            //$("#annotation-box").show();
          }
        } else {
          region.element.children[0].style.backgroundColor = "rgba(0,0,0,0)";
          region.element.children[1].style.backgroundColor = "rgba(0,0,0,0)";
          region.element.style.backgroundColor = "rgba(0,0,0,0)";
          if ($("#peaks-container").children().is("#" + region.id)) {
            //document.getElementById(region.id).style.opacity = "1"
            document.getElementById(region.id).style.boxShadow = "1px 1px 5px";
            //$("#annotation-box").show();
          }

        }
      })
    }//Highlight Region End


    //function to save data to database on saveClick
    function saveClick() {

      if (updateSegments == false) {
        ////console.log("New Save Click");
        segmentStart = spectrum.regions.list[currentId].start;
        segmentEnd = spectrum.regions.list[currentId].end;
        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var val = document.getElementById("annotation-type");
        if (val.value !== "default" && val.value !== "Singing") {
          annotationType = document.getElementById("annotation-type").value;

          speakerName = document.getElementById("annotation-type").value;

          annotationText = val.value;
        } else {
          annotationType = document.getElementById("annotation-type").value;
          speakerName = document.getElementById("speaker-name").value;
          if (val.value == "Singing" && $("#transcription-area").val().trim() !== "") {
            annotationText = $("#transcription-area").val();
          } else if (val.value == "default") {
            annotationText = $("#transcription-area").val();
          } else if (val.value == "Singing" && $("#transcription-area").val().trim() == "") {
            annotationText = "Singing";
          }
        }

        //ajax Request to Create    
        var params = {
          speakerName,
          annotationType,
          segmentStart,
          segmentEnd,
          annotationText,
          user_id,
          audio_id: audio_id
        }
        ////console.log(checkOverlappingDiv(speakerName, segmentStart, segmentEnd));
        if (speakerName.length > 0 && hundredMillisecSegmentCheck && !segmentEndingTimeMoreThanStartingTime && spellCheckSpeakerName(speakerName) && (!checkOverlappingDiv(speakerName, segmentStart, segmentEnd))) {
          if (spellCheckSpeakerName(speakerName)) {
            //Var to store id from database
            var segmentIdFromDatabase = 0;

            $.ajax({
              method: "POST",
              url: "/database",
              data: params,
              async: false,
              success: function (response) {
                ////console.log("Success");
                segmentIdFromDatabase = response.insertId;
                ////console.log(segmentIdFromDatabase);
                $(`region[data-id=${currentId}]`).attr("data-id", segmentIdFromDatabase);
                spectrum.regions.list[currentId].id = segmentIdFromDatabase;
                spectrum.regions.list[segmentIdFromDatabase] = spectrum.regions.list[currentId];
                delete spectrum.regions.list[currentId];
                if (!updateAnnotationOnChange) {//Only if new segment is created
                  window.currentId = segmentIdFromDatabase;
                  window.segment_id = segmentIdFromDatabase;
                }
              }
            })
            //Create Div 
            createDiv(segmentIdFromDatabase, speakerName, annotationType, segmentStart, segmentEnd, annotationText);

            updateAnnotationOnChange = false;
            updateAnnotationOnClick = false;
            ////console.log(reqSpeakers);
            var append = false;
            if (!reqSpeakers.includes(speakerName) && speakerName.includes("speaker")) {
              //adding to select options
              append = true;
            }
            if (append) {
              $("#select-options").append(`<option value="${speakerName}"/>`);
              reqSpeakers.push(speakerName);
            }

            //Hiding Annotation Div      
            $("#annotation-box").hide();

            //setting update segments bool to true to allow updating
            updateSegments = true;
          } else {
            emptySpeaker();
          }
        } else {
          if (speakerName.length == 0 || !spellCheckSpeakerName(speakerName)) {
            ////console.log("Empty Speaker Name")
            emptySpeaker();
          } else if (!hundredMillisecSegmentCheck) {
            ////console.log("Less Than Hundred Milliseconds");
            hundredMillisecondsSegmentGap();
          } else if (segmentEndingTimeMoreThanStartingTime) {
            ////console.log("End Time More Than Start Time");
            endTimeMoreThanStartTime();
          } else if ((checkOverlappingDiv(speakerName, segmentStart, segmentEnd))) {
            ////console.log("New Div for Overlapping");
            sameSpeakerOverlappingDialougeBox();
          }
        }
      } else if (updateAnnotationOnChange == true) {
        var params;
        ////console.log("Old" + currentId);
        //Updating Database        
        var segmentId = currentId;
        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var segmentclass = document.getElementById("speaker-name").value;
        ////console.log(segmentclass.replace(" ", "-"));
        var val = document.getElementById("annotation-type");
        if (val.value !== "default" && val.value !== "Singing") {
          document.getElementById(segmentId).style.top = "0px";
          annotationType = document.getElementById("annotation-type").value;
          document.getElementById(segmentId).title = annotationType;
          speakerName = document.getElementById("annotation-type").value;
          document.getElementById(segmentId).className = speakerName;
          annotationText = val.value;
          document.getElementById(segmentId).querySelector("p").innerText = annotationText;
        } else if (segmentclass.length >= 1 /*&& segmentclass.split(" ").length <= 2*/ && spellCheckSpeakerName(segmentclass)) {
          //checking if speaker is already Available          
          if ($("#annotation-div").children().hasClass(segmentclass.replace(/ /g, "-"))) {
            $("#annotation-div").children().each(function (index, value) {
              if (value.className == (segmentclass.replace(/ /g, "-"))) {
                ////console.log("old")
                ////console.log(value);
                speakerName = document.getElementById("speaker-name").value;
                ////console.log("2" + checkOverlappingDiv(speakerName, segmentStart, segmentEnd))
                if (!checkOverlappingDiv(speakerName, newStartTime, newEndTime)) {
                  annotationType = document.getElementById("annotation-type").value;
                  document.getElementById(segmentId).title = annotationType;

                  document.getElementById(segmentId).className = speakerName.replace(/ /g, "-");
                  if (val.value == "Singing" && $("#transcription-area").val().trim() !== "") {
                    annotationText = $("#transcription-area").val();
                  } else if (val.value == "default") {
                    annotationText = $("#transcription-area").val();
                  } else if (val.value == "Singing" && $("#transcription-area").val().trim() == "") {
                    annotationText = "Singing";
                  }
                  // annotationText = $("#transcription-area").val();
                  document.getElementById(segmentId).querySelector("p").innerText = annotationText;
                  document.getElementById(segmentId).style.background = value.style.backgroundColor;
                  //400=leftMargin
                  ////console.log(((canvasHeight - 8) + leftSpeakerCategoryDivMargin * (index)) + "px");
                  // div.style.bottom = (leftMargin + leftSpeakerCategoryDivMargin * (index)) + "px";
                  document.getElementById(segmentId).style.bottom = ((canvasHeight - 8) + leftSpeakerCategoryDivMargin * (index)) + "px";
                  document.getElementById(segmentId).style.top = "inherit";
                }
              }
            });
          } else {
            ////console.log("new");

            //Changing segmentId to currentId
            var newColor = getRandomColor();
            annotationType = document.getElementById("annotation-type").value;
            document.getElementById(currentId).title = annotationType;
            speakerName = document.getElementById("speaker-name").value;
            document.getElementById(currentId).className = speakerName.replace(/ /g, "-");
            if (val.value == "Singing" && $("#transcription-area").val().trim() !== "") {
              annotationText = $("#transcription-area").val();
            } else if (val.value == "default") {
              annotationText = $("#transcription-area").val();
            } else if (val.value == "Singing" && $("#transcription-area").val().trim() == "") {
              annotationText = "Singing";
            }
            //annotationText = $("#transcription-area").val();
            document.getElementById(currentId).querySelector("p").innerText = annotationText;
            document.getElementById(currentId).style.background = newColor;
            //400=leftMargin
            document.getElementById(currentId).style.bottom = ((canvasHeight - 8) + leftSpeakerCategoryDivMargin * (($("#annotation-div").children("div").length))) + "px";
            topSpeakerDiv(speakerName, newColor);
          }
        } else if (segmentclass.length == 0 || segmentclass.split(" ").length > 2 || spellCheckSpeakerName(segmentclass)) {
          ////console.log("Speaker Name not found");
          ////console.log(speakerName);
          emptySpeaker();
        }

        //Checking correct speaker name
        spellCheckSpeakerName(speakerName);

        //ajax Request To Update
        if (updateAnnotationOnChange) {
          params = {
            segmentId,
            speakerName,
            annotationType,
            segmentStart: newStartTime,
            segmentEnd: newEndTime,
            annotationText,
            user_id,
            audio_id: audio_id
          }
        } else {
          params = {
            segmentId,
            speakerName,
            annotationType,
            segmentStart,
            segmentEnd,
            annotationText,
            user_id,
            audio_id: audio_id
          }
        }


        ////console.log("20");
        ////console.log(checkOverlappingDiv(speakerName, newStartTime, newEndTime));
        if (speakerName.length > 0 && hundredMillisecSegmentCheck && !segmentEndingTimeMoreThanStartingTime && spellCheckSpeakerName(speakerName) && !checkOverlappingDiv(speakerName, newStartTime, newEndTime)) {
          ////console.log("Update vairako");
          $.ajax({
            method: "POST",
            url: "/update-transcription-table",
            data: params,
            success: function () {
              ////console.log("Updated");

            }
          })
          //Hiding Annotation Div      
          $("#annotation-box").hide();
          updateAnnotationOnChange = false;
          updateAnnotationOnClick = false;

        } else {
          ////console.log(speakerName);
          ////console.log("annotation ma ya aako ho?");
          if (speakerName.length < 0 || !spellCheckSpeakerName(speakerName)) {
            emptySpeaker();
          } else if (!hundredMillisecSegmentCheck) {
            ////console.log("Less Than Hundred Milliseconds");
            hundredMillisecondsSegmentGap();
          } else if (segmentEndingTimeMoreThanStartingTime) {
            ////console.log("End Time More Than Start Time");
            endTimeMoreThanStartTime();
          } else if (checkOverlappingDiv(speakerName, newStartTime, newEndTime)) {
            ////console.log("Overlapping Speakser");
            sameSpeakerOverlappingDialougeBox();
          }
        }
      }
    }

    //function for ctrl+singlequote for region end time
    function ctrlquote(currentregionId) {
      $("html").on("keydown", function (event) {
        if (event.ctrlKey && event.which == 222) {
          event.preventDefault();
          var currentTime = spectrum.getCurrentTime();
          updateAnnotationOnChange = true;
          updateAnnotationOnClick = true;
          //segment end variables
          var endMinute = secondsToMinutes(currentTime);
          var endSeconds = secondsToSeconds(currentTime);
          var endMilliseconds = secondsToMilliseconds(currentTime);

          //displaying texts          
          $("#annotation-end-minute").val(endMinute);
          $("#annotation-end-seconds").val(endSeconds);
          $("#annotation-end-milliseconds").val(endMilliseconds);


          var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + ($("#annotation-start-milliseconds").val());
          var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + ($("#annotation-end-milliseconds").val());

          createSegments(currentId, starting, ending);
        }
      });
    }

    //function for ctrl+singlequote for region start time
    function ctrlcolon(currentregionId) {
      $("html").on("keydown", function (event) {
        if (event.ctrlKey && event.which == 186) {
          event.preventDefault();
          ////console.log("Pressed");
          var currentTime = spectrum.getCurrentTime();
          updateAnnotationOnChange = true;
          updateAnnotationOnClick = true;
          //segment end variables
          //segment start variables
          var startMinute = secondsToMinutes(currentTime);
          var startSeconds = secondsToSeconds(currentTime);
          var startMilliseconds = secondsToMilliseconds(currentTime);


          //displaying texts          
          $("#annotation-start-minute").val(startMinute);
          $("#annotation-start-seconds").val(startSeconds);
          $("#annotation-start-milliseconds").val(startMilliseconds);

          var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + ($("#annotation-start-milliseconds").val());
          var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + ($("#annotation-end-milliseconds").val());

          //Create Segments function call
          createSegments(currentId, starting, ending);
        }
      });
    }

    //Add New Region
    function addRegion() {
      //show annotation box
      if (!updateTopDivSpeaker) {
        $("#top-div-speaker-control").hide();
        $("#annotation-box").show();
      }

      /*
        Boolean to whether create new segment or delete previous new region and create new segment again
        Two New Segments Cannot Be Created
      */
      if (addRegionBool == true) {
        if (!updateAnnotationOnChange && !updateTopDivSpeaker) {

          renew();//Renew Annotation Box
          updateSegments = false;
          addRegionBool = false;
          segmentEnd = spectrum.getCurrentTime();
          if ((spectrum.getCurrentTime() - 2) < 0) {
            segmentStart = 0;
          } else {
            segmentStart = segmentEnd - 2;
          }

          spectrum.addRegion({
            id: segmentId,
            start: segmentStart,
            end: segmentEnd,
            drag: false,
            color: "rgba(0,0,0,0)"
          })
          currentId = segmentId;
          //highlighting current Region
          highlightRegion();

          //segment start variables
          var startMinute = secondsToMinutes(spectrum.regions.list[currentId].start);
          var startSeconds = secondsToSeconds(spectrum.regions.list[currentId].start);
          var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].start);

          //segment end variables
          var endMinute = secondsToMinutes(spectrum.regions.list[currentId].end);
          var endSeconds = secondsToSeconds(spectrum.regions.list[currentId].end);
          var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].end);

          //displaying texts   
          $("#annotation-start-minute").val(startMinute);
          $("#annotation-start-seconds").val(startSeconds);
          $("#annotation-start-milliseconds").val(startMilliseconds);
          $("#annotation-end-minute").val(endMinute);
          $("#annotation-end-seconds").val(endSeconds);
          $("#annotation-end-milliseconds").val(endMilliseconds);
        }
      } else {
        if (!updateAnnotationOnChange && !updateTopDivSpeaker) {
          spectrum.regions.list[segmentId].remove();
          updateSegments = true;
          addRegionBool = true;
          addRegion();
        }
      }

      spectrum.on("seek", function () {
        if (!updateTopDivSpeakerOnClick && !updateTopDivSpeaker && !updateAnnotationOnChange && !updateAnnotationOnClick && spectrum.regions.list[segmentId] != null) {
          spectrum.regions.list[segmentId].remove();
          updateSegments = true;
          addRegionBool = true;
        }
      })
    }//function addRegion end

    
    //function to renew annotation
    function renew() {
      $("#annotation-type").val("default");
      $("#speaker-name").val("");
      $("#transcription-area").val("");
      document.getElementById("transcription-area").style.display = "block";
      document.getElementById("speaker-name").style.display = "block";
    }//renew function end


    //Repeat a region on repeat icon click
    $("#repeat-button").on("click", function () {
      repeatRegion();
    });

    //function for playback 
    $("#play_back_rate").on("click", function () {
      var rate = document.getElementById("play_back_rate").value.split("x");
      playBackRate(parseFloat(rate));
    })

    //function for playBackRate
    function playBackRate(rate) {
      spectrum.setPlaybackRate(rate);
    }//function for playBackRate End

    //function for split
    function splitRegion(textBeforeCursor = "", textAfterCursor = "") {
      var spectrumCurrentTime = spectrum.getCurrentTime();
      var regionStartTime = spectrum.regions.list[currentId].start;
      var regionEndTime = spectrum.regions.list[currentId].end;
      var prevDivTitle = document.getElementById(currentId).title;
      var prevDivClassName = document.getElementById(currentId).className.replace(/-/g, " ");
      var segmentText = document.getElementById(currentId).innerText;
      var preDivColor = document.getElementById(currentId).style.background;

      //updating Previous Region on split
      if (spectrum.regions.list[currentId] != null) {
        spectrum.regions.list[currentId].update({
          start: regionStartTime,
          end: spectrumCurrentTime - 0.01
        });
      }

      //updating previous div on Split     
      var progress2 = ((spectrumCurrentTime - 0.10) - regionStartTime) / spectrum.getDuration();
      var minPxDelta = 1 / spectrum.params.pixelRatio;
      var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;
      if ($("#peaks-container").children().is("#" + currentId)) {
        document.getElementById(currentId).style.width = pos1 + "px";
      }

      //creating new Segment on Split 
      spectrum.addRegion({
        id: segmentId++,
        start: spectrumCurrentTime + 0.010,
        end: regionEndTime,
        drag: false,
        color: "rgba(0,0,0,0)"
      })

      //previous Div text 
      document.getElementById(currentId).querySelector("p").innerText = textBeforeCursor;

      //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
      createDiv(segmentId - 1, prevDivClassName, prevDivTitle, spectrumCurrentTime, regionEndTime, textAfterCursor);

      //ajax Request to Update Previous Division 
      var updateParams = {
        segmentId: currentId,
        speakerName: prevDivClassName,
        annotationType: prevDivTitle,
        segmentStart: regionStartTime,
        segmentEnd: spectrumCurrentTime - 0.010,
        annotationText: textBeforeCursor,
        user_id,
        audio_id: audio_id
      }

      $.ajax({
        method: "POST",
        url: "/update-on-split",
        data: updateParams,
        success: function () {
          ////console.log("Updated");
        }
      })

      //ajax Request to Create new row for splitted Div 
      var params = {
        speakerName: prevDivClassName,
        annotationType: prevDivTitle,
        segmentStart: spectrumCurrentTime + 0.010,
        segmentEnd: regionEndTime,
        annotationText: textAfterCursor,
        user_id,
        audio_id: audio_id
      }

      $.ajax({
        method: "POST",
        url: "/database",
        data: params,
        success: function () {
          ////console.log("Success");
        }
      })
    }//split Region Function end

    $("#annotation-split").on("click", function () {
      //Split test
      var firstLength = ($("#transcription-area").prop("selectionStart"));//Cursor Position in transcription-area
      var reqText = $("#transcription-area").val();
      var textBeforeCursor = reqText.substring(0, firstLength);
      var textAfterCursor = reqText.substring(firstLength, reqText.length);
      ////console.log(reqText.substring(0, firstLength));
      ////console.log(reqText.substring(firstLength, reqText.length));
      if(spectrum.regions.getCurrentRegion()){
        splitRegion(textBeforeCursor, textAfterCursor);
        updateAnnotationOnChange = false;
        updateAnnotationOnClick = false;
      }
    })

    //function for confirming changes on close click
    function confirmChanges() {
      //if changes were made in annotation box
      if (updateAnnotationOnChange) {
        //console.log("Update Annotation Cancel");
        //Hiding Annotation Div      
        $("#annotation-box").hide();
        updateAnnotationOnChange = false;
        if ($("#peaks-container").children().is("#" + currentId)) {
          spectrum.regions.list[currentId].update({
            start: currentStartTime,
            end: currentEndTime
          });

          //segment start variables
          var startMinute = secondsToMinutes(spectrum.regions.list[currentId].start);
          var startSeconds = secondsToSeconds(spectrum.regions.list[currentId].start);
          var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].start);

          //segment end variables
          var endMinute = secondsToMinutes(spectrum.regions.list[currentId].end);
          var endSeconds = secondsToSeconds(spectrum.regions.list[currentId].end);
          var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].end);

          //displaying texts   
          $("#annotation-start-minute").val(startMinute);
          $("#annotation-start-seconds").val(startSeconds);
          $("#annotation-start-milliseconds").val(startMilliseconds);
          $("#annotation-end-minute").val(endMinute);
          $("#annotation-end-seconds").val(endSeconds);
          $("#annotation-end-milliseconds").val(endMilliseconds);

          var progress1 = currentStartTime / spectrum.getDuration();
          var progress2 = (currentEndTime - currentStartTime) / spectrum.getDuration();
          var minPxDelta = 1 / spectrum.params.pixelRatio;
          var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
          var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;

          document.getElementById(currentId).style.left = pos + "px";
          document.getElementById(currentId).style.width = pos1 + "px";

        } else {
          if (spectrum.regions.list[currentId]) {
            spectrum.regions.list[currentId].remove();
            //updateAnnotationOnChange = false;
          }
        }
      } else if (updateTopDivSpeaker) {
        //Hiding Annotation Div    
        //console.log("Update Top Div Cancel");
        $("#top-div-speaker-control").hide();
        updateTopDivSpeaker = false;
      }

    }

    //Function to create a cancel confirm Dialogue Box
    function confirmDialogue() {
      $("#confirmation-box").show();
      $("body").not("#confirmation-box").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for confirm click 
    $(".confirm-changes").on("click", function () {
      confirmChanges();
      addRegionBool = true;
      confirmChangesboxBool = false;
      $("#confirmation-box").hide();
      $("body").css({
        backgroundColor: "#fff",
        opacity: "1"
      })
    });

    //function to deny changes on close click
    $(".discard-changes").on("click", function () {
      //updateAnnotationOnChange = true;
      confirmChangesboxBool = false;
      $("#confirmation-box").hide();
      $("#empty-speaker").hide();
      $("#hundredMilliseconds-gap").hide();
      $("#endTime-moreThanStartTime").hide();
      $("#sameSpeaker-Overlapping").hide();
      $("#top-speaker-remove-dialouge-box").hide();
      $("body").css({
        backgroundColor: "#fff",
        opacity: "1"
      })
    });

    //function for guidelines Box
    $("#help-icon").on("click", function () {
      displayGuideLines();
    });

    $("#close-guidelines").on("click", function () {
      $("#guidelines-box").hide();
      $("body").css({
        backgroundColor: "#fff",
        opacity: "1"
      })
    })

    //Displaying guidelines 
    function displayGuideLines() {
      $("#guidelines-box").show();
      $("body").not("#guidelines-box").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      });
    }

    //Function for empty speaker Dialogue Box
    function emptySpeaker() {
      $("#empty-speaker").show();
      $("body").not("#empty-speaker").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for hundredMillisecondsSegmentCheck
    function hundredMillisecondsSegmentGap() {
      $("#hundredMilliseconds-gap").show();
      $("body").not("#hundredMilliseconds-gap").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for Segment End Time More than Start Time
    function endTimeMoreThanStartTime() {
      $("#endTime-moreThanStartTime").show();
      $("body").not("#endTime-moreThanStartTime").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for same Overlapping Speaker Dialogue Box
    function sameSpeakerOverlappingDialougeBox() {
      $("#sameSpeaker-Overlapping").show();
      $("body").not("#sameSpeaker-Overlapping").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    };

    //function for top speaker div remove dialouge box
    function topSpeakerRemoveDialougeBox() {
      $("#top-speaker-remove-dialouge-box").show();
      $("body").not("#top-speaker-remove-dialouge-box").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function to check and create segments
    function createSegments(currentId, starting, ending) {
      if (spectrum.regions.list[currentId] != null) {
        ////console.log("Id" + currentId);
        if ((parseFloat(ending) - parseFloat(starting)) < 0.100 && (parseFloat(ending) - parseFloat(starting)) >= 0) {
          spectrum.regions.list[currentId].update({
            start: starting,
            end: parseFloat(ending) + 0.01
          });
          hundredMillisecSegmentCheck = false;
          segmentEndingTimeMoreThanStartingTime = false;
        } else if ((parseFloat(ending) - parseFloat(starting)) < 0) {
          spectrum.regions.list[currentId].update({
            end: starting,
            start: ending
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = true;
        } else {
          spectrum.regions.list[currentId].update({
            start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + $("#annotation-start-milliseconds").val(),
            end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + $("#annotation-end-milliseconds").val()
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = false;
        }
      }

      //highlight clicked region
      highlightRegion();

      newStartTime = spectrum.regions.list[currentId].start;
      newEndTime = spectrum.regions.list[currentId].end;
      ////console.log(newStartTime);
      var progress1 = newStartTime / spectrum.getDuration();
      var progress2 = (newEndTime - newStartTime) / spectrum.getDuration();
      var minPxDelta = 1 / spectrum.params.pixelRatio;
      var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
      var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;
      if ($("#peaks-container").children().is("#" + currentId)) {
        document.getElementById(currentId).style.left = pos + "px";
        document.getElementById(currentId).style.width = pos1 + "px";
      }
    }

    //Function to Check correct speakername
    function spellCheckSpeakerName(speakerName) {
      ////console.log(speakerName); --} }
      var splitSpeakerName = speakerName.split(" ");
      ////console.log(splitSpeakerName); --} }
      if (splitSpeakerName[0] != "speaker") {
        if (splitSpeakerName[0] == "DTMF" || splitSpeakerName[0] == "Applause" || splitSpeakerName[0] == "Laughter" || splitSpeakerName[0] == "Music" || splitSpeakerName[0] == "Noise" || splitSpeakerName[0] == "Ringtone" || (splitSpeakerName[0] == "unidentifiable" && splitSpeakerName[1] == "speaker")) {
          return true;
        } else if (splitSpeakerName[0] == "pre" && splitSpeakerName[1] == "recorded" && splitSpeakerName[2] == "speaker") {
          //Insert More Code Below if pre recorded speaker name is needed too!
          if (splitSpeakerName.length != 4) {
            ////console.log("HERE") --} }
            return false;
          }
          if (isNaN(splitSpeakerName[3])) {
            ////console.log("HERE") --} }
            return false;
          }
          return true;
        }
        ////console.log("HERE") --} }
        return false;
      }
      if (isNaN(splitSpeakerName[1])) {
        if (splitSpeakerName.length == 2 || splitSpeakerName.length == 3) {
          if (splitSpeakerName.length == 3) {
            if (!isCamelCase(splitSpeakerName[2])) {
              return false;
            }
          }
          if (!isCamelCase(splitSpeakerName[1])) {
            return false;
          }
        }
        else {
          return false;
        }
      } else {
        if (splitSpeakerName.length != 2) {
          return false;
        }
        if (isNaN(splitSpeakerName[1])) {
          return false;
        }
      }
      return true;
    };//Spell Check Speaker Name function end

    function isCamelCase(str) {
      var regexp = /^[A-Z][a-z]*$/;
      return regexp.test(str)
    }

    //function to check same overlapping div
    function checkOverlappingDiv(speakerName, segmentStart, segmentEnd) {
      console.trace(1);
      var overlapping = false;
      var sameSpeakerParams = {
        user_id,
        speakerName
      }

      var totalRegions = Object.keys(spectrum.regions.list);
      Object.keys(spectrum.regions.list).forEach(function (region) {
        var previousSpeakerStart = spectrum.regions.list[region].start;
        var previousSpeakerEnd = spectrum.regions.list[region].end;

        if ((segmentStart > previousSpeakerStart && segmentStart < previousSpeakerEnd) ||
          (segmentEnd > previousSpeakerStart && segmentEnd < previousSpeakerEnd) || (previousSpeakerStart > segmentStart && previousSpeakerStart < segmentEnd)) {
          ////console.log("herer1")
          var previousSpeakerName = document.getElementById(region).className;
          if (speakerName != "DTMF" && speakerName != "Applause" && speakerName != "Laughter" && speakerName != "Music" && speakerName != "Noise" && speakerName != "Ringtone") {
            if (previousSpeakerName == speakerName.replace(/ /g, "-")) {
              ////console.log("herer2")
              overlapping = true;
            }
          }
        }
      });
      return overlapping;
    }//Check OverLapping Div function End

    //function for promises and ajax request on submit
    function ajaxReq() {
      ////console.log("Hawa ");
      if (Object.keys(spectrum.regions.list).length == 0) {
        overallScore = 100;
      } else {
        var promise = new Promise((resolve, reject) => {
          $.ajax({
            method: "POST",
            data: { audio_id: audio_id },
            url: "/get-reviews",
            async: false,
            success: function (actualResponse) {
              $.ajax({
                method: "POST",
                url: "/get-segments",
                data: {
                  user_id: user_id,
                  audio_id: audio_id
                },

                async: false,
                success: function (postResponse) {
                  actualResponseLength = actualResponse.length;

                  for (var i = 0; i < actualResponseLength; i++) {
                    var minStartValue = 0;
                    var minEndValue = 0;
                    var minDifference = 5;
                    var nearestStartSegment = 20;
                    var nearestStartSegment = 20;
                    var {
                      segment_id: actualsegmentId,
                      div_className: actualspeakerName,
                      div_title: actualannotationType,
                      segment_start: actualsegmentStart,
                      segment_end: actualsegmentEnd,
                      annotation_text: actualannotationText
                    } = actualResponse[i];
                    ////console.log(actualsegmentId + " " + i);
                    var color = "";
                    for (var j = 0; j < postResponse.length; j++) {
                      var {
                        segment_id: postssegmentId,
                        div_className: postsspeakerName,
                        div_title: postsannotationType,
                        segment_start: postssegmentStart,
                        segment_end: postssegmentEnd,
                        annotation_text: postsannotationText
                      } = postResponse[j];
                      //   var postssegmentId = postResponse[j]["segment_id"];
                      //   var postsspeakerName = postResponse[j]["div_className"];
                      //   var postsannotationType = postResponse[j]["div_title"];
                      //   var postssegmentStart = postResponse[j]["segment_start"];
                      //   var postssegmentEnd = postResponse[j]["segment_end"];
                      //   var postsannotationText = postResponse[j]["annotation_text"];
                      if (
                        Math.abs(actualsegmentStart - postssegmentStart) <
                        minDifference
                      ) {
                        minDifference = Math.abs(
                          actualsegmentStart - postssegmentStart
                        );
                        nearestStartSegment = Math.abs(
                          actualsegmentStart - postssegmentStart
                        );
                        nearestEndSegment = Math.abs(
                          actualsegmentStart - postssegmentStart
                        );
                        minStartValue = postssegmentStart;
                        minEndValue = postssegmentEnd;
                      }
                      if (
                        parseFloat(actualsegmentStart) -
                        parseFloat(postssegmentStart) <=
                        0.003 &&
                        parseFloat(actualsegmentStart) -
                        parseFloat(postssegmentStart) >=
                        0 &&
                        parseFloat(actualsegmentEnd) -
                        parseFloat(postssegmentEnd) <=
                        0.003 &&
                        parseFloat(actualsegmentEnd) -
                        parseFloat(postssegmentEnd) >=
                        0 &&
                        actualspeakerName == postsspeakerName &&
                        actualannotationType == "default"
                      ) {
                        //Correct Segment Created
                        correctSegmentCreated = true;
                        ////console.log("c" + parseFloat(actualsegmentStart));
                        ////console.log(actualspeakerName);
                        ////console.log(postsspeakerName);
                        break;
                      } else if (
                        parseFloat(actualsegmentStart) -
                        parseFloat(postssegmentStart) <=
                        0.005 &&
                        parseFloat(actualsegmentStart) -
                        parseFloat(postssegmentStart) >=
                        0 &&
                        parseFloat(actualsegmentEnd) -
                        parseFloat(postssegmentEnd) <=
                        0.005 &&
                        parseFloat(actualsegmentEnd) - parseFloat(minEndValue) >=
                        0 &&
                        actualspeakerName == postsspeakerName &&
                        actualannotationType != "default"
                      ) {
                        //Correct Segment Created
                        ////console.log(actualspeakerName);
                        ////console.log("c" + parseFloat(actualsegmentStart));
                        ////console.log(postsspeakerName);
                        correctSegmentCreated = true;
                        break;
                      } else {
                        if (
                          parseFloat(actualsegmentStart) -
                          parseFloat(postssegmentStart) <=
                          0.005 &&
                          parseFloat(actualsegmentStart) -
                          parseFloat(postssegmentStart) >=
                          0 &&
                          parseFloat(actualsegmentEnd) -
                          parseFloat(postssegmentEnd) <=
                          0.005 &&
                          parseFloat(actualsegmentEnd) -
                          parseFloat(postssegmentEnd) >=
                          0 &&
                          actualspeakerName != postsspeakerName &&
                          actualannotationType != "default"
                        ) {
                          overallScore += 1;
                          wrongAnnotationScore += 1;
                          ////console.log(                            "score Incorrect Annotation " + wrongAnnotationScore                          );
                          ////console.log(postsspeakerName);
                          ////console.log(actualspeakerName);
                        }
                        if (
                          parseFloat(actualsegmentStart) -
                          parseFloat(postssegmentStart) <=
                          0.005 &&
                          parseFloat(actualsegmentStart) -
                          parseFloat(postssegmentStart) >=
                          0 &&
                          parseFloat(actualsegmentEnd) -
                          parseFloat(postssegmentEnd) <=
                          0.005 &&
                          parseFloat(actualsegmentEnd) -
                          parseFloat(postssegmentEnd) >=
                          0 &&
                          actualspeakerName != postsspeakerName &&
                          actualannotationType == "default"
                        ) {
                          overallScore += 1;
                          wrongSpeakerScore += 1;
                          ////console.log(                            "score Speaker Incorrect " + wrongSpeakerScore
                          //);
                          ////console.log(postsspeakerName);
                          ////console.log(actualspeakerName);
                        }
                        //Incorrect Segement created
                        correctSegmentCreated = false;
                      }
                    }
                    ////console.log(correctSegmentCreated);
                    //creating Segments
                    spectrum.addRegion({
                      id: actualsegmentId + 100000,
                      start: actualsegmentStart,
                      end: actualsegmentEnd,
                      drag: false,
                      color: "rgba(0,0,0,0)"
                    });
                    //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText)
                    createDiv(
                      actualsegmentId + 100000,
                      actualspeakerName,
                      actualannotationType,
                      actualsegmentStart,
                      actualsegmentEnd,
                      "",
                      true
                    );
                  }
                  unnecessarySegmentsErrors +=
                    Math.abs(actualResponseLength - postsResponseLength) * 2;
                  overallScore = overallScore + unnecessarySegmentsErrors;
                  ////console.log("Total Score " + (100 - overallScore));
                  //Checking Pass or Fail
                  if (100 - overallScore > 60) {
                    passOrFail = "PASS";
                  } else {
                    passOrFail = "FAIL";
                  }
                  //Disallowing Clicking and Changing Values if the Submit request was successful
                  ////console.log("Submit Clicked");
                  disableAllInterfaceOnSubmit();
                  resolve();
                }
              });
            }
          });
        });
      }
    }//ajaxReq function end

    //Function to Display Errors and hamburger icons
    function displayHamburger() {
      $("#errorToggle").show();

      $("#total-errors").text(`Your Overall Score: ${scoreInPercentage}%`);
    }//display Hamburger End

    //function to display Errors Menu
    $("#displayErrorCB").on("click", function () {
      var isChecked = $("#displayErrorCB").is(":checked");
      ////console.log($("#displayErrorCB").is(":checked"));
      if (!$("#displayErrorCB").is(":checked")) {
        $("#errorMenu").not(".showHamburger").show();
        $(".showHamburger").hide();
        $("#closeHamburger").show();
      } else {
        $("#errorMenu").hide();
        $(".showHamburger").show();
        $("#closeHamburger").hide();
      }
    });//Display Error Menu Close



    //Function to call on submit click
    $("#submit-button").on("click", function () {
      /*
      
      
      disableAllInterfaceOnSubmit();
      //submitClick();      
      //ajaxReq();
      displayHamburger();

      $("#submit-button").hide();
      $("#profile-link-button").show();
      */
      disableAllInterfaceOnSubmit();
      diffCheck();
      saveScores();
      $("#profile-link-button").show();
      getWebAppId();
      logEvent("Audio Test Submitted - Trans", {
        type: "Single Audio"
      })
    });//Submit Button Click Function End

    function getWebAppId() {
      $.ajax({
        method: "POST",
        url: "/get-web-app-id",
        data: {
          user_id: user_id
        },
        success: function (data) {
          var webapp_id = data[0].web_app_id;
          $.ajax({
            method: "POST",
            url: "/get-language-id",
            data: {
              audio_id
            },
            success: function (data1) {
              var language_id = data1[0].Language_id;
              var mailParams = {
                "user_id": `${webapp_id}`,
                "status": "3",
                "project_type_id": "2",
                "language_id": `${language_id}`
              }
              //console.log(mailParams);
              $.ajax({
                method: "POST",
                url: "{{ webapp_basepath }}/api/set-user-language-project-type-status",
                data: mailParams,
                success: function () {
                  console.log("Web app status set");
                }
              });
            }
          })


        }
      });
    }

    //function for diffCheck 
    function diffCheck() {
      var replaced_actual_text, replaced_annotation_text = "";
      params = {
        user_id,
        audio_id: audio_id
      }
      $.ajax({
        method: "POST",
        url: "/route-for-diff-check",
        data: params,
        async: false,
        success: function (response) {
          diffCheckSubmit = true;
          //console.log("Diff Checker Success");

          for (var i = 0; i < response.length; i++) {
            if (response[i]["difference"] != null) {
              var transcription_id = response[i]["segment_id"];
              var differences = response[i]["difference"];
              var regexToReplace = /[\s_.,!"'&?/$]*/g;
              ////console.log(response[i]);
              ////console.log(differences);
              var actual_text = "", annotation_text = "";
              differences.forEach(difference => {
                if (difference.removed) {
                  replaced_annotation_text = difference.value.replace(regexToReplace, " . ").split(" ");
                  annotation_text += `<span style="background-color:#FF8983">` + difference.value + `</span>`;
                  totalWordCount += replaced_annotation_text.length;
                } else if (difference.added) {
                  actual_text += `<span style="background-color:#6BDFB8">` + difference.value + `</span>`
                  replaced_actual_text = difference.value.replace(regexToReplace, " .").split(" ");

                } else {
                  actual_text += difference.value + "";
                  annotation_text += difference.value + "";
                  replaced_annotation_text = difference.value.replace(regexToReplace, " .").split(" ");
                  replaced_actual_text = difference.value.replace(regexToReplace, " .").split(" ");
                  rightWordsScore += replaced_annotation_text.length;
                  ////console.log(replaced_annotation_text); --} }

                  totalWordCount += replaced_actual_text.length;
                }
              })

              ////console.log(document.getElementById(`${transcription_id}`).innerHTML);
              //document.getElementById(`${transcription_id}`).querySelector("p").innerText = "";
              //document.getElementById(`${transcription_id}`).querySelector("p").appendChild(document.createElement("p")).innerHTML = actual_text;
              //document.getElementById(`${transcription_id}`).querySelector("p").appendChild(document.createElement("p")).innerHTML = annotation_text;
              //var p1_child = document.getElementById(`${transcription_id}`).querySelector("p").childNodes[0];

              //var p2_child = document.getElementById(`${transcription_id}`).querySelector("p").childNodes[1];
              //p1_child.style.width = "40%";
              //p1_child.style.height = "150px";
              //p1_child.style.margin = "10px";
              //p1_child.style.border = "1px solid black";
              //p2_child.style.width = "40%";
              //p2_child.style.height = "150px";
              //p2_child.style.margin = "10px";
              //p2_child.style.border = "1px solid black";

            }

          }
          scoreInPercentage = Math.round((rightWordsScore / totalWordCount) * 100);
          ////console.log(totalWordCount);
          ////console.log(wrongWordsScore);
        }
      })
    };
    //Diff Check Function end

    //Function to store scores in database Users Table
    function saveScores() {
      ////console.log(overallScore);
      var todayDate = new Date();
      ////console.log(rightWordsScore); --} }

      ////console.log(scoreInPercentage); --} }
      params = {
        user_id,
        audio_id: audio_id,
        total_score: scoreInPercentage,
        is_submitted: "TRUE"
      }
      $.ajax({
        method: "POST",
        url: "/save-test-score-on-users_audio_table-for-transcription",
        data: params,
        success: function () {
          ////console.log("Success");
        }
      })
    };//Save Scores Function End


    //clicking in profile link button
    $("#profile-link-button").on("click", () => {
      if(VENDOR_WEBSITE){
        //Vendor Website 
        window.location.href = "{{ VENDOR_WEBSITE_URL }}/sample#transcription";
      }else{
        window.location.href = "{{ webapp_basepath }}/test/transcription";
      }
      
      //window.location.href = "http://localhost:5000/sample#transcription";
      //localStorage.setItem("goToTab","#transcription");
    });//Profile Link Button function End

    //function to display current div content in annotation box
    function displayCurrentContents() {
      if (spectrum.regions.getCurrentRegion() != null && !updateAnnotationOnChange && !updateAnnotationOnClick && !updateTopDivSpeaker && !updateTopDivSpeakerOnClick) {
        $("#top-div-speaker-control").hide();
        $("#annotation-box").show();
        var segmentId = spectrum.regions.getCurrentRegion().id;
        currentId = spectrum.regions.getCurrentRegion().id;

        //highlight current region
        highlightRegion();

        //segment start variables
        var startMinute = secondsToMinutes(spectrum.regions.getCurrentRegion().start);
        var startSeconds = secondsToSeconds(spectrum.regions.getCurrentRegion().start);
        var startMilliseconds = secondsToMilliseconds(spectrum.regions.getCurrentRegion().start);
        currentStartTime = spectrum.regions.getCurrentRegion().start

        //segment end variables
        var endMinute = secondsToMinutes(spectrum.regions.getCurrentRegion().end);
        var endSeconds = secondsToSeconds(spectrum.regions.getCurrentRegion().end);
        var endMilliseconds = secondsToMilliseconds(spectrum.regions.getCurrentRegion().end);
        currentEndTime = spectrum.regions.getCurrentRegion().end;

        //displaying texts   
        $("#annotation-start-minute").val(startMinute);
        $("#annotation-start-seconds").val(startSeconds);
        $("#annotation-start-milliseconds").val(startMilliseconds);
        $("#annotation-end-minute").val(endMinute);
        $("#annotation-end-seconds").val(endSeconds);
        $("#annotation-end-milliseconds").val(endMilliseconds);

        //($("#peaks-container").children().is(`#${segmentId}`) > 0)
        if ($("#peaks-container").children().is(`#${segmentId}`) > 0) {
          var segmentType = document.getElementById(segmentId).title;
          var segmentSpeaker = document.getElementById(segmentId).className.replace(/-/g, " ");
          var segmentText = document.getElementById(segmentId).innerText;
          var divColor = document.getElementById(segmentId).style.background;

          //changing color of Annotation Heading
          $(".annotation-editHeading").css("backgroundColor", divColor);
          if (segmentType !== "default" && segmentType !== "Singing") {
            document.getElementById("transcription-area").style.display = "none";
            document.getElementById("transcripted_text_paragraph").style.display = "none";
            document.getElementById("speaker-name").style.display = "none";
            //$("#annotation-box").css("height", 250 + "px");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = "";
            document.getElementById("transcription-area").value = "";
          } else {
            document.getElementById("transcription-area").style.display = "block";
            document.getElementById("speaker-name").style.display = "block";
            //$("#annotation-box").css("height", 32 + "rem");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = segmentSpeaker;

            //Checking if submitted or not
            if (diffCheckSubmit) {
              if (document.getElementById(segmentId).querySelector("p").childNodes.length > 0) {
                //Storing values from segment
                var p1_child_text = document.getElementById(segmentId).querySelector("p").childNodes[0].innerHTML;
                var p2_child_text = document.getElementById(segmentId).querySelector("p").childNodes[1].innerHTML;
                document.getElementById("transcripted_text_paragraph").style.display = "flex";
                //Clearing the tag value
                document.getElementById("transcripted_text_paragraph").innerHTML = "";
                document.getElementById("transcription-area").style.display = "none";

                ////console.log(p1_child_text);
                //Creating child tags to display text
                document.getElementById("transcripted_text_paragraph").appendChild(document.createElement("p")).innerHTML = p1_child_text;
                document.getElementById("transcripted_text_paragraph").appendChild(document.createElement("p")).innerHTML = p2_child_text;
                var p1_child = document.getElementById(`transcripted_text_paragraph`).childNodes[0];
                var p2_child = document.getElementById(`transcripted_text_paragraph`).childNodes[1];
                p1_child.className = "transcription_area_first_child";
                p1_child.style.width = "40%";

                p1_child.style.margin = "10px";

                p2_child.style.width = "40%";

                p2_child.style.margin = "10px";

              } else {
                document.getElementById("transcripted_text_paragraph").style.display = "none";
                document.getElementById("transcription-area").style.display = "block";
                //Display Normal Text
                document.getElementById("transcription-area").value = segmentText;
              }
            } else {
              document.getElementById("transcription-area").value = segmentText;
            }
          }
        }
      }
    }//DisplayCurrentContents function end

    //function to disable all on submit
    function disableAllInterfaceOnSubmit() {
      $(".disable-all-on-Submit").prop('disabled', true);
      $(".disable-all-on-Submit").css({ "cursor": "not-allowed" });
    }//disable all interface on submit end

    //function to disable times for transcription
    function disableForTranscription() {
      $(".annotation-time-class").prop('disabled', true);
      $("#annotation-remove").prop('disabled', true);
      $("#annotation-remove").css({ "cursor": "not-allowed" });
      $("#annotation-split").prop("disabled", true);
      $("#annotation-split").css({ "cursor": "not-allowed" });
      $(".annotation-time-ms-class").prop("disabled", true);
      $("#annotation-type").prop("disabled", true);
      $("#speaker-name").prop("disabled", true);
      $("#top-div-control-speaker-name").prop("disabled",true);
      $("#top-div-control-remove-button").prop("disabled",true);
      $("#top-div-control-remove-button").css({ "cursor": "not-allowed" });
      $("#top-div-control-save-button").prop("disabled",true);
    }//disable times for transcription 

  </script>
</body>

</html>
<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <!-- Hotjar Tracking Code for https://samplesegmentation.theaudiobee.com/ -->
  <script>
    
    (function (h, o, t, j, a, r) {
      var hjKey={{hot_jar_key}};
      h.hj = h.hj || function () { (h.hj.q = h.hj.q || []).push(arguments) };
      h._hjSettings = { hjid: hjKey, hjsv: 6 };
      a = o.getElementsByTagName('head')[0];
      r = o.createElement('script'); r.async = 1;
      r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
      a.appendChild(r);
    })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');
  </script>
  <meta charset="utf-8">
  <title></title>
  <link rel="stylesheet" type="text/css" href="/css/styles.css">
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <style>
    body {
      overflow: hidden;
      margin-top: -10px;
    }

    /*CSS For Guided Audio Follow Instructions*/
    #guides-to-follow {
      display: inline-block;
      z-index: 1;
      -webkit-user-select: none;
      user-select: none;
    }

    #guided-menu {
      text-align: center;
      font-size: 14px;
      width: 680px;
      color: #fff;
      font-weight: bold;
      padding: 8px;
      background: #3e97e6;
      display: inline-block;
      border-radius: 4%;
      list-style-type: none;
      -webkit-font-smoothing: antialiased;
      white-space: normal;

      animation: argh-my-eyes 3s infinite;
    }

    @keyframes argh-my-eyes {
      0% {
        background-color: #10c018;
      }

      25% {
        background-color: #1056c0;
      }

      50% {
        background-color: #ef0a1a;
      }

      75% {
        background-color: #254878;
      }

      100% {
        background-color: #04a1d5;
      }
    }

    #guided-audio-instructions {
      height: 15px;
      width: 300px;
      position: relative;
      z-index: 1;
    }

    #guided-button {
      width: 2.6rem;
      height: 1.2rem;
      display: inline;
    }

    /*CSS For Guided Audio Follow Instructions*/
    #v-container {
      margin-top: -50vh;
    }

    #play-button {
      color: #555;
      cursor: pointer;
      display: block;
      float: left;
      font-size: 3.7em;
      margin: 0.1em 0.2em 0.5em 0.1em;
    }

    #top-div-for-scrolling-enabling {
      width: 50vw;
      height: 60vh;
      position: absolute;
      z-index: 1;
      left: 0px;
      top: 0px;
    }

    #time {
      color: #757575;
      float: left;
      font-size: 1.1em;
      font-weight: 300;
      margin-top: 10px;
    }

    #start-timestamp {
      color: #757575;
      float: left;
      font-size: 2em;
      font-weight: 300;
      margin-top: 20px;
      padding-right: 10px;
      width: 170px;
    }

    #total-timestamp {
      color: #757575;
      float: left;
      font-size: 1.5em;
      font-weight: 300;
      margin-right: 1em;
      margin-top: 26px;
    }

    .audio_time_hours {
      font-size: 0.7em;
      margin-top: 15px;

      margin-left: 4px;
      text-align: left;
    }

    #audio-time-divider {
      border-left: 2px solid #757575;
      height: 30px;
      margin: 1.5em 0.3em;
      padding-left: 5px;
    }

    .audio-button-top-container {
      width: 35em;
      float: left;
    }

    .audio-button-bottom-row {
      margin-top: 4em;
    }

    .playback_speed {
      float: left;
      margin-right: 0.25em;
    }

    header a {
      color: #888888;
      /*margin-right: 16px;*/
      text-decoration: none;
      font-weight: 300;
      color: #444;
      margin: 1em 1em .375em 1.5em;
      font-size: 1.85em;
      display: inline-block;
    }


    #time-line {
      /*transform: translate(0px,1040px);*/
    }

    #plus-button {
      margin-left: 56vw;
      position: fixed;
      z-index: 3;
      font-size: 16px;
      color: #fff;
      border: none;
      border-radius: 70%;
      width: 45px;
      height: 45px;
      background-color: #2f84ba;
      cursor: pointer;
    }

    #top-block {
      position: fixed;
      width: 100%;
      opacity: 1;
      margin-top: 50px;
      z-index: 99;
      background: #fff;
      border-bottom: 3px groove #888888;

      background: #fff;
      box-shadow: 0px 5px 5px #ccc;
      padding-left: 100px;
      height: 100px;
      overflow-y: hidden;
      overflow-x: hidden;
      white-space: nowrap;
      text-align: right;
    }

    #annotation-div-head {

      top: 150px;
      width: 50vw;
      position: fixed;
      opacity: 1;
      z-index: 99;
      height: 40px;
    }

    #annotation-div {
      position: relative;
      opacity: 1;
      z-index: 999;
      height: 35px;
    }

    #wave-container {
      display: fixed;
      height: 50vh;
    }

    #peaks-container {
      transform: translateX(0%) rotate(90deg);
      transform-origin: bottom left;
      position: relative;
      cursor: pointer;
      /*width: calc(214 * 96px);*/
    }

    #annotation-box {
      box-shadow: 4px 4px 4px #888888;
      bottom: 2rem;
      right: 10rem;
      border: 1px solid grey;
      /*width: 350px;*/
      position: fixed;
      z-index: 3;
      background-color: white;
      overflow-x: :hidden;
      overflow-y: hidden;
      display: none;
    }

    #close {
      position: relative;
      cursor: pointer;
      font-size: 34px;
      font-weight: 300;
      /*margin-left: 9vw;*/
      float: right;
      margin-right: 12px;
    }

    .annotation-time-class {
      font-size: 24px;
      font-weight: 520;
      padding-left: 5px;
      width: 30px;
      border: none;
    }

    .annotation-time-ms-class {
      font-size: 24px;
      font-weight: 520;
      padding-left: 5px;
      width: 40px;
      border: none;
    }

    #annotation-type {
      width: 350px;
      margin: 10px;
      border-radius: 15px;
      cursor: pointer;
    }

    .annotation-selection {
      font-size: 20px;
      padding: 10px;
    }

    #speaker-name {
      width: 325px;
      margin: 10px;
      border-radius: 15px;
    }

    .speaker-type {
      font-size: 20px;
      padding: 10px;
    }

    #transcription-area {
      width: 320px;
      margin: 10px;
      border-radius: 15px;
      padding: 10px;
      font-size: 16px;
      font-family: Arial, Helvetica, sans-serif;
    }

    #annotation-time {
      display: inline-block;
    }

    .annotation-time-class:invalid {
      color: red;
    }

    .annotation-time-ms-class:invalid {
      color: red;
    }

    #confirmation-box {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    .confirm-changes {
      background-color: #1a73e8;
      border: 1px solid #1a73e8;
      clear: left;
      border-radius: 2px;
      box-shadow: none;
      color: #202124;
      cursor: pointer;
      float: right;
      font-size: 11px;
      font-weight: bold;
      height: 32px;
      margin: 3em 0 0 .5em;
      outline: 0px;
      padding: 0px 16px;
      text-align: center;
      vertical-align: top;
      white-space: nowrap;
    }

    .discard-changes {
      background-color: #ddd;
      border: 1px solid #ddd;
      clear: left;
      border-radius: 2px;
      box-shadow: none;
      color: #202124;
      cursor: pointer;
      float: right;
      font-size: 11px;
      font-weight: bold;
      height: 32px;
      margin: 3em 0 0 .5em;
      outline: 0px;
      padding: 0px 16px;
      text-align: center;
      vertical-align: top;
      white-space: nowrap;
    }

    .take-test-error {
      background-color: #ddd;
      border: 1px solid #ddd;
      clear: left;
      border-radius: 2px;
      box-shadow: none;
      color: #202124;
      cursor: pointer;
      float: right;
      font-size: 11px;
      font-weight: bold;
      height: 32px;
      margin: 3em 0 0 .5em;
      outline: 0px;
      padding: 0px 16px;
      text-align: center;
      vertical-align: top;
      white-space: nowrap;
    }

    #empty-speaker {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    #hundredMilliseconds-gap {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    #endTime-moreThanStartTime {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    #error-guided-audio {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    #sameSpeaker-Overlapping {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 2em;
      position: absolute;
      z-index: 10000;
      top: 50vh;
      left: 40vw;
      display: none;
    }

    #guidelines-box {
      background-color: #f9f9f9;
      box-shadow: 0 0 12px lightgrey;
      clear: both;
      color: #333;
      margin: 0 auto;
      padding: 1.5em;
      position: absolute;
      z-index: 10000;
      top: 16vh;
      left: 30vw;
      display: none;
    }

    .keyboard-shortcuts td {
      font-size: 1.1em;
      margin-bottom: 6px;
      font-weight: normal;
    }

    .keyboard-shortcuts caption {
      font-size: 1.6em;
      margin-bottom: 10px;
      text-align: center;
    }

    .keyboard-shortcuts th,
    .keyboard-shortcuts td {
      padding: 10px;
      padding-right: 20px;
    }

    .keyboard-shortcuts tbody tr:nth-child(even),
    .keyboard-shortcuts thead tr {
      background-color: #ddd;
    }

    .keyboard-shortcuts thead {
      font-size: 1.3em;
      display: table-header-group;
      vertical-align: middle;
    }

    caption,
    th,
    td {
      text-align: left;
      font-weight: normal;
    }

    table {
      border-spacing: 0px;
      border-collapse: collapse;
      margin: 0px;
      padding: 0px;
      border: 0px;
      outline: 0px
    }

    #close-guidelines {
      background-color: #1a73e8;
      border: 1px solid #1a73e8;
      clear: left;
      color: #eee;
      border-radius: 2px;
      box-shadow: none;
      cursor: pointer;
      float: right;
      font-size: 11px;
      font-weight: bold;
      height: 32px;
      margin: 2em 0 0 .5em;
      outline: 0px;
      padding: 0px 16px;
      text-align: center;
      vertical-align: top;
      white-space: nowrap;
    }

    #top-speaker-editor-box {
      box-shadow: 0 0 5px #999;
      bottom: 30rem;
      right: 35rem;
      border: 1px solid grey;
      /*width: 350px;*/
      position: fixed;
      z-index: 3;
      background-color: white;
      padding: 16px;
      display: none;
    }

    #submit-button {
      position: fixed;
      bottom: 2%;
      right: 5%;
      width: 5%;
      height: 5%;
      background-color: blue;
      color: #fff;
      font-size: 20px;
      border-radius: 10%;
      display: none;
    }

    #go-to-test {
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      width: 8rem;
      height: 2rem;
      background-color: blue;
      color: #fff;
      font-size: 20px;
      border-radius: 10%;
      cursor: pointer;
    }

    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    /* Firefox */
    input[type=number] {
      -moz-appearance: textfield;
    }
  </style>
</head>

<body>
  <div id="header">
    {{>header}}
  </div>

  <div id="top-block">
    <div id="button">
      <a class="btn" id="play-button" href="#">
        <i class="fa fa-play" style="color:grey;font-size:30px"></i></a>
    </div>
    <div id="time">
      <h3 class="audio_time_hours">00 h</h3>
      <h2 id="start-timestamp">00:00.000 </h2>
      <span id="audio-time-divider"></span>
      <h3 class="audio_time_hours">00 h</h3>
      <h3 id="total-timestamp">00:00.000</h3>
    </div>
    <div class="audio-button-top-container">
      <div class="audio-button-top-row">

      </div>
      <div class="audio-button-bottom-row">
        <label class="playback_speed">
          Playback Speed:
          <select id="play_back_rate" style="border-style: none; font-size: 1em; margin-left: .1em;">
            <option value="0.5">0.5x</option>
            <option value="0.75">0.75x</option>
            <option value="1" selected>1x</option>
            <option value="1.25">1.25x</option>
            <option value="1.5">1.5x</option>
          </select>
        </label>
      </div>
    </div>
  </div>
  <div id="top-div-for-scrolling-enabling">
  </div>
  <div id="annotation-div-head">
    <div id="annotation-div">

    </div>
  </div>
  <button id="plus-button">
    <i class="fa fa-plus"></i>
  </button>
  <div id="v-container">
    <div id="wave-container">
      <div id="peaks-container">
        <div id="time-line">
        </div>
      </div>
    </div>
  </div>

  <div id="annotation-box">
    <div class="annotation-editHeading" style=" background-color:#ffb570 ; height: 40px; ">
      <p style="padding-left: 20px; font-size: 20px; margin:auto"> Edit Annotation <span id="close">x</span></p>
    </div>
    <div id="annotation-time">
      <button id="repeat-button" style=" margin-left: 7px; border:none; background: none;"><i class="fa fa-repeat"
          style=" color:black;font-size:16px;cursor:pointer;"></i> </button>
      <span id="annotation-start" style="font-size: 16px;font-weight: 600;">
        <input id="annotation-start-minute" class="annotation-time-class disable-all-on-Submit" type="number" min="0"
          max="59" onclick="" onchange="updateSegmentonTimeChange()" value="00">
        :
        <input id="annotation-start-seconds" class="annotation-time-class disable-all-on-Submit" type="number" min="0"
          max="59" oninput="" onchange="updateSegmentonTimeChange()" value="00">
        .
        <input id="annotation-start-milliseconds" class="annotation-time-ms-class disable-all-on-Submit" type="number"
          min="0" max="999" oninput="" onchange="updateSegmentonTimeChange()" value="000">
      </span>
      <span style="font-size: 40px;">-</span>
      <span id="annotation-end" style="font-size: 16px;font-weight: 600;">
        <input id="annotation-end-minute" class="annotation-time-class disable-all-on-Submit" type="number" min="0"
          max="59" oninput="" onchange="updateSegmentonTimeChange()" value="00">
        :
        <input id="annotation-end-seconds" class="annotation-time-class disable-all-on-Submit" type="number" min="0"
          max="59" oninput="" onchange="updateSegmentonTimeChange()" value="00">
        .
        <input id="annotation-end-milliseconds" class="annotation-time-ms-class disable-all-on-Submit" type="number"
          min="0" max="999" oninput="" onchange="updateSegmentonTimeChange()" value="000">
      </span>
    </div>

    <div>
      <select id="annotation-type" class="disable-all-on-Submit" onchange="displayArea()"
        style="z-index: 3;font-size: 18px; padding: 10px;">
        <option value="default" class="annotation-selections" selected="selected"></option>
        <option value="Singing" class="annotation-selections">Singing</option>
        <option value="Applause" class="annotation-selections">Applause</option>
        <option value="DTMF" class="annotation-selections">DTMF</option>
        <option value="Laughter" class="annotation-selections">Laughter</option>
        <option value="Music" class="annotation-selections">Music</option>
        <option value="Noise" class="annotation-selections">Noise</option>
        <option value="Ringtone" class="annotation-selections">Ringtone</option>
      </select>
    </div>
    <div id="speaker">
      <input id="speaker-name" class="disable-all-on-Submit" placeholder="Select or enter a new speaker" type="text"
        list="select-options" style="z-index: 3;font-size: 18px; padding: 10px;">
      <datalist id="select-options">

      </datalist>
    </div>
    <div>
      <textarea id="transcription-area" class="disable-all-on-Submit" rows="8"></textarea>
    </div>

    <hr style="opacity: 0.5;">
    <button id="annotation-remove" class="disable-all-on-Submit"
      style="margin:10px;color:red; border:none;background: none;font-size: 18px; cursor:pointer;">REMOVE</button>
    <button id="annotation-split" class="disable-all-on-Submit"
      style="margin:5px 10px 20px 0px;color:black; border:none;background: none;font-size: 18px;">SPLIT</button>
    <button id="annotation-save" class="disable-all-on-Submit"
      style="padding:10px; margin:0px 10px 15px 50px;color:white; border-radius:4px;border:none;background: #2f84ba;font-size: 18px;cursor: pointer;">SAVE</button>
  </div><!-- Ending tag for Annotation Box -->

  <!-- Div For Confirmation Dialouge Box -->
  <div id="confirmation-box">
    <p>Pending Changes, Wish to discard Them?</p>
    <button class="confirm-changes">Confirm</button>
    <button class="discard-changes">Cancel</button>
  </div>

  <!-- Div For Top Speaker Editor Box -->
  <div id="top-speaker-editor-box">
    <span>Speaker</span>
    <span id="close-top-speaker-div">x</span>
  </div>

  <!-- Div For Empty Speaker Name Dialouge Box -->
  <div id="empty-speaker">
    <p>Speaker is empty or invalid</p>
    <button class="discard-changes">Ok</button>
  </div>

  {{!-- Div For hundredMilliseconds-gap Dialouge Box --}}
  <div id="hundredMilliseconds-gap">
    <p>Hundred Milliseconds Gap Not Matched</p>
    <button class="discard-changes">Ok</button>
  </div>

  {{!-- Div For endTime-moreThanStartTime Dialouge Box --}}
  <div id="endTime-moreThanStartTime">
    <p>End Time Found Less Than Start Time</p>
    <button class="discard-changes">Ok</button>
  </div>

  {{!-- Div For sameSpeaker-Overlapping Dialouge Box --}}
  <div id="sameSpeaker-Overlapping">
    <p>Same Speakers cannot be Overlapped.</p>
    <button class="discard-changes">Ok</button>
  </div>

  {{!-- Div For Error While Guided Audio Instruction --}}
  <div id="error-guided-audio">
    <p></p>
    <button class="take-test-error">Ok</button>
  </div>

  {{!-- Div For displaying guidelines-box --}}
  <div id="guidelines-box">
    <div>
      <table class="keyboard-shortcuts">
        <caption>Keyboard Shortcuts</caption>
        <thead>
          <tr>
            <th>Action</th>
            <th colspan="3">Shortcuts</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Toggle audio play/pause</td>
            <td>space</td>
            <td>0</td>
            <td>ctrl+space</td>
          </tr>
          <tr>
            <td>Copy current time to turn start time</td>
            <td>ctrl+semicolon</td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>Copy current time to turn end time</td>
            <td>ctrl+single-quote</td>
            <td></td>
            <td></td>
          </tr>
          {{!--         
          <tr>
            <td>Page up</td>
            <td>pg-up</td>
            <td>alt+up</td>
            <td></td>
          </tr>
          <tr>
            <td>Page down</td>
            <td>pg-down</td>
            <td>alt+down</td>
            <td></td>
          </tr>
           --}}
          <tr>
            <td>Jump to start</td>
            <td>home</td>
            <td></td>
            <td></td>
            <!--<td>alt+left</td>
            <td></td>-->
          </tr>
          <tr>
            <td>Jump to end</td>
            <td>end</td>
            <td></td>
            <td></td>
            <!--<td>alt+right</td>-->
          </tr>
          <tr>
            <td>Create a new turn</td>
            <td>ctrl+shift+a</td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>Skip backward 500ms</td>
            <td>8</td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>Skip forward 500ms</td>
            <td>5</td>
            <td></td>
            <td></td>
          </tr>
          {{!--           
          <tr>
            <td>Jump to largest gap in coverage</td>
            <td>ctrl+shift+space</td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <td>Skip to next gap in coverage</td>
            <td>ctrl+alt+space</td>
            <td></td>
            <td></td>
          </tr>
           --}}
          <tr>
            <td>Play current turn or annotation</td>
            <td>r</td>
            <td>alt+r</td>
            <td></td>
          </tr>
        </tbody>
      </table>
    </div>
    <button id="close-guidelines">OK</button>
  </div>

  {{!-- Submit button for review testing --}}
  <button id="submit-button" class="disable-all-on-Submit">Submit</button>

  <audio id="my-audio">
    <source src="example.mp3">
  </audio>

  <script src="https://code.jquery.com/jquery-3.4.1.js"></script>

  <script src="local_modules/wavesurfer.js/dist/wavesurfer.js"></script>
  <script src="local_modules/wavesurfer.js/dist/plugin/wavesurfer.timeline.js"></script>
  <script src="local_modules/wavesurfer.js/dist/plugin/wavesurfer.regions.js"></script>
  <!--<script src="wavesurfer.js/src/drawer.multicanvas.js"></script>-->
  <script>
    /*var user_id;
    var audio_id,
      audio_id = {{ audio_id }};
    user_id = {{ user_id }};
    //console.log(user_id);*/
  </script>
  <script>
    var user_id;
    var audio_id,
      audio_id = {{ audio_id }};
    user_id = {{ user_id }};
    //console.log(user_id);
    var guidedAudioNextClickCount = 0;//Clicked Next Count
    var guidedAudioError = ""//var for guided audio errors
    var actualResponseLength = 0;//Assigns total response length
    var postsResponseLength = 0;//Assigns total posts length
    var wrongSpeakerScore = 0;
    var wrongAnnotationScore = 0;
    var unnecessarySegmentsErrors = 0;
    var scoresForWrongSegments = 0;//var to assign score

    var addRegionBool = true;//Bool for adding region only one on click
    var canvasHeight = 0;
    var updateAnnotationOnClick = false;//allow updating annotation box only on click
    var updateAnnotationOnChange = false;//allow updating annotation box only on change
    var updateSegments = true;//update segments only if not new region 
    var dragging = false;//allow dragging
    var temp, y, diff, segmentStart, segmentEnd = 0;
    var pressed = false;
    var segmentId = 1;
    var currentId = "";
    var currentStartTime, currentEndTime = 0;
    var newStartTime, newEndTime = 0;
    var confirmChangesboxBool = false;//boolean true if confirm changes box appears
    var speakerNameCheckBool = true;//true if speaker name is valid
    var hundredMillisecSegmentCheck = true;//true if segment is created above 100 ms
    var segmentEndingTimeMoreThanStartingTime = false;
    var sameSpeakerOverlapping = false;//true if two same speakers overlap each other
    var pixels = 0;
    var correctSegmentCreated = false;

    //var TimelinePlugin=window.WaveSurfer.timeline;
    var temp = 0, scrolltop = 0, relativeScroll = 0;
    var buttons = {
      play: document.getElementById("play-button")
    }

    //Next Button Click Function For Guided Audio
    function nextGuideButtonClick(event) {
      $("next-guide-button").on("mouseup", function (event) {
        if (event.which == 32 || event.which == 13) {
          event.preventDefault();
        }
      })
      if (event.which != 32 || event.which != 13) {
        guidedAudioNextClickCount += 1;
        displayGuideTexts();
      }
    }

    //Previous Button Click Function For Guided Audio
    function previousGuideButtonClick(event) {
      $("#previous-guide-button").on("mouseup", function (event) {
        if (event.which == 32 || event.which == 13) {
          event.preventDefault();
        }
      })
      if (event.which != 32 || event.which != 13) {
        guidedAudioNextClickCount -= 1;
        displayGuideTexts();
      }
    }

    function displayGuideTexts() {
      if (guidedAudioNextClickCount == 0) {
        $("#previous-guide-button").hide();
        $(".guided-audio-instructions").not("#play-and-pause-guided").hide();
        $("#play-and-pause-guided").show();
      } else if (guidedAudioNextClickCount == 1) {
        $("#previous-guide-button").show();
        $(".guided-audio-instructions").not("#play-to-required-time-guided").hide();
        $("#play-to-required-time-guided").show();
      } else if (guidedAudioNextClickCount == 2) {
        $(".guided-audio-instructions").not("#create-region-guided").hide();
        $("#create-region-guided").show();
      } else if (guidedAudioNextClickCount == 3) {
        $(".guided-audio-instructions").not("#copy-current-time-to-end-time-guided").hide();
        $("#copy-current-time-to-end-time-guided").show();
      } else if (guidedAudioNextClickCount == 4) {
        $(".guided-audio-instructions").not("#scrolling-audio-guided").hide();
        $("#scrolling-audio-guided").show();
      } else if (guidedAudioNextClickCount == 5) {
        $(".guided-audio-instructions").not("#copy-current-time-to-start-time-guided").hide();
        $("#copy-current-time-to-start-time-guided").show();
      } else if (guidedAudioNextClickCount == 6) {
        $(".guided-audio-instructions").not("#time-from-annotation-box-guided").hide();
        $("#time-from-annotation-box-guided").show();
      } else if (guidedAudioNextClickCount == 7) {
        $(".guided-audio-instructions").not("#annotation-type-guided").hide();
        $("#annotation-type-guided").show();
      } else if (guidedAudioNextClickCount == 8) {
        $(".guided-audio-instructions").not("#speaker-name-guided").hide();
        $("#speaker-name-guided").show();
      } else if (guidedAudioNextClickCount == 9) {
        $(".guided-audio-instructions").not("#save-segmentation-guided").hide();
        $("#save-segmentation-guided").show();
        $("#next-guide-button").show();
        $("#go-to-test").hide();
      } else if (guidedAudioNextClickCount == 10) {
        $(".guided-audio-instructions").not("#go-to-test-from-guided").hide();
        $("#go-to-test-from-guided").show();
        $("#next-guide-button").hide();
        $("#go-to-test").show();
      }
    }


    //Creating the audio stream from Wavesurfer 
    var spectrum = WaveSurfer.create({
      container: '#peaks-container',
      waveColor: 'grey',
      progressColor: 'grey',
      minPxPerSec: 96,
      scrollParent: false,
      autoCenter: true,
      seekStyle: "line",
      mediaControls: true,
      barWidth: 1,
      barHeight: 0.5,
      height: 316,
      plugins: [
        WaveSurfer.timeline.create({
          container: "#time-line",
          timeInterval: 0.1,
          height: 50,
          notchPercentHeight: 25
        }),
        WaveSurfer.regions.create({

        })
      ]
    });
    spectrum.zoom(96);


    //handle play button
    buttons.play.addEventListener("click", function (event) {
      event.preventDefault();
      if (!spectrum.isPlaying()) {
        spectrum.play();
        $("#play-button").find($(".fa")).toggleClass('fa-play fa-pause');
      } else {
        spectrum.pause();
        $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
      }
      document.getElementById('total-timestamp').innerText = secondsToTimestamp(spectrum.getDuration());
    })

    //function on spectrum is ready 
    spectrum.on("ready", function () {
      $("#guide-for-submit-button-appearance").hide();
      $("#guided-menu").show();
      $("body").not("#guided-menu").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      });
      //Removing the welcome guided audio text
      setTimeout(function () {
        $("body").css({
          backgroundColor: "#fff",
          opacity: "1"
        })
        $("#guided-welcome").css({ "display": "none" });
        $("#play-and-pause-guided").css({ "display": "block" });
        $("#next-guide-button").show();
      }, 5000);

      //calling the function for next Guide button on spectrum load
      $("#next-guide-button").on("click", (event) => {
        nextGuideButtonClick(event);
      });

      $("#previous-guide-button").on("click", (event) => {
        previousGuideButtonClick(event);
      })

      //locating to next test page on take test click
      $("#go-to-test").on("click", function () {
        guidedAudioError = "";
        if ($("#peaks-container").children("div").length == 2) {
          //This code gets you to test place
          window.location.href = `${new URL(window.location).origin}/transcribe?user_id=${user_id}&audio_id=4`;
        } else {
          guidedAudioError += "No segment or more than 1 segment found. Remove if any extra segments were created. Or create atleast one segment as per the instruction."
          $("#error-guided-audio p").text(guidedAudioError);
          $("#error-guided-audio").show();
          $("body").not("#error-guided-audio").css({
            backgroundColor: "#d9dedb",
            opacity: "0.8"
          })
        }
        //window.location.href = `${new URL(window.location).origin}/transcribe?user_id=${user_id}`;

      });

      //Total Duration Of the Spectrum
      totalDuration = spectrum.getDuration();

      //canvas height to set the top speaker annotation div position from left 
      canvasHeight = $("#peaks-container > wave canvas").height();

      //audio wave total height 
      $("#peaks-container").css({
        "width": `calc(${totalDuration} * 96px)`
      })

      $("#plus-button").css({
        "marginTop": `${$("#peaks-container").position().top}px`
      })
      $("#time-line").css({
        "transform": `translate(0px,${$("wave").height() - 10}px)`
      })
      $("#annotation-div-head").css({
        "left": `${canvasHeight}px`
      })
      buttons.play.disabled = false;
      totalDuration = spectrum.getDuration();
      document.getElementById('total-timestamp').innerText = secondsToTimestamp(totalDuration);

      //Add Region on key down
      $("html").on("keydown", function (event) {
        if (event.ctrlKey && event.shiftKey && event.which == 65) {
          //checking if the the play is seeked to required position

          //console.log("Pressed");
          addRegion();
          if (addRegionBool == true && !updateAnnotationOnChange) {
            renew();
          }


        }
      });

      //Replay Region on KeyDown
      $("html").on("keydown", function (event) {
        if (event.altKey && event.which == 82 || event.which == 82 && event.target.id != "speaker-name" && event.target.id != "transcription-area") {
          //console.log("Pressed");
          repeatRegion();
        }
      });//Replay Function end

      //play pause on space bar
      $("html").on("keydown", function (event) {
       if ((event.which == 32 || event.which == 96 || event.which == 48) && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "annotation-start-minute" && event.target.id != "annotation-start-seconds" && event.target.id != "annotation-start-milliseconds" && event.target.id != "annotation-end-minute" && event.target.id != "annotation-end-seconds" && event.target.id != "annotation-end-milliseconds" && event.target.id != "top-div-control-speaker-name") {
          ////console.log(event.target);

          if (spectrum.isPlaying()) {
            spectrum.pause();
            $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
          }
          else {
            spectrum.play();
            $("#play-button").find($(".fa")).toggleClass('fa-play fa-pause');
            highlightRegion();
          }
        }else if( (event.ctrlKey && event.which == 32) && (event.target.id == "speaker-name" || event.target.id == "transcription-area" || event.target.id == "annotation-start-minute" || event.target.id == "annotation-start-seconds" || event.target.id == "annotation-start-milliseconds" || event.target.id == "annotation-end-minute" || event.target.id == "annotation-end-seconds" || event.target.id == "annotation-end-milliseconds" || event.target.id == "top-div-control-speaker-name") ){
          if (spectrum.isPlaying()) {
            spectrum.pause();
            $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
          }
          else {
            spectrum.play();
            $("#play-button").find($(".fa")).toggleClass('fa-play fa-pause');
            highlightRegion();
          }
        }
      });//play pause function end

      //skip audio backwards 500ms on "8" pressed
      $("html").on("keydown", function (event) {
        if ((event.which == 104 || event.which == 56) && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "annotation-start-minute" && event.target.id != "annotation-start-seconds" && event.target.id != "annotation-start-milliseconds" && event.target.id != "annotation-end-minute" && event.target.id != "annotation-end-seconds" && event.target.id != "annotation-end-milliseconds") {
          skipAudio(-0.5);
        }
      });

      //skip audio backwards 500ms on "5" pressed
      $("html").on("keydown", function (event) {
        if ((event.which == 101 || event.which == 53) && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "annotation-start-minute" && event.target.id != "annotation-start-seconds" && event.target.id != "annotation-start-milliseconds" && event.target.id != "annotation-end-minute" && event.target.id != "annotation-end-seconds" && event.target.id != "annotation-end-milliseconds") {
          skipAudio(0.5);
        }
      });

      //jump audio to start
      $("html").on("keydown", function (event) {
        if (event.which == 36) {
          spectrum.seekTo(0);
        }
      });

      //jump audio to end
      $("html").on("keydown", function (event) {
        if (event.which == 35) {
          skipAudio(spectrum.getDuration());
        }
      });

      //function to skip audio
      function skipAudio(timeToSkip) {
        spectrum.skip(timeToSkip);
      }

      //Making our canvas line visible 
      $("#peaks-container > wave").css({ "overflow": "" });
      //Canvas straight Line
      var canvas = $("#peaks-container > wave canvas");
      var newCanvas = document.createElement("canvas");
      newCanvas.width = "2000";
      newCanvas.height = "316";
      newCanvas.style.cssText = ("position: absolute; z-index: 2; left: -2000px; bottom: 0px; height: 35.5%; pointer-events: none; width: 2000px;");
      canvas[0].before(newCanvas);
      canvas = $("#peaks-container > wave canvas");
      for (var i = 0; i < canvas.length; i++) {
        var context = canvas[i].getContext("2d");
        var x = (canvas[i].width);
        var y = (canvas[i].height) / 2;

        context.beginPath();
        // Staring point (10,45)
        context.moveTo(0, y);
        // End point (180,47)
        context.lineTo(x, y);
        // Make the line visible
        context.strokeStyle = "#000";
        context.lineWidth = 1;
        context.stroke();
      }
      //var ctx=canvas.getContext("2d");
    });//Function end for on ready spectrum

    
    //Resize Window on ready
    $(document).ready(function(){
      resizeWindow();
    });

    window.onload = function(e){ 
      resizeWindow();
    }

    window.addEventListener("resize",resizeWindow)

    function resizeWindow(){
        
      if (window.matchMedia("(max-width: 1500px)").matches) {
          $("#peaks-container > wave").css({ "height": "65vw" });
          $("#annotation-box").css({
             "box-shadow": "4px 4px 4px #888888",
              "bottom": "6rem",
              "right": "1rem",
              "border": "1px solid grey",
              "width": "370px",
              "position": "fixed",
              "z-index": "3",
              "background-color": "white",
              "overflow-x" :"hidden",
              "overflow-y": "hidden",
              "display": "none"
          });

          //canvas height to set the top speaker annotation div position from left 
          canvasHeight = $("#peaks-container > wave canvas").height();

            $("#plus-button").css({
              "marginLeft": `65vw`
            })

            $("#plus-button").css({
               "marginTop": `${$("#peaks-container").position().top}px`
            })

            $("#time-line").css({
              "transform": `translate(0px,${$("wave").height() - 10}px)`
            })
            //$("#annotation-div-head").css({
            //  "left": `${canvasHeight}px`
            //})

        
            //seekToCookie();
             
          /* The viewport is less than, or equal to, 1500 pixels wide */
        } else if(window.matchMedia("(min-width: 1500px)").matches) {
              $("#peaks-container > wave").css({ "height": "55vw" });
              $("#annotation-box").css({
                "box-shadow": "4px 4px 4px #888888",
                  "bottom": "2rem",
                  "right": "10rem",
                  "border": "1px solid grey",
                  
                  "position": "fixed",
                  "z-index": "3",
                  "background-color": "white",
                  "overflow-x" :"hidden",
                  "overflow-y": "hidden",
                  "display": "none"
              });


              //canvas height to set the top speaker annotation div position from left 
              canvasHeight = $("#peaks-container > wave canvas").height();

              $("#plus-button").css({
                "marginLeft": `56vw`
              })
              $("#plus-button").css({
               "marginTop": `${$("#peaks-container").position().top}px`
            })
              $("#time-line").css({
                "transform": `translate(0px,${$("wave").height() - 10}px)`
              });
              //seekToCookie();
        }  
    }
  //function to seek to set cookie
    function seekToCookie(){
          //Load Wave to previous time stamp from cookie
            setTimeout(function(){
              if (getCookie("current_time") > 0) {
                spectrum.seekTo(parseFloat(getCookie("current_time")));
              //spectrum.seekTo(0.0404);
            };
            },1500);
    }


    function updateTimer() {
      var formatTime = secondsToTimestamp(spectrum.getCurrentTime());
      document.getElementById('start-timestamp').innerText = formatTime;
      setTimeout(updateTimer, 100);
    }
    updateTimer();

    //function to convert seconds to minute, seconds and milliseconds
    function secondsToTimestamp(seconds) {

      var n = Math.floor(seconds);
      var ms = (seconds - n).toFixed(3);
      seconds = Math.floor(seconds);
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      var s = seconds - (h * 3600) - (m * 60);

      m = m < 10 ? '0' + m : m;
      s = s < 10 ? '0' + s : s;
      ms = ms < 10 ? '0' + ms : ms;

      return m + ':' + s + '.' + ms.split(".")[1];
    }

    //function to convert seconds to minute for editing annotation box  
    function secondsToMinutes(seconds) {
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      m = m < 10 ? '0' + m : m;
      return m;
    }

    //function to convert seconds to seconds for editing annotation box  
    function secondsToSeconds(seconds) {
      seconds = Math.floor(seconds);
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      var s = seconds - (h * 3600) - (m * 60);
      s = s < 10 ? '0' + s : s;
      return s;
    }

    //function to convert seconds to milliseconds for editing annotation box  
    function secondsToMilliseconds(seconds) {
      var n = Math.floor(seconds);
      var ms = (seconds - n).toFixed(3);
      ms = ms < 10 ? '0' + ms : ms;
      return ms.split(".")[1];
    }

    spectrum.load("{{audio_url}}");

    //function for dragging spectrum on mousedown
    window.onload = (function () {
      if (!confirmChangesboxBool) {
        $("#peaks-container,#top-div-for-scrolling-enabling").on("mousedown", function (e) {
          if (spectrum.isPlaying()) {
            spectrum.pause();
            $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
          }
          dragging = true;
          temp = y = e.clientY;
        })
        $("#peaks-container,#top-div-for-scrolling-enabling").on("mousemove", function (e) {
          if ($("#peaks-container").css("marginTop").replace("px", "") < -300) {
            $("#top-div-for-scrolling-enabling").css({ "display": "none" });
          } else if ($("#peaks-container").css("marginTop").replace("px", "") > -100) {
            $("#top-div-for-scrolling-enabling").css({ "display": "block" });
          }
          if (dragging == true) {
            y = e.clientY;
            diff = y - temp;
            temp = y;

            var req = (spectrum.getCurrentTime() + (diff * (-1) / 96)) / spectrum.getDuration();

            req < 0 ? req = 0 : req = req;
            req > 1 ? req = 1 : req = req;
            spectrum.seekTo(req);

          }
        })
        $(window).on("mouseup", function (e) {
          dragging = false;
        })
      }
    })//Window.onload function end for mouse events

    //Function on scrolling to seek spectrum  
    document.getElementById("peaks-container").addEventListener("wheel", function (event) {
      if ($("#peaks-container").css("marginTop").replace("px", "") < -100) {
        $("#top-div-for-scrolling-enabling").css({ "display": "none" });
      } else if ($("#peaks-container").css("marginTop").replace("px", "") > -100) {
        $("#top-div-for-scrolling-enabling").css({ "display": "block" });
      }

      if (!confirmChangesboxBool) {
        if (spectrum.isPlaying()) {
          spectrum.pause();
          $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
        }
        var req = (spectrum.getCurrentTime() + (event.deltaY / 96)) / spectrum.getDuration();
        req < 0 ? req = 0 : req = req;
        req > 1 ? req = 1 : req = req;
        spectrum.seekTo(req);
      }
    });
    document.getElementById("top-div-for-scrolling-enabling").addEventListener("wheel", function (event) {
      if (!confirmChangesboxBool) {
        if (spectrum.isPlaying()) {
          spectrum.pause();
          $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
        }
        var req = (spectrum.getCurrentTime() + (event.deltaY / 96)) / spectrum.getDuration();
        req < 0 ? req = 0 : req = req;
        req > 1 ? req = 1 : req = req;
        spectrum.seekTo(req);
      }
    });

    //Scroll Function Ends
    var reqSpeakers = [];

    window.addEventListener("scroll", function (event) {
      event.preventDefault();
    })

    //function to display the textarea and speakerfield
    function displayArea() {

      var val = document.getElementById("annotation-type");
      if (val.value !== "default" && val.value !== "Singing") {
        document.getElementById("speaker-name").value = val.value;
        document.getElementById("transcription-area").value = "";
        document.getElementById("transcription-area").style.display = "none";
        document.getElementById("speaker-name").style.display = "none";
        //$("#annotation-box").css("height", 250 + "px");
      }
      else {
        document.getElementById("transcription-area").style.display = "block";
        document.getElementById("speaker-name").style.display = "block";
        //$("#annotation-box").css("height", 32 + "rem");
      }
    }

    //function on spectrum ready
    spectrum.on("ready", function () {

      //responsive
      if (((window.screen.width * window.devicePixelRatio) < 1920) && ((window.screen.height * window.devicePixelRatio) < 1080)) {
        $("#annotation-box").css({
          "bottom": "1vh",
          "transform": "scale(0.7)"
        })
      }
      //Hiding Annotation Div
      $("#annotation-box").hide();
      //function on ctrl+quote key down and ctrl+colon
      ctrlquote();
      ctrlcolon();

      //ajax to create segments on spectrum load
      $.ajax({
        method: "POST",
        url: "/get-segments",
        data: {
          user_id: user_id,
          audio_id: audio_id
        },
        success: function (response) {
          //console.log("New Data");

          ////console.log(response[0]["segment_id"]);
          for (var i = 0; i < response.length; i++) {
            var segmentId = response[i]["segment_id"];
            var speakerName = response[i]["div_className"];
            var annotationType = response[i]["div_title"];
            var segmentStart = response[i]["segment_start"];
            var segmentEnd = response[i]["segment_end"];
            var annotationText = response[i]["annotation_text"];

            //creating Segments 
            spectrum.addRegion({
              id: segmentId,
              start: segmentStart,
              end: segmentEnd,
              drag: false,
              color: "rgba(0,0,0,0)"
            })
            if (!reqSpeakers.includes(speakerName) && speakerName.includes("speaker")) {
              $("#select-options").append(`<option value="${speakerName}"/>`);
              reqSpeakers.push(speakerName);
            }
            //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
            createDiv(segmentId, speakerName, annotationType, segmentStart, segmentEnd, annotationText);
          }
          //Assigning global segmentId variable with the segmentId from database
          if (response.length > 0) {
            //console.log(response[response.length - 1]["segment_id"]);
            window.segmentId = response[response.length - 1]["segment_id"] + 1;
          }
        }
      })

      $("#plus-button").on("click", function () {
        //checking if the the play is seeked to required position        
        addRegion();
      });
    });//spectrum on ready end

    $("#annotation-save").on("click", function () {
      saveClick();
      /* if (updateSegments == false) {

        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var val = document.getElementById("annotation-type");
        if (val.value !== "default") {
          annotationType = document.getElementById("annotation-type").value;

          speakerName = document.getElementById("annotation-type").value;

          annotationText = val.value;
        } else {
          annotationType = document.getElementById("annotation-type").value;

          speakerName = document.getElementById("speaker-name").value;

          annotationText = $("#transcription-area").val();
        }

        //ajax Request to Create    
        var params = {
          speakerName,
          annotationType,
          segmentStart,
          segmentEnd,
          annotationText
        }

        $.ajax({
          method: "POST",
          url: "/database",
          data: params,
          success: function () {
            //console.log("Success");
          }
        })
        //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
        createDiv(window.segmentId, speakerName, annotationType, segmentStart, segmentEnd, annotationText);
        window.segmentId++;
        updateSegments = true;
      } else {
        //Updating Database
        updateAnnotationOnChange=false;
        var segmentId = spectrum.regions.getCurrentRegion().id;
        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var segmentclass = document.getElementById("speaker-name").value;
        //console.log(segmentclass.replace(" ", "-"));
        var val = document.getElementById("annotation-type");
        if (val.value !== "default") {
          document.getElementById(segmentId).style.top = "0px";
          annotationType = document.getElementById("annotation-type").value;
          document.getElementById(segmentId).title = annotationType;
          speakerName = document.getElementById("annotation-type").value;
          document.getElementById(segmentId).className = speakerName;
          annotationText = val.value;
          document.getElementById(segmentId).querySelector("p").innerText = annotationText;
        } else {
          //checking if speaker is already Available          
          if ($("#annotation-div").children().hasClass(segmentclass.replace(" ", "-"))) {
            $("#annotation-div").children().each(function (index, value) {
              if (value.className == (segmentclass.replace(" ", "-"))) {
                //console.log("old")
                //console.log(value);
                annotationType = document.getElementById("annotation-type").value;
                document.getElementById(segmentId).title = annotationType;
                speakerName = document.getElementById("speaker-name").value;
                document.getElementById(segmentId).className = speakerName.replace(" ", "-");
                annotationText = $("#transcription-area").val();
                document.getElementById(segmentId).querySelector("p").innerText = annotationText;
                document.getElementById(segmentId).style.background = value.style.backgroundColor;
                //400=leftMargin
                document.getElementById(segmentId).style.top = 400 / (index + 1) + "px";
                return;
              }
            });
          } else {
            //console.log("new");
            var newColor = getRandomColor();
            annotationType = document.getElementById("annotation-type").value;
            document.getElementById(segmentId).title = annotationType;
            speakerName = document.getElementById("speaker-name").value;
            document.getElementById(segmentId).className = speakerName.replace(" ", "-");
            annotationText = $("#transcription-area").val();
            document.getElementById(segmentId).querySelector("p").innerText = annotationText;
            document.getElementById(segmentId).style.background = newColor;
            //400=leftMargin
            document.getElementById(segmentId).style.top = 400 / (($("#annotation-div").children("div").length) + 1) + "px";
            topSpeakerDiv(speakerName, newColor);
          }
        }

        //ajax Request To Update
        var params = {
          segmentId,
          speakerName,
          annotationType,
          segmentStart,
          segmentEnd,
          annotationText
        }

        $.ajax({
          method: "POST",
          url: "/updatedatabase",
          data: params,
          success: function () {
            //console.log("Updated");
          }
        })
      } */
    })

    //onClick for split
    $("#close").on("click", function () {
      updateSegments = true;
      updateAnnotationOnClick = false;
      if (updateAnnotationOnChange) {
        confirmDialogue();
        confirmChangesboxBool = true;
      } else {
        $("#annotation-box").hide();
        addRegionBool = true;
      }

      //current region highlight
      highlightRegion();
    })


    //Remove Region             
    $("#annotation-remove").on("click", function () {
      updateSegments == true;
      var regionId = currentId;
      //ajax request to remove segments
      var params = {
        regionId,
        user_id,
        audio_id: audio_id
      }
      if (regionId != null) {
        $.ajax({
          method: "POST",
          url: "/remove-segments",
          data: params,
          success: function () {
            //Hiding Annotation Div      
            $("#annotation-box").hide();
            //console.log("Removed");
            updateAnnotationOnChange = false;
            updateAnnotationOnClick = false;
            //Changed RegionId to CurrentId
            if (spectrum.regions.list[regionId] != null) {
              spectrum.regions.list[regionId].remove();
            }
            $("#" + regionId).empty();
            $("#" + regionId).remove();
          }
        });
      }
      addRegionBool = true;
    });//Remove Region Function End

    //displaying contents on audio processing
    spectrum.on("audioprocess", () => {
      if (spectrum.regions.getCurrentRegion() != null && !updateAnnotationOnChange) {
        currentId = spectrum.regions.getCurrentRegion().id;
        displayCurrentContents();
        highlightRegion();
      }
    })

    //Seeking Specturm
    spectrum.on("seek", function () {
      //Displaying Annotation Div
      //$("#annotation-box").show();
      displayCurrentContents();
      ////console.log(spectrum.getCurrentTime());
    })


    //colorPicker
    function getRandomColor() {
      var hue = Math.floor(Math.random() * 355);
      return `hsl(${hue},100%,90%)`;
    }


    //function to create a div
    var zindexLoop = 1000;
    function createDiv(segmentId, segmentClass = "", segmentTitle = "", segmentStart, segmentEnd, annotationText, actual = false) {
      //leftMargin =400;
      //declaring the add region bool true to allow adding regions
      addRegionBool = true;
      var leftMargin = canvasHeight - 8;
      var div = document.createElement("div");
      //div.style.marginTop="450px";           
      div.id = segmentId;
      div.className = segmentClass.replace(" ", "-");
      div.title = segmentTitle;
      var p = document.createElement("p");
      var colorArr = ["#f5d98c", "#f29363", "#b4ede9", "#a1edbc"];
      var neededColor = getRandomColor();
      div.style.height = "250px";

      if (actual) {
        if (correctSegmentCreated) {
          div.style.border = `3.5px dashed #05f234`;
          div.style.opacity = "0.4";
        } else {
          div.style.border = `3.5px dashed #ff0a0e`;
          div.style.opacity = "0.4";
        }

      }
      //div.style.boxShadow = "1px 1px 5px";
      div.style.background = neededColor;
      div.style.zIndex = zindexLoop + 1;
      p.innerHTML = annotationText;
      p.style.transform = "translateX(0%) rotate(270deg)";
      p.style.width = "200px";
      p.style.height = "200px";
      p.style.padding = "20px";
      p.style.fontSize = "18px";
      p.style.wordBreak="break-word";
      p.style.pointerEvents = "none";
      div.appendChild(p);
      div.style.position = "absolute";
      //div.style.top = "0px";
      var progress1 = segmentStart / spectrum.getDuration();
      var progress2 = (segmentEnd - segmentStart) / spectrum.getDuration();
      var minPxDelta = 1 / spectrum.params.pixelRatio;
      var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
      var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta - 3;

      div.style.left = pos + "px";
      div.style.width = pos1 + "px";

      //onClick and onChange action listener
      div.addEventListener("click", changeAnnotationOnClick);


      if ($("#peaks-container").children().hasClass(segmentClass.replace(" ", "-").toString())) {
        if (segmentTitle !== "default" && segmentTitle !== "Singing") {
          div.style.top = "0px";
          $("#peaks-container").append(div);

        } else {
          $("#annotation-div").children().each(function (index, value) {
            if (value.className == segmentClass.replace(" ", "-")) {

              div.style.background = value.style.backgroundColor;
              div.style.bottom = (leftMargin + leftSpeakerCategoryDivMargin * (index)) + "px";
              $("#peaks-container").append(div);

              return false;
            }
          });
        }
      } else if (segmentTitle !== "default" && segmentTitle !== "Singing") {
        div.style.top = "0px";
        $("#peaks-container").append(div);
      }
      else {
        //var topValue=$("#peaks-container").find("."+segmentClass.replace(" ","-")).position().top;
        div.style.bottom = (leftMargin + leftSpeakerCategoryDivMargin * (($("#annotation-div").children("div").length))) + "px";
        $("#peaks-container").append(div);
        topSpeakerDiv(segmentClass, neededColor);
      }
    }//function createDiv end


    var leftSpeakerCategoryDivMargin = 120;
    //function to create top speaker annotation divs
    function topSpeakerDiv(segmentClass = "", neededColor) {
      var totalWidth = 0;

      var totalDivs = 1;//$("#annotation-div").has("div").length

      if ($("#annotation-div").children().hasClass(segmentClass.replace(" ", "-").toString())) {

      } else {
        var div2 = document.createElement("div");
        var p2 = document.createElement("p");
        div2.className = segmentClass.replace(" ", "-");
        div2.style.backgroundColor = neededColor;
        div2.style.border = `2px groove ${neededColor}`;
        div2.style.boxShadow = "0.5px 0.5px 3px";
        p2.innerHTML = segmentClass;
        p2.style.height = "30px";
        p2.style.fontSize = "16px";
        p2.style.margin = "9px";
        div2.style.position = "absolute";
        div2.style.zIndex = "3";
        div2.style.width = "120px";
        div2.style.height = "35px";
        div2.appendChild(p2);
        div2.style.left = ($("#annotation-div").children("div").length) * leftSpeakerCategoryDivMargin + "px";

        if ((($("#annotation-div").children("div").length) * leftSpeakerCategoryDivMargin + leftSpeakerCategoryDivMargin) > $("#annotation-div").width()) {
          leftSpeakerCategoryDivMargin = ($("#annotation-div").width() - leftSpeakerCategoryDivMargin) / $("#annotation-div").children("div").length;
          $("#annotation-div").children().each(function (index, value) {
            this.style.left = (leftSpeakerCategoryDivMargin * index + "px");
            div2.style.left = ($("#annotation-div").children("div").length) * leftSpeakerCategoryDivMargin + "px";
          });
        } else {
          //div2.style.left = ($("#annotation-div").children("div").length) * leftSpeakerCategoryDivMargin + "px";          
        }
        $("#annotation-div").append(div2);
      }

    }

    //function to update Segment Start on start time change
    function updateSegmentonTimeChange() {
      // if (updateSegments) {
      updateAnnotationOnChange = true;
      var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + ($("#annotation-start-milliseconds").val());
      var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + ($("#annotation-end-milliseconds").val());

      if (spectrum.regions.list[currentId] != null) {
        //console.log("Id" + currentId);
        if ((parseFloat(ending) - parseFloat(starting)) < 0.100 && (parseFloat(ending) - parseFloat(starting)) >= 0) {
          spectrum.regions.list[currentId].update({
            start: starting,//-0.050,
            end: parseFloat(ending) + 0.01//+900
          });
          hundredMillisecSegmentCheck = false;
          segmentEndingTimeMoreThanStartingTime = false;
        } else if ((parseFloat(ending) - parseFloat(starting)) < 0) {
          //console.log(ending);
          //console.log(starting);
          spectrum.regions.list[currentId].update({
            end: starting,
            start: ending
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = true;
        } else {
          spectrum.regions.list[currentId].update({
            start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + $("#annotation-start-milliseconds").val(),
            end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + $("#annotation-end-milliseconds").val()
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = false;
        }

        //highlight clicked region
        highlightRegion();

        newStartTime = spectrum.regions.list[currentId].start;
        newEndTime = spectrum.regions.list[currentId].end;
        //console.log(newStartTime);
        var progress1 = newStartTime / spectrum.getDuration();
        var progress2 = (newEndTime - newStartTime) / spectrum.getDuration();
        var minPxDelta = 1 / spectrum.params.pixelRatio;
        var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
        var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;

        if ($("#peaks-container").children().is("#" + currentId)) {
          document.getElementById(currentId).style.left = pos + "px";
          document.getElementById(currentId).style.width = pos1 + "px";
        }

        //Change start and end on change
        segmentStart = spectrum.regions.list[currentId].start;
        segmentEnd = spectrum.regions.list[currentId].end;

        /*if(dragging==true){
          spectrum.regions.list[regionId].update({
             start:currentStartTime,
             end:currentEndTime
          });     
        }*/
      }
      //}
    }//Update Segment On Change End

    $(document).on("mousedown", "wave", function () {
      //console.log("Okay");
    });

    //function for annotation contents change on click
    function changeAnnotationOnClick(evt) {
      //Displaying Annotation Div
      $("#annotation-box").show();
      if (!updateAnnotationOnChange) {
        var clickedId = evt.target.id;
        currentId = evt.target.id;
        //highlight clicked region
        highlightRegion();

        currentStartTime = spectrum.regions.list[currentId].start;
        currentEndTime = spectrum.regions.list[currentId].end;
        //console.log(clickedId);

        //segment start variables
        var startMinute = secondsToMinutes(spectrum.regions.list[currentId].start);
        var startSeconds = secondsToSeconds(spectrum.regions.list[currentId].start);
        var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].start);

        //segment end variables
        var endMinute = secondsToMinutes(spectrum.regions.list[currentId].end);
        var endSeconds = secondsToSeconds(spectrum.regions.list[currentId].end);
        var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].end);

        //displaying texts   
        $("#annotation-start-minute").val(startMinute);
        $("#annotation-start-seconds").val(startSeconds);
        $("#annotation-start-milliseconds").val(startMilliseconds);
        $("#annotation-end-minute").val(endMinute);
        $("#annotation-end-seconds").val(endSeconds);
        $("#annotation-end-milliseconds").val(endMilliseconds);

        if ($("#peaks-container").children().is("#" + clickedId) > 0) {
          var segmentType = document.getElementById(clickedId).title;
          var segmentSpeaker = document.getElementById(clickedId).className.replace("-", " ");
          var segmentText = document.getElementById(clickedId).innerText;
          var divColor = document.getElementById(clickedId).style.background;

          //changing color of Annotation Heading
          $(".annotation-editHeading").css("backgroundColor", divColor);
          if (segmentType !== "default" && segmentType !== "Singing") {
            document.getElementById("transcription-area").style.display = "none";
            document.getElementById("speaker-name").style.display = "none";
            //$("#annotation-box").css("height", 250 + "px");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = "";
            document.getElementById("transcription-area").value = "";
          } else {
            document.getElementById("transcription-area").style.display = "block";
            document.getElementById("speaker-name").style.display = "block";
            //$("#annotation-box").css("height", 32 + "rem");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = segmentSpeaker;
            document.getElementById("transcription-area").value = segmentText;
          }
        }
      }
    }


    //function for annotation contents change on click    
    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area").on("click", function () {
      updateAnnotationOnClick = true;

    });

    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area").on("focusout", function () {
      if (updateAnnotationOnClick) {
        updateAnnotationOnClick = false;
      }
    })

    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area").on("change", function () {
      updateSegmentonTimeChange();
    });

    //function to highlight current region
    function highlightRegion() {
      var highlightId = currentId;
      ////console.log(spectrum.regions.list[highlightId].element);
      //console.log(currentId);
      Object.keys(spectrum.regions.list).forEach(function (id) {
        var region = spectrum.regions.list[id];
        if (region.id == highlightId) {
          //console.log("Here Printing");
          region.element.children[0].style.backgroundColor = "rgba(94, 196, 247,1)";
          region.element.children[1].style.backgroundColor = "rgba(94, 196, 247,1)";
          region.element.style.backgroundColor = "rgba(168,221,227,0.6)";
          if ($("#peaks-container").children().is("#" + highlightId)) {
            //document.getElementById(highlightId).style.opacity = "0.8";
            document.getElementById(highlightId).style.boxShadow = "0.5px 0.5px 3px";
            //$("#annotation-box").show();
          }
        } else {
          region.element.children[0].style.backgroundColor = "rgba(0,0,0,0)";
          region.element.children[1].style.backgroundColor = "rgba(0,0,0,0)";
          region.element.style.backgroundColor = "rgba(0,0,0,0)";
          if ($("#peaks-container").children().is("#" + region.id)) {
            //document.getElementById(region.id).style.opacity = "1"
            document.getElementById(region.id).style.boxShadow = "0.5px 0.5px 3px";
            //$("#annotation-box").show();
          }

        }
      })
    }//Highlight Region End


    //function to save data to database on saveClick
    function saveClick() {

      if (updateSegments == false) {
        segmentStart = spectrum.regions.list[currentId].start;
        segmentEnd = spectrum.regions.list[currentId].end;
        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var val = document.getElementById("annotation-type");
        if (val.value !== "default" && val.value !== "Singing") {
          annotationType = document.getElementById("annotation-type").value;

          speakerName = document.getElementById("annotation-type").value;

          annotationText = val.value;
        } else {
          annotationType = document.getElementById("annotation-type").value;

          speakerName = document.getElementById("speaker-name").value;

          annotationText = $("#transcription-area").val();
        }


        //ajax Request to Create    
        var params = {
          speakerName,
          annotationType,
          segmentStart,
          segmentEnd,
          annotationText,
          user_id,
          audio_id: audio_id
        }
        //console.log(checkOverlappingDiv(speakerName, segmentStart, segmentEnd));
        if (speakerName.length > 0 && hundredMillisecSegmentCheck && !segmentEndingTimeMoreThanStartingTime && spellCheckSpeakerName(speakerName) && (!checkOverlappingDiv(speakerName, segmentStart, segmentEnd))) {
          if (spellCheckSpeakerName(speakerName)) {
            //Var to store id from database
            var segmentIdFromDatabase = 0;

            $.ajax({
              method: "POST",
              url: "/database",
              data: params,
              async: false,
              success: function (response) {
                //console.log("Success");
                segmentIdFromDatabase = response.insertId;
                //console.log(segmentIdFromDatabase);

                $(`region[data-id=${currentId}]`).attr("data-id", segmentIdFromDatabase);
                spectrum.regions.list[currentId].id = segmentIdFromDatabase;
                spectrum.regions.list[segmentIdFromDatabase] = spectrum.regions.list[currentId];
                delete spectrum.regions.list[currentId];
                window.currentId = segmentIdFromDatabase;
                window.segment_id = segmentIdFromDatabase;
              }
            })
            //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
            //createDiv(window.segmentId, speakerName.trimEnd(), annotationType, segmentStart, segmentEnd, annotationText);
            //console.log(segmentIdFromDatabase);
            createDiv(segmentIdFromDatabase, speakerName, annotationType, segmentStart, segmentEnd, annotationText);
            /*Object.keys(spectrum.regions.list).forEach(function (id) {
              var region = spectrum.regions.list[id];
              //console.log(region.id);
              //console.log(currentId);
              if (region.id == currentId) {
                //console.log("Hey Yo");
                spectrum.regions.list[currentId].update({
                  id: segmentIdFromDatabase
                });
                //Setting current Id as id from database
                currentId = segmentIdFromDatabase;
              };
            });*/

            updateAnnotationOnChange = false;
            //console.log(reqSpeakers);
            var append = false;
            if (!reqSpeakers.includes(speakerName) && speakerName.includes("speaker")) {
              //adding to select options
              append = true;

            }
            if (append) {
              $("#select-options").append(`<option value="${speakerName}"/>`);
              reqSpeakers.push(speakerName);
            }

            //Hiding Annotation Div      
            $("#annotation-box").hide();
            //increasing segment Id Value
            //window.segmentId++;
            //setting update segments bool to true to allow updating
            updateSegments = true;
          } else {
            ////console.log(speakerName.trimEnd().split(" ").length);

            emptySpeaker();
          }

        } else {
          if (speakerName.length == 0 || !spellCheckSpeakerName(speakerName)) {
            //console.log("Empty Speaker Name")
            emptySpeaker();
          } else if (!hundredMillisecSegmentCheck) {
            //console.log("Less Than Hundred Milliseconds");
            hundredMillisecondsSegmentGap();
          } else if (segmentEndingTimeMoreThanStartingTime) {
            //console.log("End Time More Than Start Time");
            endTimeMoreThanStartTime();
          } else if ((checkOverlappingDiv(speakerName, segmentStart, segmentEnd))) {
            //console.log("New Div for Overlapping");
            sameSpeakerOverlappingDialougeBox();
          }
        }
      } else if (updateAnnotationOnChange == true) {
        var params;
        //console.log("Old" + currentId);
        //Updating Database        
        var segmentId = currentId;
        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var segmentclass = document.getElementById("speaker-name").value;
        //console.log(segmentclass.replace(" ", "-"));
        var val = document.getElementById("annotation-type");
        if (val.value !== "default" && val.value !== "Singing") {
          document.getElementById(segmentId).style.top = "0px";
          annotationType = document.getElementById("annotation-type").value;
          document.getElementById(segmentId).title = annotationType;
          speakerName = document.getElementById("annotation-type").value;
          document.getElementById(segmentId).className = speakerName;
          annotationText = val.value;
          document.getElementById(segmentId).querySelector("p").innerText = annotationText;
        } else if (segmentclass.length >= 1 && segmentclass.split(" ").length <= 2 && spellCheckSpeakerName(segmentclass)) {
          //checking if speaker is already Available          
          if ($("#annotation-div").children().hasClass(segmentclass.replace(" ", "-"))) {
            $("#annotation-div").children().each(function (index, value) {
              if (value.className == (segmentclass.replace(" ", "-"))) {
                //console.log("old")
                //console.log(value);
                speakerName = document.getElementById("speaker-name").value;
                //console.log("2" + checkOverlappingDiv(speakerName, segmentStart, segmentEnd))
                if (!checkOverlappingDiv(speakerName, newStartTime, newEndTime)) {
                  annotationType = document.getElementById("annotation-type").value;
                  document.getElementById(segmentId).title = annotationType;

                  document.getElementById(segmentId).className = speakerName.replace(" ", "-");
                  annotationText = $("#transcription-area").val();
                  document.getElementById(segmentId).querySelector("p").innerText = annotationText;
                  document.getElementById(segmentId).style.background = value.style.backgroundColor;
                  //400=leftMargin
                  //console.log(((canvasHeight - 8) + leftSpeakerCategoryDivMargin * (index)) + "px");
                  // div.style.bottom = (leftMargin + leftSpeakerCategoryDivMargin * (index)) + "px";
                  document.getElementById(segmentId).style.bottom = ((canvasHeight - 8) + leftSpeakerCategoryDivMargin * (index)) + "px";
                  document.getElementById(segmentId).style.top = "inherit";
                }

              }
            });
          } else {
            //console.log("new");
            var newColor = getRandomColor();
            annotationType = document.getElementById("annotation-type").value;
            document.getElementById(segmentId).title = annotationType;
            speakerName = document.getElementById("speaker-name").value;
            document.getElementById(segmentId).className = speakerName.replace(" ", "-");
            annotationText = $("#transcription-area").val();
            document.getElementById(segmentId).querySelector("p").innerText = annotationText;
            document.getElementById(segmentId).style.background = newColor;
            //400=leftMargin
            document.getElementById(segmentId).style.bottom = ((canvasHeight - 8) + leftSpeakerCategoryDivMargin * (($("#annotation-div").children("div").length))) + "px";
            topSpeakerDiv(speakerName, newColor);
          }
        } else if (segmentclass.length == 0 || segmentclass.split(" ").length > 2 || spellCheckSpeakerName(segmentclass)) {
          //console.log("Speaker Name not found");
          //console.log(speakerName);
          emptySpeaker();
        }

        //Checking correct speaker name
        spellCheckSpeakerName(speakerName);

        //ajax Request To Update
        if (updateAnnotationOnChange) {
          params = {
            segmentId,
            speakerName,
            annotationType,
            segmentStart: newStartTime,
            segmentEnd: newEndTime,
            annotationText,
            user_id,
            audio_id: audio_id
          }
        } else {
          params = {
            segmentId,
            speakerName,
            annotationType,
            segmentStart,
            segmentEnd,
            annotationText,
            user_id,
            audio_id: audio_id
          }
        }


        //console.log("20");
        //console.log(checkOverlappingDiv(speakerName, newStartTime, newEndTime));
        if (speakerName.length > 0 && hundredMillisecSegmentCheck && !segmentEndingTimeMoreThanStartingTime && spellCheckSpeakerName(speakerName) && !checkOverlappingDiv(speakerName, newStartTime, newEndTime)) {
          //console.log("Update vairako");
          $.ajax({
            method: "POST",
            url: "/updatedatabase",
            data: params,
            success: function () {
              //console.log("Updated");

            }
          })
          //Hiding Annotation Div      
          $("#annotation-box").hide();
          updateAnnotationOnChange = false;
          updateAnnotationOnClick = false;

        } else {
          //console.log(speakerName);
          //console.log("annotation ma ya aako ho?");
          if (speakerName.length < 0 || !spellCheckSpeakerName(speakerName)) {
            emptySpeaker();
          } else if (!hundredMillisecSegmentCheck) {
            //console.log("Less Than Hundred Milliseconds");
            hundredMillisecondsSegmentGap();
          } else if (segmentEndingTimeMoreThanStartingTime) {
            //console.log("End Time More Than Start Time");
            endTimeMoreThanStartTime();
          } else if (checkOverlappingDiv(speakerName, newStartTime, newEndTime)) {
            //console.log("Overlapping Speakser");
            sameSpeakerOverlappingDialougeBox();
          }
        }
      }
    }

    //function for ctrl+singlequote for region end time
    function ctrlquote(currentregionId) {
      $("html").on("keydown", function (event) {
        if (event.ctrlKey && event.which == 222) {
          //console.log("Pressed");
          var currentTime = spectrum.getCurrentTime();
          updateAnnotationOnChange = true;
          updateAnnotationOnClick = true;
          //segment end variables
          var endMinute = secondsToMinutes(currentTime);
          var endSeconds = secondsToSeconds(currentTime);
          var endMilliseconds = secondsToMilliseconds(currentTime);

          //displaying texts          
          $("#annotation-end-minute").val(endMinute);
          $("#annotation-end-seconds").val(endSeconds);
          $("#annotation-end-milliseconds").val(endMilliseconds);


          var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + ($("#annotation-start-milliseconds").val());
          var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + ($("#annotation-end-milliseconds").val());

          createSegments(currentId, starting, ending);

        }
      });
    }

    //function for ctrl+singlequote for region start time
    function ctrlcolon(currentregionId) {
      $("html").on("keydown", function (event) {
        if (event.ctrlKey && event.which == 186) {
          //console.log("Pressed");
          var currentTime = spectrum.getCurrentTime();
          updateAnnotationOnChange = true;
          updateAnnotationOnClick = true;
          //segment end variables
          //segment start variables
          var startMinute = secondsToMinutes(currentTime);
          var startSeconds = secondsToSeconds(currentTime);
          var startMilliseconds = secondsToMilliseconds(currentTime);


          //displaying texts          
          $("#annotation-start-minute").val(startMinute);
          $("#annotation-start-seconds").val(startSeconds);
          $("#annotation-start-milliseconds").val(startMilliseconds);

          var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + ($("#annotation-start-milliseconds").val());
          var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + ($("#annotation-end-milliseconds").val());

          //Create Segments function call
          createSegments(currentId, starting, ending);
        }
      });
    }

    //Add New Region
    function addRegion() {

      //show annotation box
      $("#annotation-box").show();
      //boolean to whether update database or create new data in database
      if (addRegionBool == true) {

        if (!updateAnnotationOnChange) {
          renew();
          updateSegments = false;
          addRegionBool = false;
          segmentEnd = spectrum.getCurrentTime();
          if ((spectrum.getCurrentTime() - 2) < 0) {
            segmentStart = 0;
          } else {
            segmentStart = segmentEnd - 2;
          }
          spectrum.addRegion({
            id: segmentId,
            start: segmentStart,
            end: segmentEnd,
            drag: false,
            color: "rgba(0,0,0,0)"
          })
          currentId = segmentId;
          //highlighting current Region
          highlightRegion();

          //segment start variables
          var startMinute = secondsToMinutes(spectrum.regions.list[currentId].start);
          var startSeconds = secondsToSeconds(spectrum.regions.list[currentId].start);
          var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].start);

          //segment end variables
          var endMinute = secondsToMinutes(spectrum.regions.list[currentId].end);
          var endSeconds = secondsToSeconds(spectrum.regions.list[currentId].end);
          var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].end);

          //displaying texts   
          $("#annotation-start-minute").val(startMinute);
          $("#annotation-start-seconds").val(startSeconds);
          $("#annotation-start-milliseconds").val(startMilliseconds);
          $("#annotation-end-minute").val(endMinute);
          $("#annotation-end-seconds").val(endSeconds);
          $("#annotation-end-milliseconds").val(endMilliseconds);
        }
      } else {
        if (!updateAnnotationOnChange) {
          spectrum.regions.list[segmentId].remove();
          updateSegments = true;
          addRegionBool = true;
          addRegion();
        }
      }

      spectrum.on("seek", function () {
        if (!updateAnnotationOnChange && !updateAnnotationOnClick && spectrum.regions.list[segmentId] != null) {
          spectrum.regions.list[segmentId].remove();
          updateSegments = true;
          addRegionBool = true;
        }
      })
    }//function addRegion end

    //function to repeat a region
    function repeatRegion() {
      if (spectrum.regions.list[currentId] != null) {
        spectrum.regions.list[currentId].play();
        highlightRegion();
      }
    }//function repeatRegion End

    //function to renew annotation
    function renew() {
      $("#annotation-type").val("default");
      $("#speaker-name").val("");
      $("#transcription-area").val("");
      document.getElementById("transcription-area").style.display = "block";
      document.getElementById("speaker-name").style.display = "block";
      //$("#annotation-box").css("height", 32 + "rem");
    }

    $("#repeat-button").on("click", function () {
      repeatRegion();
    })

    //function for playback 
    $("#play_back_rate").on("click", function () {
      var rate = document.getElementById("play_back_rate").value.split("x");
      //console.log(parseFloat(rate));
      playBackRate(parseFloat(rate));
    })

    //function for playBackRate
    function playBackRate(rate) {
      spectrum.setPlaybackRate(rate);
    }//function for playBackRate End

    //function for split
    function splitRegion(textBeforeCursor = "", textAfterCursor = "") {
      var spectrumCurrentTime = spectrum.getCurrentTime();
      var regionStartTime = spectrum.regions.list[currentId].start;
      var regionEndTime = spectrum.regions.list[currentId].end;
      var prevDivTitle = document.getElementById(currentId).title;
      var prevDivClassName = document.getElementById(currentId).className.replace("-", " ");
      var segmentText = document.getElementById(currentId).innerText;
      var preDivColor = document.getElementById(currentId).style.background;

      //updating Previous Region
      if (spectrum.regions.list[currentId] != null) {
        spectrum.regions.list[currentId].update({
          start: regionStartTime,
          end: spectrumCurrentTime - 0.01
        });
      }

      //updating previous div     
      var progress2 = ((spectrumCurrentTime - 0.10) - regionStartTime) / spectrum.getDuration();
      var minPxDelta = 1 / spectrum.params.pixelRatio;
      var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;
      if ($("#peaks-container").children().is("#" + currentId)) {
        document.getElementById(currentId).style.width = pos1 + "px";
      }

      //creating new Segments 
      spectrum.addRegion({
        id: segmentId++,
        start: spectrumCurrentTime + 0.010,
        end: regionEndTime,
        drag: false,
        color: "rgba(0,0,0,0)"
      })

      //previous Div text 
      document.getElementById(currentId).querySelector("p").innerText = textBeforeCursor;

      //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
      createDiv(segmentId - 1, prevDivClassName, prevDivTitle, spectrumCurrentTime, regionEndTime, textAfterCursor);

      //ajax Request to Update Previous Division 
      var updateParams = {
        segmentId: currentId,
        speakerName: prevDivClassName,
        annotationType: prevDivTitle,
        segmentStart: regionStartTime,
        segmentEnd: spectrumCurrentTime - 0.010,
        annotationText: textBeforeCursor,
        user_id,
        audio_id: audio_id
      }

      $.ajax({
        method: "POST",
        url: "/update-on-split",
        data: updateParams,
        success: function () {
          //console.log("Updated");
        }
      })

      //ajax Request to Create new row for splitted Div 
      var params = {
        speakerName: prevDivClassName,
        annotationType: prevDivTitle,
        segmentStart: spectrumCurrentTime + 0.010,
        segmentEnd: regionEndTime,
        annotationText: textAfterCursor,
        user_id,
        audio_id: audio_id
      }

      $.ajax({
        method: "POST",
        url: "/database",
        data: params,
        success: function () {
          //console.log("Success");
        }
      })
    }

    $("#annotation-split").on("click", function () {
      //Split test

      var firstLength = ($("#transcription-area").prop("selectionStart"));
      var reqText = $("#transcription-area").val();
      var textBeforeCursor = reqText.substring(0, firstLength);
      var textAfterCursor = reqText.substring(firstLength, reqText.length);
      //console.log(reqText.substring(0, firstLength));
      //console.log(reqText.substring(firstLength, reqText.length));

      splitRegion(textBeforeCursor, textAfterCursor);
      updateAnnotationOnChange = false;
      updateAnnotationOnClick = false;
    })

    //function for confirming changes on close click
    function discardChanges() {
      //Hiding Annotation Div      
      $("#annotation-box").hide();
      updateAnnotationOnChange = false;
      if ($("#peaks-container").children().is("#" + currentId)) {
        spectrum.regions.list[currentId].update({
          start: currentStartTime,
          end: currentEndTime
        });

        //segment start variables
        var startMinute = secondsToMinutes(spectrum.regions.list[currentId].start);
        var startSeconds = secondsToSeconds(spectrum.regions.list[currentId].start);
        var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].start);

        //segment end variables
        var endMinute = secondsToMinutes(spectrum.regions.list[currentId].end);
        var endSeconds = secondsToSeconds(spectrum.regions.list[currentId].end);
        var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].end);

        //displaying texts   
        $("#annotation-start-minute").val(startMinute);
        $("#annotation-start-seconds").val(startSeconds);
        $("#annotation-start-milliseconds").val(startMilliseconds);
        $("#annotation-end-minute").val(endMinute);
        $("#annotation-end-seconds").val(endSeconds);
        $("#annotation-end-milliseconds").val(endMilliseconds);

        var progress1 = currentStartTime / spectrum.getDuration();
        var progress2 = (currentEndTime - currentStartTime) / spectrum.getDuration();
        var minPxDelta = 1 / spectrum.params.pixelRatio;
        var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
        var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;

        document.getElementById(currentId).style.left = pos + "px";
        document.getElementById(currentId).style.width = pos1 + "px";

      } else {
        if (spectrum.regions.list[currentId]) {
          spectrum.regions.list[currentId].remove();
          //updateAnnotationOnChange = false;
        }
      }
    }


    //Function to create a cancel confirm Dialogue Box
    function confirmDialogue() {
      $("#confirmation-box").show();
      $("body").not("#confirmation-box").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for confirm click 
    $(".confirm-changes").on("click", function () {
      discardChanges();
      addRegionBool = true;
      confirmChangesboxBool = false;
      $("#confirmation-box").hide();
      $("body").css({
        backgroundColor: "#fff",
        opacity: "1"
      })
    });

    //function to deny changes on close click
    $(".discard-changes").on("click", function () {
      updateAnnotationOnChange = true;
      confirmChangesboxBool = false;
      $("#confirmation-box").hide();
      $("#empty-speaker").hide();
      $("#hundredMilliseconds-gap").hide();
      $("#endTime-moreThanStartTime").hide();
      $("#sameSpeaker-Overlapping").hide();
      $("#error-guided-audio").hide();
      $("body").css({
        backgroundColor: "#fff",
        opacity: "1"
      })
    });

    //function for take test ok button
    $(".take-test-error").on("click", function () {
      confirmChangesboxBool = false;
      $("#confirmation-box").hide();
      $("#empty-speaker").hide();
      $("#hundredMilliseconds-gap").hide();
      $("#endTime-moreThanStartTime").hide();
      $("#sameSpeaker-Overlapping").hide();
      $("#error-guided-audio").hide();
      $("body").css({
        backgroundColor: "#fff",
        opacity: "1"
      })
    });

    //function for guidelines Box
    $("#help-icon").on("click", function () {
      displayGuideLines();
    });

    $("#close-guidelines").on("click", function () {
      $("#guidelines-box").hide();
      $("body").css({
        backgroundColor: "#fff",
        opacity: "1"
      })
    })

    function displayGuideLines() {
      $("#guidelines-box").show();
      $("body").not("#guidelines-box").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      });
    }

    //Function for empty speaker Dialogue Box
    function emptySpeaker() {
      $("#empty-speaker").show();
      $("body").not("#empty-speaker").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for hundredMillisecondsSegmentCheck
    function hundredMillisecondsSegmentGap() {
      $("#hundredMilliseconds-gap").show();
      $("body").not("#hundredMilliseconds-gap").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for Segment End Time More than Start Time
    function endTimeMoreThanStartTime() {
      $("#endTime-moreThanStartTime").show();
      $("body").not("#endTime-moreThanStartTime").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for same Overlapping Speaker Dialogue Box
    function sameSpeakerOverlappingDialougeBox() {
      $("#sameSpeaker-Overlapping").show();
      $("body").not("#sameSpeaker-Overlapping").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function to check and create segments
    function createSegments(currentId, starting, ending) {
      if (spectrum.regions.list[currentId] != null) {
        //console.log("Id" + currentId);
        if ((parseFloat(ending) - parseFloat(starting)) < 0.100 && (parseFloat(ending) - parseFloat(starting)) >= 0) {
          spectrum.regions.list[currentId].update({
            start: starting,
            end: parseFloat(ending) + 0.01
          });
          hundredMillisecSegmentCheck = false;
          segmentEndingTimeMoreThanStartingTime = false;
        } else if ((parseFloat(ending) - parseFloat(starting)) < 0) {
          spectrum.regions.list[currentId].update({
            end: starting,
            start: ending
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = true;
        } else {
          spectrum.regions.list[currentId].update({
            start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + $("#annotation-start-milliseconds").val(),
            end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + $("#annotation-end-milliseconds").val()
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = false;
        }
      }

      //highlight clicked region
      highlightRegion();

      newStartTime = spectrum.regions.list[currentId].start;
      newEndTime = spectrum.regions.list[currentId].end;
      //console.log(newStartTime);
      var progress1 = newStartTime / spectrum.getDuration();
      var progress2 = (newEndTime - newStartTime) / spectrum.getDuration();
      var minPxDelta = 1 / spectrum.params.pixelRatio;
      var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
      var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;
      if ($("#peaks-container").children().is("#" + currentId)) {
        document.getElementById(currentId).style.left = pos + "px";
        document.getElementById(currentId).style.width = pos1 + "px";
      }
    }

    //Function to Check correct speakername
    function spellCheckSpeakerName(speakerName) {
      var splitSpeakerName = speakerName.split(" ");
      if (splitSpeakerName[0] != "speaker") {
        if (splitSpeakerName[0] == "DTMF" || splitSpeakerName[0] == "Applause" || splitSpeakerName[0] == "Laughter" || splitSpeakerName[0] == "Music" || splitSpeakerName[0] == "Noise" || splitSpeakerName[0] == "Ringtone") {
          return true;
        }
        return false;
      }
      if (isNaN(splitSpeakerName[1])) {
        if (splitSpeakerName.length == 2 || splitSpeakerName.length == 3) {
          if (splitSpeakerName.length == 3) {
            if (!isCamelCase(splitSpeakerName[2])) {
              return false;
            }
          }
          if (!isCamelCase(splitSpeakerName[1])) {
            return false;
          }
        }
        else {
          return false;
        }
      } else {
        if (splitSpeakerName.length != 2) {
          return false;
        }
        if (isNaN(splitSpeakerName[1])) {
          return false;
        }
      }
      return true;
    }
    function isCamelCase(str) {
      var regexp = /^[A-Z][a-z]*$/;
      return regexp.test(str)
    }

    //function to check same overlapping div
    function checkOverlappingDiv(speakerName, segmentStart, segmentEnd) {
      console.trace(1);
      var overlapping = false;
      //checking same speaker in same time when updating previous segments
      var sameSpeakerParams = {
        user_id,
        speakerName
      }
      /*
      $.ajax({
        method: "POST",
        url: "/get-segments-with-same-speaker",
        data: sameSpeakerParams,
        async: false,
        success: function (response) {
          //console.log(response);
          for (var i = 0; i < response.length; i++) {
            
            if ((segmentStart > previousSpeakerStart && segmentStart < previousSpeakerEnd) ||
              segmentEnd > previousSpeakerStart && segmentEnd < previousSpeakerEnd) {
              return true;
              break;
            }
          }
        }
      });*/
      var totalRegions = Object.keys(spectrum.regions.list);
      Object.keys(spectrum.regions.list).forEach(function (region) {
        var previousSpeakerStart = spectrum.regions.list[region].start;
        var previousSpeakerEnd = spectrum.regions.list[region].end;
        
        //|| (segmentStart == previousSpeakerStart && segmentEnd == previousSpeakerEnd)
        if ((segmentStart > previousSpeakerStart && segmentStart < previousSpeakerEnd) || //(segmentStart == previousSpeakerStart && segmentEnd == previousSpeakerEnd)||
          (segmentEnd > previousSpeakerStart && segmentEnd < previousSpeakerEnd) || (previousSpeakerStart > segmentStart && previousSpeakerStart < segmentEnd)) {
          
          if (speakerName != "DTMF" && speakerName != "Applause" && speakerName != "Laughter" && speakerName != "Music" && speakerName != "Noise" && speakerName != "Ringtone") {
            if(document.getElementById(region)!=null){
              var previousSpeakerName = document.getElementById(region).className;  
            }
            //var previousSpeakerName = document.getElementById(region).className;
            if (previousSpeakerName == speakerName.replace(/ /g, "-")) {
              ////console.log("herer2")
              overlapping = true;
            }
          }
        }
      });
      return overlapping;
    }


    //function for promises and ajax request on submit
    function ajaxReq() {
      var promise = new Promise((resolve, reject) => {

        $.ajax({
          method: "POST",
          url: "/get-reviews",
          async: false,
          success: function (actualResponse) {
            actualResponseLength = actualResponse.length;
            //console.log(actualResponse);
            ////console.log(response[0]["segment_id"]);
            for (var i = 0; i < actualResponse.length; i++) {
              //variables to store minimum value and minimum difference
              var minStartValue = 0;
              var minEndValue = 0;
              var minDifference = 5;
              var nearestStartSegment = 20;
              var nearestStartSegment = 20;
              //console.log("Actual Data");


              var actualsegmentId = actualResponse[i]["segment_id"];
              var actualspeakerName = actualResponse[i]["div_className"];
              var actualannotationType = actualResponse[i]["div_title"];
              var actualsegmentStart = actualResponse[i]["segment_start"];
              var actualsegmentEnd = actualResponse[i]["segment_end"];
              var actualannotationText = actualResponse[i]["annotation_text"];
              //console.log(actualsegmentId + " " + i);
              var color = "";
              $.ajax({
                method: "POST",
                url: "/get-segments",
                data: { user_id: user_id },
                async: false,
                success: function (postResponse) {
                  postsResponseLength = postResponse.length;
                  for (var j = 0; j < postResponse.length; j++) {
                    var postssegmentId = postResponse[j]["segment_id"];
                    var postsspeakerName = postResponse[j]["div_className"];
                    var postsannotationType = postResponse[j]["div_title"];
                    var postssegmentStart = postResponse[j]["segment_start"];
                    var postssegmentEnd = postResponse[j]["segment_end"];
                    var postsannotationText = postResponse[j]["annotation_text"];
                    ////console.log(postssegmentId + " " + j );
                    // //console.log(actualspeakerName);
                    // //console.log(postsspeakerName);

                    if (Math.abs(actualsegmentStart - postssegmentStart) < minDifference) {
                      minDifference = Math.abs(actualsegmentStart - postssegmentStart);
                      nearestStartSegment = Math.abs(actualsegmentStart - postssegmentStart);
                      nearestEndSegment = Math.abs(actualsegmentStart - postssegmentStart);
                      minStartValue = postssegmentStart;
                      minEndValue = postssegmentEnd;
                    }
                    ////console.log("a" + parseFloat(minStartValue));
                    ////console.log("b" + parseFloat(minEndValue));
                    ////console.log("c" + parseFloat(actualsegmentStart));

                    ////console.log("d" + parseFloat(actualsegmentEnd));
                    if ((parseFloat(actualsegmentStart) - parseFloat(postssegmentStart) <= (0.003)) && (parseFloat(actualsegmentStart) - parseFloat(postssegmentStart) >= 0) && (parseFloat(actualsegmentEnd) - parseFloat(postssegmentEnd) <= 0.003) && (parseFloat(actualsegmentEnd) - parseFloat(postssegmentEnd) >= 0) && ((actualspeakerName == postsspeakerName)) && actualannotationType == "default") {
                      //Correct Segment Created
                      correctSegmentCreated = true;
                      //console.log("c" + parseFloat(actualsegmentStart));
                      //console.log(actualspeakerName);
                      //console.log(postsspeakerName);
                      break;
                    } else if ((parseFloat(actualsegmentStart) - parseFloat(postssegmentStart) <= 0.005) && (parseFloat(actualsegmentStart) - parseFloat(postssegmentStart) >= 0) && (parseFloat(actualsegmentEnd) - parseFloat(postssegmentEnd) <= 0.005) && (parseFloat(actualsegmentEnd) - parseFloat(minEndValue) >= 0) && ((actualspeakerName == postsspeakerName)) && actualannotationType != "default") {
                      //Correct Segment Created
                      //console.log(actualspeakerName);
                      //console.log("c" + parseFloat(actualsegmentStart));
                      //console.log(postsspeakerName);
                      correctSegmentCreated = true;
                      break;
                    } else {
                      //Incorrect Segment Created
                      /*
                         if ((parseFloat(actualsegmentStart) - parseFloat(minStartValue) >= parseFloat(0.03)) && (parseFloat(actualsegmentEnd) - parseFloat(minEndValue) >= 0.03) && ((actualspeakerName == postsspeakerName))) {
                                              scoresForWrongSegments += 1;
                                              //console.log("a" + parseFloat(minStartValue));
                                              //console.log("c" + parseFloat(actualsegmentStart));
                                              //console.log("minDiff " + parseFloat(minDifference));
                                              //console.log("score More" + scoresForWrongSegments);
                                            }
                                            if ((parseFloat(actualsegmentStart) - parseFloat(minStartValue) <= parseFloat(0.03)) && (parseFloat(actualsegmentStart) - parseFloat(minStartValue) >= 0) && (parseFloat(actualsegmentEnd) - parseFloat(minEndValue) <= 0.03) && (parseFloat(actualsegmentEnd) - parseFloat(minEndValue) >= 0) && ((actualspeakerName != postsspeakerName))) {
                                              scoresForWrongSegments += 1;
                                              //console.log("a" + parseFloat(minStartValue));
                                              //console.log("c" + parseFloat(actualsegmentStart));
                                              //console.log("score Less" + scoresForWrongSegments);
                                            }
                      */
                      if ((parseFloat(actualsegmentStart) - parseFloat(postssegmentStart) <= 0.005) && (parseFloat(actualsegmentStart) - parseFloat(postssegmentStart) >= 0) && (parseFloat(actualsegmentEnd) - parseFloat(postssegmentEnd) <= 0.005) && (parseFloat(actualsegmentEnd) - parseFloat(postssegmentEnd) >= 0) && ((actualspeakerName != postsspeakerName)) && actualannotationType != "default") {
                        scoresForWrongSegments += 1;
                        wrongAnnotationScore += 1;
                        //console.log("score Incorrect Annotation " + wrongAnnotationScore);
                        //console.log(postsspeakerName);
                        //console.log(actualspeakerName);
                      }
                      if ((parseFloat(actualsegmentStart) - parseFloat(postssegmentStart) <= 0.005) && (parseFloat(actualsegmentStart) - parseFloat(postssegmentStart) >= 0) && (parseFloat(actualsegmentEnd) - parseFloat(postssegmentEnd) <= 0.005) && (parseFloat(actualsegmentEnd) - parseFloat(postssegmentEnd) >= 0) && ((actualspeakerName != postsspeakerName)) && actualannotationType == "default") {
                        scoresForWrongSegments += 1;
                        wrongSpeakerScore += 1;
                        //console.log("score Speaker Incorrect " + wrongSpeakerScore);
                        //console.log(postsspeakerName);
                        //console.log(actualspeakerName);
                      }
                      //Incorrect Segement created
                      correctSegmentCreated = false;
                    }
                  }
                  //console.log(correctSegmentCreated);

                  //creating Segments 
                  spectrum.addRegion({
                    id: actualsegmentId + 100000,
                    start: actualsegmentStart,
                    end: actualsegmentEnd,
                    drag: false,
                    color: "rgba(0,0,0,0)"
                  })

                  //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
                  createDiv(actualsegmentId + 100000, actualspeakerName, actualannotationType, actualsegmentStart, actualsegmentEnd, "", true);
                  resolve();
                }
              });
            }
            unnecessarySegmentsErrors += (Math.abs(actualResponseLength - postsResponseLength)) * 2;
            scoresForWrongSegments = scoresForWrongSegments + unnecessarySegmentsErrors;
            //console.log("Total Score " + (100 - scoresForWrongSegments));
            //Disallowing Clicking and Changing Values if the Submit request was successful
            //console.log("Submit Clicked");
            $(".disable-all-on-Submit").prop('disabled', true);
            $(".disable-all-on-Submit").css({ "cursor": "not-allowed" });
          }
        })
      });//promise handle
    }//ajax Req Function End

    //Function to Display Errors and hamburger icons
    function displayHamburger() {
      $("#errorToggle").show();
      $("#speaker-labelling-error").text(`Speaker Labelling Error: ` + wrongSpeakerScore);
      $("#annotation-labelling-error").text(`Annotation Labelling Error: ` + wrongAnnotationScore);
      $("#unnecessary-segments-errors").text(`Unnecessary Segments Error: ` + unnecessarySegmentsErrors);
      $("#total-errors").text(`Your Overall Score: ${100 - scoresForWrongSegments}%`);
    }
    //function to display Errors Menu
    $("#displayErrorCB").on("click", function () {
      var isChecked = $("#displayErrorCB").is(":checked");
      //console.log($("#displayErrorCB").is(":checked"));
      if (!$("#displayErrorCB").is(":checked")) {
        $("#errorMenu").not(".showHamburger").show();
        $(".showHamburger").hide();
        $("#closeHamburger").show();
      } else {
        $("#errorMenu").hide();
        $(".showHamburger").show();
        $("#closeHamburger").hide();
      }
    });

    //Function to call on submit click
    $("#submit-button").on("click", function () {
      //submitClick();      
      ajaxReq();
      displayHamburger();
    });

    //function to display current div content in annotation box
    function displayCurrentContents() {
      if (spectrum.regions.getCurrentRegion() != null && !updateAnnotationOnChange && !updateAnnotationOnClick) {
        $("#annotation-box").show();
        var segmentId = spectrum.regions.getCurrentRegion().id;
        currentId = spectrum.regions.getCurrentRegion().id;
        //console.log(currentId);
        //console.log(segmentId);
        //highlight current region
        highlightRegion();

        //segment start variables
        var startMinute = secondsToMinutes(spectrum.regions.getCurrentRegion().start);
        var startSeconds = secondsToSeconds(spectrum.regions.getCurrentRegion().start);
        var startMilliseconds = secondsToMilliseconds(spectrum.regions.getCurrentRegion().start);
        currentStartTime = spectrum.regions.getCurrentRegion().start

        //segment end variables
        var endMinute = secondsToMinutes(spectrum.regions.getCurrentRegion().end);
        var endSeconds = secondsToSeconds(spectrum.regions.getCurrentRegion().end);
        var endMilliseconds = secondsToMilliseconds(spectrum.regions.getCurrentRegion().end);
        currentEndTime = spectrum.regions.getCurrentRegion().end;

        //displaying texts   
        $("#annotation-start-minute").val(startMinute);
        $("#annotation-start-seconds").val(startSeconds);
        $("#annotation-start-milliseconds").val(startMilliseconds);
        $("#annotation-end-minute").val(endMinute);
        $("#annotation-end-seconds").val(endSeconds);
        $("#annotation-end-milliseconds").val(endMilliseconds);

        //($("#peaks-container").children().is(`#${segmentId}`) > 0)
        if ($("#peaks-container").children().is(`#${segmentId}`) > 0) {
          var segmentType = document.getElementById(segmentId).title;
          var segmentSpeaker = document.getElementById(segmentId).className.replace("-", " ");
          var segmentText = document.getElementById(segmentId).innerText;
          var divColor = document.getElementById(segmentId).style.background;

          //changing color of Annotation Heading
          $(".annotation-editHeading").css("backgroundColor", divColor);
          if (segmentType !== "default" && segmentType !== "Singing") {
            document.getElementById("transcription-area").style.display = "none";
            document.getElementById("speaker-name").style.display = "none";
            //$("#annotation-box").css("height", 250 + "px");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = "";
            document.getElementById("transcription-area").value = "";
          } else {
            document.getElementById("transcription-area").style.display = "block";
            document.getElementById("speaker-name").style.display = "block";
            //$("#annotation-box").css("height", 32 + "rem");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = segmentSpeaker;
            document.getElementById("transcription-area").value = segmentText;
          }
        }
      }
    }
  </script>

</body>

</html>
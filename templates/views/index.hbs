<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <meta charset="utf-8">
  <title></title>
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <style>
    body {
      overflow: hidden;
      margin-top: -10px;
    }

    #v-container {
      margin-top: -50vh;
    }

    #header {}

    #time-line {
      /*transform: translate(0px,1040px);*/
    }

    #plus-button {
      margin-top: 60vh;
      margin-left: 56vw;
      position: fixed;
      z-index: 3;
      font-size: 16px;
      color: #fff;
      border: none;
      border-radius: 70%;
      width: 45px;
      height: 45px;
      background-color: #2f84ba;
    }

    #top-block {
      position: fixed;
      width: 100%;
      opacity: 1;
      margin-top: 50px;
      z-index: 99;
      background: #fff;
      border-bottom: 3px groove #888888;
    }

    #annotation-div-head {
      box-shadow: 4px 4px 4px #888888;
      left: 10vw;
      top: 15vh;
      width: 50vw;
      position: fixed;
      opacity: 1;
      z-index: 99;
      height: 40px;
    }

    #annotation-div {
      position: relative;
      opacity: 1;
      z-index: 999;
      height: 35px;
    }

    #wave-container {
      display: fixed;
      height: 50vh;
    }

    #peaks-container {
      transform: translateX(0%) rotate(90deg);
      transform-origin: bottom left;
      overflow: auto;
      position: relative;
      width: calc(214 * 96px);
    }

    #annotation-box {
      box-shadow: 4px 4px 4px #888888;
      margin-left: 65vw;
      margin-top: 250px;
      border: 1px solid grey;
      /*width: 350px;*/
      height: 500px;
      position: fixed;
      z-index: 3;
    }

    #close {
      position: relative;
      cursor: pointer;
      font-size: 34px;
      font-weight: 300;
      /*margin-left: 9vw;*/
      float: right;
      margin-right: 12px;
    }

    .annotation-time-class {
      font-size: 24px;
      font-weight: 520;
      padding-left: 5px;
      width: 30px;
      border: none;
    }

    .annotation-time-ms-class {
      font-size: 24px;
      font-weight: 520;
      padding-left: 5px;
      width: 40px;
      border: none;
    }

    #annotation-type {
      width: 350px;
      height: 50px;
      margin: 10px;
      border-radius: 15px;
      cursor: pointer;
    }

    .annotation-selection {
      font-size: 20px;
      padding: 10px;
    }

    #speaker-name {
      width: 325px;
      height: 25px;
      margin: 10px;
      border-radius: 15px;
    }

    .speaker-type {
      font-size: 20px;
      padding: 10px;
    }

    #transcription-area {
      width: 320px;
      margin: 10px;
      border-radius: 15px;
      padding: 10px;
      font-size: 16px;
      font-family: Arial, Helvetica, sans-serif;
    }

    .annotation-time-class:invalid {
      color: red;
    }

    .annotation-time-ms-class:invalid {
      color: red;
    }

    /* Chrome, Safari, Edge, Opera */
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    /* Firefox */
    input[type=number] {
      -moz-appearance: textfield;
    }
  </style>
</head>

<body>
  <div id="header">
    {{>header}}
  </div>
  <div id="top-block">
    <div id="button">
      <a class="btn" id="play-button" href="#">
        <i class="fa fa-play" style="color:grey;font-size:30px"></i></a>
    </div>
    <div id="time">
      <h2 id="start-timestamp" style="margin-right:10px"></h2>
      <h3 id="total-timestamp">00:00.000</h3>
    </div>
  </div>
  <div id="annotation-div-head">
    <div id="annotation-div">

    </div>
  </div>
  <button id="plus-button">
    <i class="fa fa-plus"></i>
  </button>
  <div id="v-container">
    <div id="wave-container">
      <div id="peaks-container">
        <div id="time-line">
        </div>
      </div>
    </div>
  </div>

  <div id="annotation-box">
    <div class="annotation-editHeading" style=" background-color:#ffb570 ; height: 50px; ">
      <p style="padding-left: 20px; font-size: 20px; margin:auto"> Edit Annotation <span id="close"
          onclick="cancel()">x</span></p>
    </div>
    <div id="annotation-time">
      <button id="repeat-button" style=" margin-left: 7px; border:none; background: none;"><i class="fa fa-repeat"
          style=" color:black;font-size:16px;cursor:pointer;"></i> </button>
      <span id="annotation-start" style="font-size: 16px;font-weight: 600;">
        <input id="annotation-start-minute" class="annotation-time-class" type="number" min="0" max="59" onclick=""
          onchange="updateSegmentonTimeChange()" value="00">
        :
        <input id="annotation-start-seconds" class="annotation-time-class" type="number" min="0" max="59" oninput=""
          onchange="updateSegmentonTimeChange()" value="00">
        .
        <input id="annotation-start-milliseconds" class="annotation-time-ms-class" type="number" min="0" max="999"
          oninput="" onchange="updateSegmentonTimeChange()" value="000">
      </span>
      <span style="font-size: 40px;">-</span>
      <span id="annotation-end" style="font-size: 16px;font-weight: 600;">
        <input id="annotation-end-minute" class="annotation-time-class" type="number" min="0" max="59" oninput=""
          onchange="updateSegmentonTimeChange()" value="00">
        :
        <input id="annotation-end-seconds" class="annotation-time-class" type="number" min="0" max="59" oninput=""
          onchange="updateSegmentonTimeChange()" value="00">
        .
        <input id="annotation-end-milliseconds" class="annotation-time-ms-class" type="number" min="0" max="999"
          oninput="" onchange="updateSegmentonTimeChange()" value="000">
      </span>
    </div>

    <div>
      <select id="annotation-type" onchange="displayArea()" style="z-index: 3;font-size: 18px; padding: 10px;">
        <option value="default" class="annotation-selections" selected="selected"></option>
        <option value="Singing" class="annotation-selections">Singing</option>
        <option value="Applause" class="annotation-selections">Applause</option>
        <option value="DTMF" class="annotation-selections">DTMF</option>
        <option value="Laughter" class="annotation-selections">Laughter</option>
        <option value="Music" class="annotation-selections">Music</option>
        <option value="Noise" class="annotation-selections">Noise</option>
        <option value="Ringtone" class="annotation-selections">Ringtone</option>
      </select>
    </div>
    <div id="speaker">
      <input id="speaker-name" placeholder="Select or enter a new speaker" type="text" list="select-options"
        style="z-index: 3;font-size: 18px; padding: 10px;">
      <datalist id="select-options">

      </datalist>
    </div>
    <div>
      <textarea id="transcription-area" rows="8"></textarea>
    </div>

    <hr style="opacity: 0.5;">
    <button id="annotation-remove"
      style="margin:10px;color:red; border:none;background: none;font-size: 18px; cursor:pointer;">REMOVE</button>
    <button id="annotation-split"
      style="margin:5px 10px 20px 0px;color:black; border:none;background: none;font-size: 18px;">SPLIT</button>
    <button id="annotation-save"
      style="padding:10px; margin:0px 10px 15px 50px;color:white; border-radius:4px;border:none;background: #2f84ba;font-size: 18px;cursor: pointer;">SAVE</button>
  </div><!-- Ending tag for Annotation Box -->

  <audio id="my-audio">
    <source src="example.mp3">
  </audio>

  <script src="https://code.jquery.com/jquery-3.4.1.js"></script>

  <script src="wavesurfer.js/dist/wavesurfer.js"></script>
  <script src="wavesurfer.js/dist/plugin/wavesurfer.timeline.js"></script>
  <script src="wavesurfer.js/dist/plugin/wavesurfer.regions.js"></script>
  <script>

    var updateAnnotationOnClick = false;
    var updateAnnotationOnChange = false;
    var updateSegments = true;
    var dragging = false;
    var temp, y, diff, segmentStart, segmentEnd = 0;
    var pressed = false;
    var segmentBool = false;
    var segmentId = 1;
    var currentId = "";
    var currentStartTime, currentEndTime = 0;
    var newStartTime, newEndTime = 0;

    var pixels = 0;
    //var TimelinePlugin=window.WaveSurfer.timeline;
    var temp = 0, scrolltop = 0, relativeScroll = 0;
    var buttons = {
      play: document.getElementById("play-button")
    }
    var spectrum = WaveSurfer.create({
      container: '#peaks-container',
      waveColor: 'grey',
      progressColor: 'grey',
      minPxPerSec: 96,
      scrollParent: false,
      autoCenter: true,
      seekStyle: "line",
      mediaControls: true,
      barWidth: 1,
      plugins: [
        WaveSurfer.timeline.create({
          container: "#time-line",
          timeInterval:0.1
        }),
        WaveSurfer.regions.create({

        })
      ]
    });
    spectrum.zoom(96);

    //Split test
    $("#annotation-split").on("click", function () {
      var firstLength = ($("#transcription-area").prop("selectionStart"));
      var reqText = $("#transcription-area").val();
      console.log(reqText.substring(0, firstLength));
      console.log(reqText.substring(firstLength, reqText.length));
    })
    //handle play button
    buttons.play.addEventListener("click", function (event) {
      event.preventDefault();
      if (!spectrum.isPlaying()) {
        spectrum.play();
      } else {
        spectrum.pause();
      }
      document.getElementById('total-timestamp').innerText = secondsToTimestamp(spectrum.getDuration());
    })

    spectrum.on("ready", function () {
      
      console.log($("#peaks-container").height());
      console.log($("wave").height());
      $("#time-line").css({
        "transform":`translate(0px,${$("wave").height()-10}px)`
      })
      buttons.play.disabled = false;
      totalDuration = spectrum.getDuration();
      document.getElementById('total-timestamp').innerText = secondsToTimestamp(totalDuration);

      //Add Region on key down
      $("html").on("keydown", function (event) {
        if (event.ctrlKey && event.shiftKey && event.which == 65) {
          console.log("Pressed");
          addRegion();
          renew();
        }
      });

      //Replay Region on KeyDown
      $("html").on("keydown", function (event) {
        if (event.altKey && event.which == 82 || event.which == 82) {
          console.log("Pressed");
          repeatRegion();
        }
      });

      $("html").on("keydown", function (event) {
        if (event.which == 32) {
          console.log("event");

          if (spectrum.isPlaying()) {
            spectrum.pause();
          }
          else {
            spectrum.play();
            highlightRegion();
          }
        }
      });
    });

    function updateTimer() {
      var formatTime = secondsToTimestamp(spectrum.getCurrentTime());
      document.getElementById('start-timestamp').innerText = formatTime;
      setTimeout(updateTimer, 1000);
    }
    updateTimer();

    //function to convert seconds to minute, seconds and milliseconds
    function secondsToTimestamp(seconds) {

      var n = Math.floor(seconds);
      var ms = (seconds - n).toFixed(3);
      seconds = Math.floor(seconds);
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      var s = seconds - (h * 3600) - (m * 60);

      m = m < 10 ? '0' + m : m;
      s = s < 10 ? '0' + s : s;
      ms = ms < 10 ? '0' + ms : ms;

      return m + ':' + s + '.' + ms.split(".")[1];
    }

    //function to convert seconds to minute for editing annotation box  
    function secondsToMinutes(seconds) {
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      m = m < 10 ? '0' + m : m;
      return m;
    }

    //function to convert seconds to seconds for editing annotation box  
    function secondsToSeconds(seconds) {
      seconds = Math.floor(seconds);
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      var s = seconds - (h * 3600) - (m * 60);
      s = s < 10 ? '0' + s : s;
      return s;
    }

    //function to convert seconds to milliseconds for editing annotation box  
    function secondsToMilliseconds(seconds) {
      var n = Math.floor(seconds);
      var ms = (seconds - n).toFixed(3);
      ms = ms < 10 ? '0' + ms : ms;
      return ms.split(".")[1];
    }

    spectrum.load("sample1.wav");


    window.onload = (function () {
      $("#peaks-container").on("mousedown", function (e) {

        spectrum.pause();
        dragging = true;
        temp = y = e.clientY;
      })
      $("#peaks-container").on("mousemove", function (e) {
        if (dragging == true) {
          y = e.clientY;
          diff = y - temp;
          temp = y;

          var req = (spectrum.getCurrentTime() + (diff * (-1) / 96)) / spectrum.getDuration();

          req < 0 ? req = 0 : req = req;
          req > 1 ? req = 1 : req = req;
          spectrum.seekTo(req);

        }
      })
      $(window).on("mouseup", function (e) {
        dragging = false;
      })
    })
    window.addEventListener("wheel", function (event) {
      spectrum.pause();
      var req = (spectrum.getCurrentTime() + (event.deltaY / 96)) / spectrum.getDuration();
      req < 0 ? req = 0 : req = req;
      req > 1 ? req = 1 : req = req;
      spectrum.seekTo(req);

    });

    window.addEventListener("scroll", function (event) {
      event.preventDefault();
    })

    //function to display the textarea and speakerfield
    function displayArea() {

      var val = document.getElementById("annotation-type");
      if (val.value !== "default" && val.value !== "Singing") {
        document.getElementById("speaker-name").value = val.value;
        document.getElementById("transcription-area").value = "";
        document.getElementById("transcription-area").style.display = "none";
        document.getElementById("speaker-name").style.display = "none";
        $("#annotation-box").css("height", 250 + "px");
      }
      else {
        document.getElementById("transcription-area").style.display = "block";
        document.getElementById("speaker-name").style.display = "block";
        $("#annotation-box").css("height", 500 + "px");
      }
    }

    //function on spectrum ready
    spectrum.on("ready", function () {

      //Vertical Line along the spectrum


      //ajax to create segments on spectrum load

      $.ajax({
        method: "POST",
        url: "/get-segments",
        success: function (response) {
          console.log("New Data");

          //console.log(response[0]["segment_id"]);
          for (var i = 0; i < response.length; i++) {
            var segmentId = response[i]["segment_id"];
            var speakerName = response[i]["div_className"];
            var annotationType = response[i]["div_title"];
            var segmentStart = response[i]["segment_start"];
            var segmentEnd = response[i]["segment_end"];
            var annotationText = response[i]["annotation_text"];

            //creating Segments 
            spectrum.addRegion({
              id: segmentId,
              start: segmentStart,
              end: segmentEnd,
              drag: false
            })

            //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
            createDiv(segmentId, speakerName, annotationType, segmentStart, segmentEnd, annotationText);
          }

          if (response.length > 0) {
            console.log(response[response.length - 1]["segment_id"]);
            window.segmentId = response[response.length - 1]["segment_id"] + 1;
          }
        }
      })


      $("#plus-button").on("click", function () {
        addRegion();
        renew();
      })
    })
    $("#annotation-save").on("click", function () {
      saveClick();
      /* if (updateSegments == false) {

        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var val = document.getElementById("annotation-type");
        if (val.value !== "default") {
          annotationType = document.getElementById("annotation-type").value;

          speakerName = document.getElementById("annotation-type").value;

          annotationText = val.value;
        } else {
          annotationType = document.getElementById("annotation-type").value;

          speakerName = document.getElementById("speaker-name").value;

          annotationText = $("#transcription-area").val();
        }

        //ajax Request to Create    
        var params = {
          speakerName,
          annotationType,
          segmentStart,
          segmentEnd,
          annotationText
        }

        $.ajax({
          method: "POST",
          url: "/database",
          data: params,
          success: function () {
            console.log("Success");
          }
        })
        //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
        createDiv(window.segmentId, speakerName, annotationType, segmentStart, segmentEnd, annotationText);
        window.segmentId++;
        updateSegments = true;
      } else {
        //Updating Database
        updateAnnotationOnChange=false;
        var segmentId = spectrum.regions.getCurrentRegion().id;
        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var segmentclass = document.getElementById("speaker-name").value;
        console.log(segmentclass.replace(" ", "-"));
        var val = document.getElementById("annotation-type");
        if (val.value !== "default") {
          document.getElementById(segmentId).style.top = "0px";
          annotationType = document.getElementById("annotation-type").value;
          document.getElementById(segmentId).title = annotationType;
          speakerName = document.getElementById("annotation-type").value;
          document.getElementById(segmentId).className = speakerName;
          annotationText = val.value;
          document.getElementById(segmentId).querySelector("p").innerText = annotationText;
        } else {
          //checking if speaker is already Available          
          if ($("#annotation-div").children().hasClass(segmentclass.replace(" ", "-"))) {
            $("#annotation-div").children().each(function (index, value) {
              if (value.className == (segmentclass.replace(" ", "-"))) {
                console.log("old")
                console.log(value);
                annotationType = document.getElementById("annotation-type").value;
                document.getElementById(segmentId).title = annotationType;
                speakerName = document.getElementById("speaker-name").value;
                document.getElementById(segmentId).className = speakerName.replace(" ", "-");
                annotationText = $("#transcription-area").val();
                document.getElementById(segmentId).querySelector("p").innerText = annotationText;
                document.getElementById(segmentId).style.background = value.style.backgroundColor;
                //400=leftMargin
                document.getElementById(segmentId).style.top = 400 / (index + 1) + "px";
                return;
              }
            });
          } else {
            console.log("new");
            var newColor = getRandomColor();
            annotationType = document.getElementById("annotation-type").value;
            document.getElementById(segmentId).title = annotationType;
            speakerName = document.getElementById("speaker-name").value;
            document.getElementById(segmentId).className = speakerName.replace(" ", "-");
            annotationText = $("#transcription-area").val();
            document.getElementById(segmentId).querySelector("p").innerText = annotationText;
            document.getElementById(segmentId).style.background = newColor;
            //400=leftMargin
            document.getElementById(segmentId).style.top = 400 / (($("#annotation-div").children("div").length) + 1) + "px";
            topSpeakerDiv(speakerName, newColor);
          }
        }

        //ajax Request To Update
        var params = {
          segmentId,
          speakerName,
          annotationType,
          segmentStart,
          segmentEnd,
          annotationText
        }

        $.ajax({
          method: "POST",
          url: "/updatedatabase",
          data: params,
          success: function () {
            console.log("Updated");
          }
        })
      } */
    })

    //onClick for split
    $("#close").on("click", function () {
      updateSegments = true;
      updateAnnotationOnChange = false;
      updateAnnotationOnClick = false;
      //current region highlight
      highlightRegion();
    })

    //Region Remove             
    $("#annotation-remove").on("click", function () {
      updateSegments == true;
      var regionId = currentId;
      spectrum.regions.list[currentId].remove();
      $("#" + currentId).empty();
      $("#" + currentId).remove();


      //ajax request to remove segments
      var params = {
        regionId
      }
      $.ajax({
        method: "POST",
        url: "/remove-segments",
        data: params,
        success: function () {
          console.log("Removed");
        }
      });

    })
    //Seeking Specturm
    spectrum.on("seek", function () {

      //function on ctrl+quote key down and ctrl+colon

      ctrlquote();
      ctrlcolon();
      if (spectrum.regions.getCurrentRegion() != null && !updateAnnotationOnChange && !updateAnnotationOnClick) {
        var segmentId = spectrum.regions.getCurrentRegion().id;
        currentId = spectrum.regions.getCurrentRegion().id;

        //highlight current region
        highlightRegion();

        //segment start variables
        var startMinute = secondsToMinutes(spectrum.regions.getCurrentRegion().start);
        var startSeconds = secondsToSeconds(spectrum.regions.getCurrentRegion().start);
        var startMilliseconds = secondsToMilliseconds(spectrum.regions.getCurrentRegion().start);
        currentStartTime = spectrum.regions.getCurrentRegion().start

        //segment end variables
        var endMinute = secondsToMinutes(spectrum.regions.getCurrentRegion().end);
        var endSeconds = secondsToSeconds(spectrum.regions.getCurrentRegion().end);
        var endMilliseconds = secondsToMilliseconds(spectrum.regions.getCurrentRegion().end);
        currentEndTime = spectrum.regions.getCurrentRegion().end;

        //displaying texts   
        $("#annotation-start-minute").val(startMinute);
        $("#annotation-start-seconds").val(startSeconds);
        $("#annotation-start-milliseconds").val(startMilliseconds);
        $("#annotation-end-minute").val(endMinute);
        $("#annotation-end-seconds").val(endSeconds);
        $("#annotation-end-milliseconds").val(endMilliseconds);

        //($("#peaks-container").children().is(`#${segmentId}`) > 0)
        if ($("#peaks-container").children().is(`#${segmentId}`) > 0) {
          var segmentType = document.getElementById(segmentId).title;
          var segmentSpeaker = document.getElementById(segmentId).className.replace("-", " ");
          var segmentText = document.getElementById(segmentId).innerText;
          var divColor = document.getElementById(segmentId).style.background;

          //changing color of Annotation Heading
          $(".annotation-editHeading").css("backgroundColor", divColor);
          if (segmentType !== "default" && segmentType !== "Singing") {
            document.getElementById("transcription-area").style.display = "none";
            document.getElementById("speaker-name").style.display = "none";
            $("#annotation-box").css("height", 250 + "px");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = "";
            document.getElementById("transcription-area").value = "";
          } else {
            document.getElementById("transcription-area").style.display = "block";
            document.getElementById("speaker-name").style.display = "block";
            $("#annotation-box").css("height", 500 + "px");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = segmentSpeaker;
            document.getElementById("transcription-area").value = segmentText;
          }
        }
      }
    })


    //colorPicker
    function getRandomColor() {
      var hue = Math.floor(Math.random() * 355);
      return `hsl(${hue},100%,90%)`;
    }


    //function to create a div
    var zindexLoop = 1000;
    function createDiv(segmentId, segmentClass = "", segmentTitle = "", segmentStart, segmentEnd, annotationText) {
      var leftMargin = 400;
      var div = document.createElement("div");
      //div.style.marginTop="450px";           
      div.id = segmentId;
      div.className = segmentClass.replace(" ", "-");
      div.title = segmentTitle;
      var p = document.createElement("p");
      var colorArr = ["#f5d98c", "#f29363", "#b4ede9", "#a1edbc"];
      var neededColor = getRandomColor();
      div.style.height = "250px";
      div.style.border = `2px groove ${neededColor}`;
      div.style.background = neededColor;
      div.style.zIndex = zindexLoop + 1;
      p.innerHTML = annotationText;
      p.style.transform = "translateX(0%) rotate(270deg)";
      p.style.width = "200px";
      p.style.height = "200px";
      p.style.padding = "20px";
      p.style.fontSize = "18px";
      p.style.pointerEvents = "none";
      div.appendChild(p);
      div.style.position = "absolute";
      //div.style.top = "0px";
      var progress1 = segmentStart / spectrum.getDuration();
      var progress2 = (segmentEnd - segmentStart) / spectrum.getDuration();
      var minPxDelta = 1 / spectrum.params.pixelRatio;
      var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
      var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta - 3;

      div.style.left = pos + "px";
      div.style.width = pos1 + "px";

      //onClick and onChange action listener
      div.addEventListener("click", changeAnnotationOnClick);


      if ($("#peaks-container").children().hasClass(segmentClass.replace(" ", "-").toString())) {
        if (segmentTitle !== "default" && segmentTitle !== "Singing") {
          div.style.top = "0px";
          $("#peaks-container").append(div);

        } else {
          $("#annotation-div").children().each(function (index, value) {
            if (value.className == segmentClass.replace(" ", "-")) {

              div.style.background = value.style.backgroundColor;
              div.style.top = leftMargin / (index + 1) + "px";
              $("#peaks-container").append(div);

              return false;
            }
          });
        }
      } else if (segmentTitle !== "default" && segmentTitle !== "Singing") {
        div.style.top = "0px";
        $("#peaks-container").append(div);

      }
      else {
        //var topValue=$("#peaks-container").find("."+segmentClass.replace(" ","-")).position().top;
        div.style.top = leftMargin / (($("#annotation-div").children("div").length) + 1) + "px";
        $("#peaks-container").append(div);
        topSpeakerDiv(segmentClass, neededColor);
      }
    }

    //function to create top speaker annotation divs
    function topSpeakerDiv(segmentClass = "", neededColor) {
      var totalWidth = 0;
      var leftMargin = 90;

      var totalDivs = 1;//$("#annotation-div").has("div").length

      if ($("#annotation-div").children().hasClass(segmentClass.replace(" ", "-").toString())) {

      } else {
        var div2 = document.createElement("div");
        var p2 = document.createElement("p");
        div2.className = segmentClass.replace(" ", "-");
        div2.style.backgroundColor = neededColor;
        div2.style.border = `2px groove ${neededColor}`;
        p2.innerHTML = segmentClass;
        p2.style.height = "30px";
        p2.style.fontSize = "16px";
        p2.style.margin = "9px";
        div2.style.position = "absolute";
        div2.style.zIndex = "3";
        div2.style.width = "90px";
        div2.style.height = "35px";
        div2.appendChild(p2);

        $("#annotation-div").append(div2);

        if ((($("#annotation-div").children("div").length) * leftMargin + leftMargin) > $("#annotation-div").width()) {
          leftMargin = ($("#annotation-div").width() - leftMargin) / $("#annotation-div").children("div").length;
          $("#annotation-div").children().each(function (index, value) {
            this.style.left = (leftMargin * index + "px");

          });
        } else {
          div2.style.left = ($("#annotation-div").children("div").length) * leftMargin + "px";
        }
      }
    }

    //function to update Segment Start on start time change
    function updateSegmentonTimeChange() {
      // if (updateSegments) {
      updateAnnotationOnChange = true;
      var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + parseInt($("#annotation-start-milliseconds").val());
      var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + parseInt($("#annotation-end-milliseconds").val());
      console.log(parseFloat(ending) - parseFloat(starting));
      if (spectrum.regions.list[currentId] != null) {
        console.log("Id" + currentId);
        if ((parseFloat(ending) - parseFloat(starting)) < 0.100 && (parseFloat(ending) - parseFloat(starting)) >= 0) {
          spectrum.regions.list[currentId].update({
            start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + parseInt($("#annotation-start-milliseconds").val()),//-0.050,
            end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + parseInt($("#annotation-end-milliseconds").val())//+900
          });
        } else if ((parseFloat(ending) - parseFloat(starting)) < 0) {
          spectrum.regions.list[currentId].update({
            end: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + parseInt($("#annotation-start-milliseconds").val()),
            start: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + parseInt($("#annotation-end-milliseconds").val())
          });
        } else {
          spectrum.regions.list[currentId].update({
            start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + $("#annotation-start-milliseconds").val(),
            end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + $("#annotation-end-milliseconds").val()
          });
        }

        //highlight clicked region
        highlightRegion();

        newStartTime = spectrum.regions.list[currentId].start;
        newEndTime = spectrum.regions.list[currentId].end;


        var progress1 = newStartTime / spectrum.getDuration();
        var progress2 = (newEndTime - newStartTime) / spectrum.getDuration();
        var minPxDelta = 1 / spectrum.params.pixelRatio;
        var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
        var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;

        if ($("#peaks-container").children().is("#" + currentId)) {
          document.getElementById(currentId).style.left = pos + "px";
          document.getElementById(currentId).style.width = pos1 + "px";
        }


        //Change start and end on change
        segmentStart = spectrum.regions.list[currentId].start;
        segmentEnd = spectrum.regions.list[currentId].end;
        console.log(segmentStart);
        /*if(dragging==true){
          spectrum.regions.list[regionId].update({
             start:currentStartTime,
             end:currentEndTime
          });     
        }*/
      }
      //}


    }
    $(document).on("mousedown", "wave", function () {
      console.log("Okay");
    });
    //function for annotation contents change on click
    function changeAnnotationOnClick(evt) {
      if (!updateAnnotationOnChange) {
        var clickedId = evt.target.id;
        currentId = evt.target.id;
        //highlight clicked region
        highlightRegion();

        currentStartTime = spectrum.regions.list[currentId].start;
        currentEndTime = spectrum.regions.list[currentId].end;
        console.log(clickedId);

        //segment start variables
        var startMinute = secondsToMinutes(spectrum.regions.list[currentId].start);
        var startSeconds = secondsToSeconds(spectrum.regions.list[currentId].start);
        var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].start);

        //segment end variables
        var endMinute = secondsToMinutes(spectrum.regions.list[currentId].end);
        var endSeconds = secondsToSeconds(spectrum.regions.list[currentId].end);
        var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].end);

        //displaying texts   
        $("#annotation-start-minute").val(startMinute);
        $("#annotation-start-seconds").val(startSeconds);
        $("#annotation-start-milliseconds").val(startMilliseconds);
        $("#annotation-end-minute").val(endMinute);
        $("#annotation-end-seconds").val(endSeconds);
        $("#annotation-end-milliseconds").val(endMilliseconds);

        if ($("#peaks-container").children().is("#" + clickedId) > 0) {
          var segmentType = document.getElementById(clickedId).title;
          var segmentSpeaker = document.getElementById(clickedId).className.replace("-", " ");
          var segmentText = document.getElementById(clickedId).innerText;
          var divColor = document.getElementById(clickedId).style.background;

          //changing color of Annotation Heading
          $(".annotation-editHeading").css("backgroundColor", divColor);
          if (segmentType !== "default" && segmentType !== "Singing") {
            document.getElementById("transcription-area").style.display = "none";
            document.getElementById("speaker-name").style.display = "none";
            $("#annotation-box").css("height", 250 + "px");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = "";
            document.getElementById("transcription-area").value = "";
          } else {
            document.getElementById("transcription-area").style.display = "block";
            document.getElementById("speaker-name").style.display = "block";
            $("#annotation-box").css("height", 500 + "px");
            document.getElementById("annotation-type").value = segmentType;
            document.getElementById("speaker-name").value = segmentSpeaker;
            document.getElementById("transcription-area").value = segmentText;
          }
        }
      }
    }

    //Cancel Save or any Changes
    function cancel() {
      //updateAnnotationOnChange=true;            
      if ($("#peaks-container").children().is("#" + currentId)) {
        spectrum.regions.list[currentId].update({
          start: currentStartTime,
          end: currentEndTime
        });

        //segment start variables
        var startMinute = secondsToMinutes(spectrum.regions.list[currentId].start);
        var startSeconds = secondsToSeconds(spectrum.regions.list[currentId].start);
        var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].start);

        //segment end variables
        var endMinute = secondsToMinutes(spectrum.regions.list[currentId].end);
        var endSeconds = secondsToSeconds(spectrum.regions.list[currentId].end);
        var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].end);

        //displaying texts   
        $("#annotation-start-minute").val(startMinute);
        $("#annotation-start-seconds").val(startSeconds);
        $("#annotation-start-milliseconds").val(startMilliseconds);
        $("#annotation-end-minute").val(endMinute);
        $("#annotation-end-seconds").val(endSeconds);
        $("#annotation-end-milliseconds").val(endMilliseconds);

        var progress1 = currentStartTime / spectrum.getDuration();
        var progress2 = (currentEndTime - currentStartTime) / spectrum.getDuration();
        var minPxDelta = 1 / spectrum.params.pixelRatio;
        var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
        var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;

        document.getElementById(currentId).style.left = pos + "px";
        document.getElementById(currentId).style.width = pos1 + "px";

      } else {
        if (spectrum.regions.list[currentId]) {
          spectrum.regions.list[currentId].remove();
          //updateAnnotationOnChange = false;
        }
      }
    }

    //function for annotation contents change on click    
    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area").on("click", function () {
      updateAnnotationOnClick = true;

    });

    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area").on("focusout", function () {
      if (updateAnnotationOnClick) {
        updateAnnotationOnClick = false;
      }
    })

    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area").on("change", function () {
      updateSegmentonTimeChange();
    });

    //function to highlight current region
    function highlightRegion() {
      var highlightId = currentId;
      //console.log(spectrum.regions.list[highlightId].element);

      Object.keys(spectrum.regions.list).forEach(function (id) {
        var region = spectrum.regions.list[id];
        if (region.id == highlightId) {
          region.element.children[0].style.backgroundColor = "rgba(94, 196, 247,1)";
          region.element.children[1].style.backgroundColor = "rgba(94, 196, 247,1)";
          region.element.style.backgroundColor = "rgba(168,221,227,0.6)";
          if ($("#peaks-container").children().is("#" + highlightId)) {
            document.getElementById(highlightId).style.opacity = "0.7";
            document.getElementById(highlightId).style.boxShadow = "2px 2px 20px";
          }
        } else {
          region.element.children[0].style.backgroundColor = "rgba(0,0,0,0)";
          region.element.children[1].style.backgroundColor = "rgba(0,0,0,0)";
          region.element.style.backgroundColor = "rgba(0,0,0,0.1)";
          if ($("#peaks-container").children().is("#" + region.id)) {
            document.getElementById(region.id).style.opacity = "1"
            document.getElementById(region.id).style.boxShadow = "0px 0px 0px";
          }

        }
      })
    }


    //function to save data to database on saveClick
    function saveClick() {
      if (updateSegments == false) {
        segmentStart = spectrum.regions.list[currentId].start;
        segmentEnd = spectrum.regions.list[currentId].end;
        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var val = document.getElementById("annotation-type");
        if (val.value !== "default" && val.value !== "Singing") {
          annotationType = document.getElementById("annotation-type").value;

          speakerName = document.getElementById("annotation-type").value;

          annotationText = val.value;
        } else {
          annotationType = document.getElementById("annotation-type").value;

          speakerName = document.getElementById("speaker-name").value;

          annotationText = $("#transcription-area").val();
        }

        //ajax Request to Create    
        var params = {
          speakerName,
          annotationType,
          segmentStart,
          segmentEnd,
          annotationText
        }

        $.ajax({
          method: "POST",
          url: "/database",
          data: params,
          success: function () {
            console.log("Success");
          }
        })
        //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
        createDiv(window.segmentId, speakerName, annotationType, segmentStart, segmentEnd, annotationText);
        updateAnnotationOnChange = false;

        window.segmentId++;
        updateSegments = true;
      } else if (updateAnnotationOnChange == true) {
        var params;
        console.log("Old" + segmentStart);
        //Updating Database

        var segmentId = currentId;
        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var segmentclass = document.getElementById("speaker-name").value;
        console.log(segmentclass.replace(" ", "-"));
        var val = document.getElementById("annotation-type");
        if (val.value !== "default" && val.value !== "Singing") {
          document.getElementById(segmentId).style.top = "0px";
          annotationType = document.getElementById("annotation-type").value;
          document.getElementById(segmentId).title = annotationType;
          speakerName = document.getElementById("annotation-type").value;
          document.getElementById(segmentId).className = speakerName;
          annotationText = val.value;
          document.getElementById(segmentId).querySelector("p").innerText = annotationText;
        } else {
          //checking if speaker is already Available          
          if ($("#annotation-div").children().hasClass(segmentclass.replace(" ", "-"))) {
            $("#annotation-div").children().each(function (index, value) {
              if (value.className == (segmentclass.replace(" ", "-"))) {
                console.log("old")
                console.log(value);
                annotationType = document.getElementById("annotation-type").value;
                document.getElementById(segmentId).title = annotationType;
                speakerName = document.getElementById("speaker-name").value;
                document.getElementById(segmentId).className = speakerName.replace(" ", "-");
                annotationText = $("#transcription-area").val();
                document.getElementById(segmentId).querySelector("p").innerText = annotationText;
                document.getElementById(segmentId).style.background = value.style.backgroundColor;
                //400=leftMargin
                document.getElementById(segmentId).style.top = 400 / (index + 1) + "px";
                return;
              }
            });
          } else {
            console.log("new");
            var newColor = getRandomColor();
            annotationType = document.getElementById("annotation-type").value;
            document.getElementById(segmentId).title = annotationType;
            speakerName = document.getElementById("speaker-name").value;
            document.getElementById(segmentId).className = speakerName.replace(" ", "-");
            annotationText = $("#transcription-area").val();
            document.getElementById(segmentId).querySelector("p").innerText = annotationText;
            document.getElementById(segmentId).style.background = newColor;
            //400=leftMargin
            document.getElementById(segmentId).style.top = 400 / (($("#annotation-div").children("div").length) + 1) + "px";
            topSpeakerDiv(speakerName, newColor);
          }
        }

        //ajax Request To Update
        if (updateAnnotationOnChange) {
          params = {
            segmentId,
            speakerName,
            annotationType,
            segmentStart: newStartTime,
            segmentEnd: newEndTime,
            annotationText
          }
        } else {
          params = {
            segmentId,
            speakerName,
            annotationType,
            segmentStart,
            segmentEnd,
            annotationText
          }
        }


        $.ajax({
          method: "POST",
          url: "/updatedatabase",
          data: params,
          success: function () {
            console.log("Updated");
          }
        })
        updateAnnotationOnChange = false;
        updateAnnotationOnClick = false;
      }
    }

    //function for ctrl+singlequote
    function ctrlquote(currentregionId) {
      $("html,body").on("keydown", function (event) {
        if (event.ctrlKey && event.which == 222) {
          console.log("Pressed");
          var currentTime = spectrum.getCurrentTime();
          updateAnnotationOnChange = true;
          updateAnnotationOnClick = true;
          //segment end variables
          var endMinute = secondsToMinutes(currentTime);
          var endSeconds = secondsToSeconds(currentTime);
          var endMilliseconds = secondsToMilliseconds(currentTime);

          //displaying texts          
          $("#annotation-end-minute").val(endMinute);
          $("#annotation-end-seconds").val(endSeconds);
          $("#annotation-end-milliseconds").val(endMilliseconds);


          var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + parseInt($("#annotation-start-milliseconds").val());
          var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + parseInt($("#annotation-end-milliseconds").val());

          if (spectrum.regions.list[currentId] != null) {
            console.log("Id" + currentId);
            if ((parseFloat(ending) - parseFloat(starting)) < 0.100 && (parseFloat(ending) - parseFloat(starting)) >= 0) {
              spectrum.regions.list[currentId].update({
                start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + parseInt($("#annotation-start-milliseconds").val()),//-0.050,
                end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + parseInt($("#annotation-end-milliseconds").val())//+900
              });
            } else if ((parseFloat(ending) - parseFloat(starting)) < 0) {
              spectrum.regions.list[currentId].update({
                end: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + parseInt($("#annotation-start-milliseconds").val()),
                start: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + parseInt($("#annotation-end-milliseconds").val())
              });
            } else {
              spectrum.regions.list[currentId].update({
                start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + $("#annotation-start-milliseconds").val(),
                end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + $("#annotation-end-milliseconds").val()
              });
            }
            //highlight clicked region
            highlightRegion();

            newStartTime = spectrum.regions.list[currentId].start;
            newEndTime = spectrum.regions.list[currentId].end;

            //Div Position
            var progress1 = newStartTime / spectrum.getDuration();
            var progress2 = (newEndTime - newStartTime) / spectrum.getDuration();
            var minPxDelta = 1 / spectrum.params.pixelRatio;
            var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
            var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;

            if ($("#peaks-container").children().is("#" + currentId)) {
              document.getElementById(currentId).style.left = pos + "px";
              document.getElementById(currentId).style.width = pos1 + "px";
            }

          }
        }
      });
    }

    //function for ctrl+singlequote
    function ctrlcolon(currentregionId) {
      $("html,body").on("keydown", function (event) {
        if (event.ctrlKey && event.which == 186) {
          console.log("Pressed");
          var currentTime = spectrum.getCurrentTime();
          updateAnnotationOnChange = true;
          updateAnnotationOnClick = true;
          //segment end variables
          //segment start variables
          var startMinute = secondsToMinutes(currentTime);
          var startSeconds = secondsToSeconds(currentTime);
          var startMilliseconds = secondsToMilliseconds(currentTime);


          //displaying texts          
          $("#annotation-start-minute").val(startMinute);
          $("#annotation-start-seconds").val(startSeconds);
          $("#annotation-start-milliseconds").val(startMilliseconds);


          var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + parseInt($("#annotation-start-milliseconds").val());
          var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + parseInt($("#annotation-end-milliseconds").val());

          if (spectrum.regions.list[currentId] != null) {
            console.log("Id" + currentId);
            if ((parseFloat(ending) - parseFloat(starting)) < 0.100 && (parseFloat(ending) - parseFloat(starting)) >= 0) {
              spectrum.regions.list[currentId].update({
                start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + parseInt($("#annotation-start-milliseconds").val()),//-0.050,
                end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + parseInt($("#annotation-end-milliseconds").val())//+900
              });
            } else if ((parseFloat(ending) - parseFloat(starting)) < 0) {
              spectrum.regions.list[currentId].update({
                end: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + parseInt($("#annotation-start-milliseconds").val()),
                start: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + parseInt($("#annotation-end-milliseconds").val())
              });
            } else {
              spectrum.regions.list[currentId].update({
                start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + $("#annotation-start-milliseconds").val(),
                end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + $("#annotation-end-milliseconds").val()
              });
            }
            //highlight clicked region
            highlightRegion();

            newStartTime = spectrum.regions.list[currentId].start;
            newEndTime = spectrum.regions.list[currentId].end;

            var progress1 = newStartTime / spectrum.getDuration();
            var progress2 = (newEndTime - newStartTime) / spectrum.getDuration();
            var minPxDelta = 1 / spectrum.params.pixelRatio;
            var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
            var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;

            if ($("#peaks-container").children().is("#" + currentId)) {
              document.getElementById(currentId).style.left = pos + "px";
              document.getElementById(currentId).style.width = pos1 + "px";
            }
          }
        }
      });
    }

    //Add New Region
    function addRegion() {
      //boolean to whether update database or create new data in database
      updateSegments = false;

      segmentEnd = spectrum.getCurrentTime();
      if ((spectrum.getCurrentTime() - 2) < 0) {
        segmentStart = 0;
      } else {
        segmentStart = segmentEnd - 2;
      }
      spectrum.addRegion({
        id: segmentId,
        start: segmentStart,
        end: segmentEnd,
        drag: false
      })
      currentId = segmentId;
      //highlighting current Region
      highlightRegion();

      //segment start variables
      var startMinute = secondsToMinutes(spectrum.regions.list[currentId].start);
      var startSeconds = secondsToSeconds(spectrum.regions.list[currentId].start);
      var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].start);

      //segment end variables
      var endMinute = secondsToMinutes(spectrum.regions.list[currentId].end);
      var endSeconds = secondsToSeconds(spectrum.regions.list[currentId].end);
      var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].end);

      //displaying texts   
      $("#annotation-start-minute").val(startMinute);
      $("#annotation-start-seconds").val(startSeconds);
      $("#annotation-start-milliseconds").val(startMilliseconds);
      $("#annotation-end-minute").val(endMinute);
      $("#annotation-end-seconds").val(endSeconds);
      $("#annotation-end-milliseconds").val(endMilliseconds);



      spectrum.on("seek", function () {
        if (!updateAnnotationOnChange && !updateAnnotationOnClick && spectrum.regions.list[segmentId] != null) {
          spectrum.regions.list[segmentId].remove();
          updateSegments = true;
        }
      })
    }

    //function to repeat a region
    function repeatRegion() {
      if (spectrum.regions.list[currentId] != null) {
        spectrum.regions.list[currentId].play();
      }
    }

    //function to renew annotation
    function renew() {
      $("#annotation-type").val("");
      $("#speaker-name").val("");
      $("#transcription-area").val("");
      document.getElementById("transcription-area").style.display = "block";
      document.getElementById("speaker-name").style.display = "block";
      $("#annotation-box").css("height", 500 + "px");
    }

    $("#repeat-button").on("click", function () {
      repeatRegion();
    })

  </script>

</body>

</html>
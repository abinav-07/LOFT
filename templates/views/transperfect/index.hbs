<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <title>Transperfect</title>
    <link rel="stylesheet" href="../css/transperfectStyles.css">
    <link rel="stylesheet" type="text/css" href="/css/styles.css">
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://code.jquery.com/jquery-3.4.1.js"></script>

    <script src="local_modules/wavesurfer.js/dist/wavesurfer.js"></script>
    <script src="local_modules/wavesurfer.js/dist/plugin/wavesurfer.timeline.js"></script>
    <script src="local_modules/wavesurfer.js/dist/plugin/wavesurfer.regions.js"></script>
    <script src="public/js/resize.js"></script>  
    <script src="public/js/create-top-speaker-div.js"></script>
    <script src="public/js/repeat-region.js"></script>
    <script src="public/js/loadingScreen.js"></script>
    <script src="public/js/create-transperfect-divs.js"></script>

    <link href="../node_modules/video.js/dist/video-js.min.css" rel="stylesheet">    

    <script src="../node_modules/video.js/dist/video.min.js"></script>
    {{!-- <script src="../node_modules/wavesurfer.js/dist/wavesurfer.min.js"></script> --}}
    
</head>
<body>
    <div id="header">
        {{>header}}
    </div>
    {{>transperfectBody}}

    {{!-- Video-waveform Js --}}
    {{!-- <video id="waveform-video" playsinline class="video-js vjs-default-skin"></video> --}}

    <script>
        var user_id;
        var audio_id;
        audio_id = {{ audio_id }};
        user_id = {{ user_id }};

        var is_submitted = "FALSE";
        var leftSpeakerCategoryDivMargin = 120;

        var actualResponseLength = 0;//Assigns total response length
        var postsResponseLength = 0;//Assigns total posts length
        var wrongSpeakerScore = 0;
        var wrongAnnotationScore = 0;
        var unnecessarySegmentsErrors = 0;
        var overallScore = 0;//var to assign score
        var passOrFail = ""//var to assign pass or fail
        var reqSpeakers = [];//var to check if speakers are already available  
        var addRegionBool = true;//Bool for adding region only one on click
        var canvasHeight = 0;
        var updateAnnotationOnClick = false;//allow updating annotation box only on click
        var updateAnnotationOnChange = false;//allow updating annotation box only on change
        var updateTopDivSpeakerOnClick = false;//allow updating only on click 
        var updateTopDivSpeaker = false;//checking top div speaker changes
        var updateSegments = true;//update segments only if not new region 
        var dragging = false;//allow dragging
        var temp, y, diff, segmentStart, segmentEnd = 0;
        var pressed = false;
        var segmentId = 1;
        var currentId = "";
        var currentStartTime, currentEndTime = 0;
        var newStartTime, newEndTime = 0;
        var confirmChangesboxBool = false;//boolean true if confirm changes box appears
        var speakerNameCheckBool = true;//true if speaker name is valid
        var hundredMillisecSegmentCheck = true;//true if segment is created above 100 ms
        var segmentEndingTimeMoreThanStartingTime = false;
        var sameSpeakerOverlapping = false;//true if two same speakers overlap each other
        var pixels = 0;
        var correctSegmentCreated = false;
        var getTopClickedId;

        var buttons = {
            play: document.getElementById("play-button")
        }

    //Creating the audio stream from Wavesurfer 
    let wavesurferOptions={
      container: '#peaks-container',
      waveColor: 'grey',
      progressColor: 'grey',
      minPxPerSec: 96,
      scrollParent: false,
      autoCenter: true,
      backgroundColor: "#fff",
      seekStyle: "line",
      mediaControls: true,
      barWidth: 1,
      barHeight: 0.5,
      height: 316,
      plugins: [
        WaveSurfer.timeline.create({
          container: "#time-line",
          timeInterval: 0.1,
          height: 50,
          notchPercentHeight: 25
        }),
        WaveSurfer.regions.create({})
      ]
    }
    var spectrum = WaveSurfer.create(wavesurferOptions);
    spectrum.zoom(96);

    //Video Js Options
    let videoJSOptions={
        controls: true,
        autoplay: false,
        loop: false,
        muted: false,
        fluid: false,
        width: 600,
        height: 300,
        inactivityTimeout: 0,
        bigPlayButton: false,
        plugins:{
            wavesurfer:wavesurferOptions
        }
    }
    

    displayWaveSurferLoading();

    //handle play button
    buttons.play.addEventListener("click", function (event) {
      event.preventDefault();
      if (!spectrum.isPlaying()) {
        spectrum.play();
        $("#play-button").find($(".fa")).toggleClass('fa-play fa-pause');
      } else {
        spectrum.pause();
        $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
      }
      document.getElementById('total-timestamp').innerText = secondsToTimestamp(spectrum.getDuration());
    });

    //function on spectrum is ready 
    spectrum.on("ready", function () {

      totalDuration = spectrum.getDuration();

      //canvas height to set the top speaker annotation div position from left 
      canvasHeight = $("#peaks-container > wave canvas").height();

      //audio wave total height 
      $("#peaks-container").css({
        "width": `calc(${totalDuration} * 96px)`
      })

      $("#plus-button").css({
        "marginTop": `${$("#peaks-container").position().top}px`
      })
      $("#time-line").css({
        "transform": `translate(0px,${$("wave").height() - 10}px)`
      })
      $("#annotation-div-head").css({
        "left": `${canvasHeight}px`
      })
      buttons.play.disabled = false;
      totalDuration = spectrum.getDuration();
      document.getElementById('total-timestamp').innerText = secondsToTimestamp(totalDuration);

      //Add Region on key down
      $("html").on("keydown", function (event) {

        if (!updateTopDivSpeaker) {
          if (event.ctrlKey && event.shiftKey && event.which == 65) {
            //console.log("Pressed");
            event.preventDefault();
            addRegion();
            if (addRegionBool == true && !updateAnnotationOnChange && !updateTopDivSpeaker) {
              renew();
            }
          }
        }

         //Replay Region on KeyDown
        if (event.altKey && event.which == 82 || event.which == 82 && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "top-div-control-speaker-name" && event.target.id !="feedback-textarea") {        
          event.preventDefault();
          repeatRegion();
        }
        //Replay Function end

        //play pause on space bar
        if ((event.which == 32 || event.which == 96 || event.which == 48) && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "annotation-start-minute" && event.target.id != "annotation-start-seconds" && event.target.id != "annotation-start-milliseconds" && event.target.id != "annotation-end-minute" && event.target.id != "annotation-end-seconds" && event.target.id != "annotation-end-milliseconds" && event.target.id != "top-div-control-speaker-name" && event.target.id !="feedback-textarea") {

          if (spectrum.isPlaying()) {
            spectrum.pause();
            $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
          }
          else {
            spectrum.play();
            $("#play-button").find($(".fa")).toggleClass('fa-play fa-pause');
            highlightRegion();
          }
        }else if( (event.ctrlKey && event.which == 32) && (event.target.id == "speaker-name" || event.target.id == "transcription-area" || event.target.id == "annotation-start-minute" || event.target.id == "annotation-start-seconds" || event.target.id == "annotation-start-milliseconds" || event.target.id == "annotation-end-minute" || event.target.id == "annotation-end-seconds" || event.target.id == "annotation-end-milliseconds" || event.target.id == "top-div-control-speaker-name") ){
          if (spectrum.isPlaying()) {
            spectrum.pause();
            $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
          }
          else {
            spectrum.play();
            $("#play-button").find($(".fa")).toggleClass('fa-play fa-pause');
            highlightRegion();
          }
        }//Play Pause End

        //skip audio backwards 500ms on "8" pressed
        if ((event.which == 104 || event.which == 56) && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "annotation-start-minute" && event.target.id != "annotation-start-seconds" && event.target.id != "annotation-start-milliseconds" && event.target.id != "annotation-end-minute" && event.target.id != "annotation-end-seconds" && event.target.id != "annotation-end-milliseconds") {
          event.preventDefault();
          skipAudio(-0.5);
        }

        //skip audio backwards 500ms on "5" pressed
        if ((event.which == 101 || event.which == 53) && event.target.id != "speaker-name" && event.target.id != "transcription-area" && event.target.id != "annotation-start-minute" && event.target.id != "annotation-start-seconds" && event.target.id != "annotation-start-milliseconds" && event.target.id != "annotation-end-minute" && event.target.id != "annotation-end-seconds" && event.target.id != "annotation-end-milliseconds") {
          event.preventDefault();
          skipAudio(0.5);
        }

        //jump audio to start
        if (event.which == 36 || (event.which == 18 && event.which == 37)) {
          event.preventDefault();
          spectrum.seekTo(0);
        }

        //jump audio to end
        if (event.which == 35) {
          event.preventDefault();
          skipAudio(spectrum.getDuration());
        }
      });

      //Making our canvas line visible 
      $("#peaks-container > wave").css({ "overflow": "" });      
      

      //$("#peaks-container > wave").css({ "height": "65vw" });
      //Creating a Canvas straight Line
      var canvas = $("#peaks-container > wave canvas");
      var newCanvas = document.createElement("canvas");
      newCanvas.width = "2000";
      newCanvas.height = "316";
      newCanvas.style.cssText = ("position: absolute; z-index: 2; left: -2000px; bottom: 0px; height: 35.5%; pointer-events: none; width: 2000px;");
      canvas[0].before(newCanvas);
      canvas = $("#peaks-container > wave canvas");
      for (var i = 0; i < canvas.length; i++) {
        var context = canvas[i].getContext("2d");
        var x = (canvas[i].width);
        var y = (canvas[i].height) / 2;

        context.beginPath();
        // Staring point (10,45)
        context.moveTo(0, y);
        // End point (180,47)
        context.lineTo(x, y);
        // Make the line visible
        context.strokeStyle = "#000";
        context.lineWidth = 1;
        context.stroke();
      }//Canvas Creation End      
    });//Function end for on ready spectrum

    
    //function to skip audio
    function skipAudio(timeToSkip) {
        spectrum.skip(timeToSkip);
    }

    //Resize Window on ready
    $(document).ready(function(){
      resizeTransperfectScreen();
    });

    //function to seek to set cookie
    function seekToCookie(){
        //Load Wave to previous time stamp from cookie
        setTimeout(function(){
            if (getCookie("current_time") > 0 && $("#peaks-container").children("div").length>1) {
                spectrum.seekTo(parseFloat(getCookie("current_time")));
                updateTimer();
              //spectrum.seekTo(0.0404);
            };
        },1500);
    }

    //Function to set current time
    function updateTimer() {
      var formatTime = secondsToTimestamp(spectrum.getCurrentTime());
      document.getElementById('start-timestamp').innerText = formatTime;
      //setTimeout(updateTimer, 100);      
    }

    $(function(){
      if ((spectrum.getCurrentTime()) > 0) {
        setInterval(setCookie("current_time", `${spectrum.getCurrentTime() / spectrum.getDuration()}`, 30),5000) ;
      }
    })
    setInterval(updateTimer(), 100);

    //function to set cookie for current time stamp
    function setCookie(cookieName, cookieValue, expireDays) {
      var date = new Date();
      date.setTime(date.getTime() + (expireDays * 24 * 60 * 60 * 1000));
      var expires = "expires=" + date.toUTCString();
      document.cookie = cookieName + "=" + cookieValue + ";" +
        expires + ";path=/";
    }

    //function to get cookie for currentTime Stamp
    function getCookie(cookieName) {
      var name = cookieName + "=";
      var decodedCookie = decodeURIComponent(document.cookie);
      var cookieArray = decodedCookie.split(";");
      for (var i = 0; i < cookieArray.length; i++) {
        var cookie = cookieArray[i];
        while (cookie.charAt(0) == ' ') {
          cookie = cookie.substring(1);
        }
        if (cookie.indexOf(name) == 0) {
          return cookie.substring(name.length, cookie.length);
        }
      }
      return "";
    }

    //function to convert seconds to minute, seconds and milliseconds
    function secondsToTimestamp(seconds) {
      ////console.log(seconds)

      var n = Math.floor(seconds);
      var ms = (seconds - n).toFixed(3);
      
      seconds = Math.floor(seconds);
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      var s = Math.ceil(seconds) - (h * 3600) - (m * 60);

      m = m < 10 ? '0' + m : m;
      s = s < 10 ? '0' + s : s;
      ms = ms < 10 ? '0' + ms : ms;

      return m + ':' + s + '.' + ms.split(".")[1];
    }

    //function to convert seconds to minute for editing annotation box  
    function secondsToMinutes(seconds) {
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      m = m < 10 ? '0' + m : m;
      return m;
    }

    //function to convert seconds to seconds for editing annotation box  
    function secondsToSeconds(seconds) {
      seconds = Math.floor(seconds);
      var h = Math.floor(seconds / 3600);
      var m = Math.floor((seconds - (h * 3600)) / 60);
      var s = seconds - (h * 3600) - (m * 60);
      s = s < 10 ? '0' + s : s;
      return s;
    }

    //function to convert seconds to milliseconds for editing annotation box  
    function secondsToMilliseconds(seconds) {
      var n = Math.floor(seconds);
      var ms = (seconds - n).toFixed(3);
      ms = ms < 10 ? '0' + ms : ms;
      return ms.split(".")[1];
    }


    //Loading the Audio
    spectrum.load("{{audio_url}}");

    //function for dragging spectrum on mousedown
    window.onload = (function () {
      if (!confirmChangesboxBool) {
        $("#peaks-container,#top-div-for-scrolling-enabling").on("mousedown", function (e) {
          ////console.log("Touched");
          if (spectrum.isPlaying()) {
            spectrum.pause();
            $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
          }
          dragging = true;
          temp = y = e.clientY;
        })
        $("#peaks-container,#top-div-for-scrolling-enabling").on("mousemove", function (e) {

          if (dragging == true) {
            y = e.clientY;
            diff = y - temp;
            temp = y;

            var req = (spectrum.getCurrentTime() + (diff * (-1) / 96)) / spectrum.getDuration();
           
            req < 0 ? req = 0 : req = req;
            req > 1 ? req = 1 : req = req;
            spectrum.seekTo(req);

          }
        })
        $(window).on("mouseup", function (e) {
          dragging = false;
        })
      }
    })//Window.onload function end for mouse events

    //Function on scrolling to seek spectrum  
    document.getElementById("peaks-container").addEventListener("wheel", function (event) {

      /*if (parseInt($("#peaks-container").css("marginTop").replace("px", "")) < -100) {
        $("#top-div-for-scrolling-enabling").css({ "display": "none" });
      } else if (parseInt($("#peaks-container").css("marginTop").replace("px", "")) > -100) {
        $("#top-div-for-scrolling-enabling").css({ "display": "block" });
      }*/

      if (!confirmChangesboxBool) {
        if (spectrum.isPlaying()) {
          spectrum.pause();
          $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
        }
        var req = (spectrum.getCurrentTime() + (event.deltaY / 96)) / spectrum.getDuration();
        req < 0 ? req = 0 : req = req;
        req > 1 ? req = 1 : req = req;
        spectrum.seekTo(req);
      }
    });

    document.getElementById("top-div-for-scrolling-enabling").addEventListener("wheel", function (event) {
      if (!confirmChangesboxBool) {
        if (spectrum.isPlaying()) {
          spectrum.pause();
          $("#play-button").find($(".fa")).toggleClass('fa-pause fa-play');
        }
        var req = (spectrum.getCurrentTime() + (event.deltaY / 96)) / spectrum.getDuration();
        req < 0 ? req = 0 : req = req;
        req > 1 ? req = 1 : req = req;
        spectrum.seekTo(req);
      }
    });

    //Scroll Function Ends


    window.addEventListener("scroll", function (event) {
      event.preventDefault();
    })

    //function to display the textarea and speakerfield
    function displayArea() {
      var val = document.getElementById("annotation-type");
      if (val.value !== "default" && val.value !== "Singing") {
        document.getElementById("speaker-name").value = val.value;
        document.getElementById("transcription-area").value = "";
        document.getElementById("transcription-area").style.display = "none";
        document.getElementById("speaker-name").style.display = "none";
      }
      else {
        document.getElementById("transcription-area").style.display = "inline-table";
        document.getElementById("speaker-name").style.display = "block";
      }
    }

    //function on spectrum ready
    spectrum.on("ready", function () {      

      //Hiding Annotation Div
      $("#annotation-box").hide();
      //function on ctrl+quote key down and ctrl+colon
      ctrlquote();
      ctrlcolon();


      getPreviousCreatedSegments();

      //Creating a new region on plus button click
      $("#plus-button").on("click", function () {
        if (!updateTopDivSpeaker) {
          addRegion();
        }
      });
    });//spectrum on ready function end

    function getPreviousCreatedSegments() {
      //ajax to create previously created segments by user on spectrum load
      $.ajax({
        method: "POST",
        url: "/get-transperfect-created-segments",
        data: {
          userId: user_id,
          audioId: audio_id
        },
        async: true,
        success: function (response) {

          
          for (var i = 0; i < response.length; i++) {            
            const {
                segmentId,                
                segmentStart,
                segmentEnd,
                actualText,
                finalTextDisplay,
                iteration,
                micActivationAttempt,
                micClose,
                micOpen,
                micTap,
                promptId,                
                take,
                utteranceDisplayStart,
                utteranceDisplayEnd,
                utteranceEnd,
                utteranceFirstWordEnd,
                utteranceStart,
                utteranceText
            }=response[i];           

            //creating Segments 
            spectrum.addRegion({
              id: segmentId,
              start: segmentStart,
              end: segmentEnd,
              drag: false,
              color: "rgba(0,0,0,0)"
            })            
            //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
            createTransperfectSegments(segmentId,                
                segmentStart,
                segmentEnd,
                actualText,
                finalTextDisplay,
                iteration,
                micActivationAttempt,
                micClose,
                micOpen,
                micTap,
                promptId,                
                take,
                utteranceDisplayStart,
                utteranceDisplayEnd,
                utteranceEnd,
                utteranceFirstWordEnd,
                utteranceStart,
                utteranceText);
          }

          //ajax to check if the user has already submitted
          $.ajax({
            method: "POST",
            url: "/get-submitted-or-not",
            data: {
              user_id: user_id,
              audio_id: audio_id
            },
            async: true,
            success: function (response) {
              if (response.length > 0) {
                is_submitted = response[0]["is_submitted"];
                //Checking if already submitted
                if (is_submitted == "TRUE") {
                  //$("#display-training-segments").show();//Display Select Tag For Correct Segments
                  //console.log("Euta log");
                  disableAllInterfaceOnSubmit();
                  ajaxReq();//Ajax Request to check correct incorrect segment
                  //displayHamburger();
                  $("#submit-button").hide();
                  $("#profile-link-button").show();
                  if(!location.hash){
                    $("#already-submitted-dialouge-box").show();
                    $("body").not("#already-submitted-dialouge-box").css({
                      backgroundColor: "#c2c1c0",
                      opacity: "0.8"
                    })
                    //Boolean to stop user from using LT
                    confirmChangesboxBool = true;
                  }
                  
                }
              }
            }
          })
        }
      })
    }

    //Saving Segments On Save Button Click
    $("#annotation-save").on("click", function () {
      saveClick();

    });

    //onClick for close(X) button on Annotation Box
    $("#close").on("click", function () {
      updateSegments = true;
      updateAnnotationOnClick = false;
      updateTopDivSpeakerOnClick = false;
      if (updateAnnotationOnChange) {
        confirmDialogue();
        confirmChangesboxBool = true;
      } else {
        $("#annotation-box").hide();
        addRegionBool = true;
      }
      //current region highlight
      highlightRegion();
    });

    $("#top-div-control-close-button").on("click", function () {
      if (updateTopDivSpeaker) {
        confirmDialogue();
      } else {
        $("#top-div-speaker-control").hide();

      }
    });

    //Remove Region             
    $("#annotation-remove").on("click", function () {
      updateSegments == true;
      var regionId = currentId;
      //ajax request to remove segments
      var params = {
        segmentId:regionId,
        userId:user_id,
        audioId: audio_id
      }
      if (regionId != null) {
        $.ajax({
          method: "POST",
          url: "/remove-transperfect-user-segments",
          data: params,
          success: function () {
            //Hiding Annotation Div      
            $("#annotation-box").hide();
            ////console.log("Removed");
            updateAnnotationOnChange = false;
            updateAnnotationOnClick = false;
            //Changed RegionId to CurrentId
            if (spectrum.regions.list[regionId] != null) {
              spectrum.regions.list[regionId].remove();
            }
            $("#" + regionId).empty();
            $("#" + regionId).remove();
          }
        });
      }
      addRegionBool = true;
    });//Remove Region Function End

    //Remove top speaker divs
    $("#top-div-control-remove-button").on("click", function () {
      removeTopDivSpeakers(getTopClickedId);
    });

    function removeTopDivSpeakers(topSpeakerClickedId) {
      //Getting the clicked Top Div Class
      var getClickedIdClass = document.getElementById(topSpeakerClickedId).className;
      //console.log(getClickedIdClass);
      //Checking if the segments of the class still remain
      if ($("#peaks-container").children().hasClass(getClickedIdClass)) {

        topSpeakerRemoveDialougeBox();
      } else {
        //Removing top div
        $("#" + topSpeakerClickedId).remove();
        $("#top-div-speaker-control").hide();
        updateTopDivSpeakerOnClick = false;
        updateTopDivSpeaker = false;
        //console.log("Class Not Found");
      }
    }

    //function to save all top div speakers
    $("#top-div-control-save-button").on("click", function () {
      saveTopDivSpeakers(getTopClickedId);
    });

    function saveTopDivSpeakers(topSpeakerClickedId) {
      //Getting the clicked Top Div Class
      var getClickedIdClass = document.getElementById(topSpeakerClickedId).className;
      var speakerNameFound = false;
      var userInputTopSpeakerName = $("#top-div-control-speaker-name").val();
      if (spellCheckSpeakerName(userInputTopSpeakerName,"speaker")) {
        document.getElementById(topSpeakerClickedId).className = userInputTopSpeakerName.replace(/ /g, "-");
        document.getElementById(topSpeakerClickedId).querySelector("p").innerText = userInputTopSpeakerName;
        $("#peaks-container").children().each(function (index, value) {
          if (this.className == getClickedIdClass) {
            speakerNameFound = true;
            //console.log(this.className);
            this.className = userInputTopSpeakerName.replace(/ /g, "-");
          }
        });
        if (speakerNameFound) {
          params = {
            userInputTopSpeakerName: userInputTopSpeakerName,
            previousTopSpeakerName: getClickedIdClass.replace(/-/g, " "),
            user_id,
            audio_id: audio_id
          }

          $.ajax({
            method: "POST",
            url: "/top-speaker-control-save-button",
            data: params,
            success: function (response) {
              //console.log("Top Speakers Name Updated");
              updateTopDivSpeaker = false;
              updateTopDivSpeakerOnClick = false;
            }
          })
        };
      } else {
        emptySpeaker();
      }
      //console.log(userInputTopSpeakerName);
    }
    //save top div speakers function end 

    //First Navigator Turn Button
    $("#top-speaker-first-navigator-button").on("click", function () {
      navigateTurnsFirstButton(getTopClickedId);
    });

    function navigateTurnsFirstButton(topSpeakerClickedId) {
      var getClickedIdClass = document.getElementById(topSpeakerClickedId).className;
      if ($("#peaks-container").children().hasClass(getClickedIdClass)) {
        var firstSegmentId = $(`#peaks-container .${getClickedIdClass}`)[0].id;
        var firstSegmentStartTime = spectrum.regions.list[firstSegmentId].start;
        spectrum.seekTo(firstSegmentStartTime / spectrum.getDuration());
      }
    }

    //first navigator function end

    //second navigator function start
    $("#top-speaker-last-navigator-button").on("click", function () {
      navigateTurnsLastButton(getTopClickedId);
    });

    function navigateTurnsLastButton(topSpeakerClickedId) {
      var getClickedIdClass = document.getElementById(topSpeakerClickedId).className;
      if ($("#peaks-container").children().hasClass(getClickedIdClass)) {
        var lastSegmentId = $(`#peaks-container .${getClickedIdClass}`)[$(`#peaks-container .${getClickedIdClass}`).length - 1].id;

        var lastSegmentStartTime = spectrum.regions.list[lastSegmentId].start;
        spectrum.seekTo(lastSegmentStartTime / spectrum.getDuration());
      }

    }

    //Second Navigator Function End

    //displaying contents on audio processing
    spectrum.on("audioprocess", () => {
      if (spectrum.regions.getCurrentRegion() != null && !updateAnnotationOnChange && !updateTopDivSpeaker) {
          //Check If same segments
        let spectrumRegionId=spectrum.regions.getCurrentRegion().id;        
        
        if(currentId!=spectrum.regions.getCurrentRegion().id){        
            displayCurrentContents();
            highlightRegion();  
        }
        //currentId = spectrum.regions.getCurrentRegion().id;        
      }
    })

    //Seeking Specturm
    spectrum.on("seek", function () {
      //Displaying Current Segments Contents in our Annotation Box      
      if (!updateTopDivSpeaker) {
        displayCurrentContents();
      }
      //Displaying submit button only if audio is played to last and 10 segements are created    
      if ((spectrum.getCurrentTime() > (spectrum.getDuration() - 0.1)) && ($("#peaks-container").children("div").length > 10)) {
        //console.log(is_submitted);
        if (is_submitted == "FALSE") {
          $("#submit-button").show();
        }

      }else{
          $("#submit-button").hide();
      }
    });

    var colorArr=[];
    //colorPicker
    function getRandomColor() {
      
      var hue = Math.floor(Math.random() * 360);        
      
      
    return `hsl(${hue},100%,90%)`;
      
    }

    var zindexLoop = 1000;

    
   

    //function to update Segment Start on start time change
    function updateSegmentonTimeChange() {
      // if (updateSegments) {
      updateAnnotationOnChange = true;
      var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + ($("#annotation-start-milliseconds").val());
      var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + ($("#annotation-end-milliseconds").val());

      if (spectrum.regions.list[currentId] != null) {
        ////console.log("Id" + currentId);
        if ((parseFloat(ending) - parseFloat(starting)) < 0.100 && (parseFloat(ending) - parseFloat(starting)) >= 0) {
          spectrum.regions.list[currentId].update({
            start: starting,//-0.050,
            end: parseFloat(ending) + 0.01//+900
          });
          hundredMillisecSegmentCheck = false;
          segmentEndingTimeMoreThanStartingTime = false;
        } else if ((parseFloat(ending) - parseFloat(starting)) < 0) {
          ////console.log(ending);
          ////console.log(starting);
          spectrum.regions.list[currentId].update({
            end: starting,
            start: ending
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = true;
        } else {
          spectrum.regions.list[currentId].update({
            start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + $("#annotation-start-milliseconds").val(),
            end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + $("#annotation-end-milliseconds").val()
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = false;
        }

        //highlight clicked region
        highlightRegion();

        newStartTime = spectrum.regions.list[currentId].start;
        newEndTime = spectrum.regions.list[currentId].end;
        ////console.log(newStartTime);
        var progress1 = newStartTime / spectrum.getDuration();
        var progress2 = (newEndTime - newStartTime) / spectrum.getDuration();
        var minPxDelta = 1 / spectrum.params.pixelRatio;
        var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
        var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;

        if ($("#peaks-container").children().is("#" + currentId)) {
          document.getElementById(currentId).style.left = pos + "px";
          document.getElementById(currentId).style.width = pos1 + "px";
        }

        //Change start and end on change
        segmentStart = spectrum.regions.list[currentId].start;
        segmentEnd = spectrum.regions.list[currentId].end;
      }
    }//Update Segment On Change End

    //function to check changes on top div speaker control
    function updateTopSpeakerControl() {
      updateTopDivSpeaker = true;
    }

//function for annotation contents change on click
    function changeAnnotationOnClick(evt) {
      //Displaying Annotation Div
      if (!updateTopDivSpeaker) {
        $("#top-div-speaker-control").hide();
        $("#annotation-box").show();
      }

      if (!updateAnnotationOnChange && !updateTopDivSpeaker) {
        var clickedId = evt.target.id;
        currentId = evt.target.id;
        //highlight clicked region
        highlightRegion();
        //Changed currentId to clicked Id to check if it works, works until now 
        currentStartTime = spectrum.regions.list[clickedId].start;
        currentEndTime = spectrum.regions.list[clickedId].end;
        ////console.log(clickedId);

        //segment start variables
        var startMinute = secondsToMinutes(spectrum.regions.list[clickedId].start);
        var startSeconds = secondsToSeconds(spectrum.regions.list[clickedId].start);
        var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[clickedId].start);

        //segment end variables
        var endMinute = secondsToMinutes(spectrum.regions.list[clickedId].end);
        var endSeconds = secondsToSeconds(spectrum.regions.list[clickedId].end);
        var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[clickedId].end);

        //displaying texts   
        $("#annotation-start-minute").val(startMinute);
        $("#annotation-start-seconds").val(startSeconds);
        $("#annotation-start-milliseconds").val(startMilliseconds);
        $("#annotation-end-minute").val(endMinute);
        $("#annotation-end-seconds").val(endSeconds);
        $("#annotation-end-milliseconds").val(endMilliseconds);

        if ($("#peaks-container").children().is("#" + clickedId) > 0) {          
          var divColor = document.getElementById(clickedId).style.background;

          //changing color of Annotation Heading
          $(".annotation-editHeading").css("backgroundColor", divColor);

          setTransperfectFields(clickedId);           
        }
      }
    };

    function changeTopSpeakerDivControlOnClick(event) {
      if (!updateAnnotationOnChange && !updateTopDivSpeaker) {
        getTopClickedId = event.target.id;
        var getTopClickedClass = document.getElementById(getTopClickedId).className.replace(/-/g, " ");

        displayTopDivSpeakersControls(getTopClickedClass);
      }
    }

    //function to display top div speakers on click
    function displayTopDivSpeakersControls(speakerName) {
      if (!updateAnnotationOnChange) {
        $("#annotation-box").hide();
        $("#top-div-speaker-control").show();
        $("#top-div-control-speaker-name").val(speakerName);
      }
    }


    //function for annotation contents change on click    
    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area").on("click", function () {
      updateAnnotationOnClick = true;

    });

    //function to check if top div speaker control is clicked
    $("#top-div-control-speaker-name").on("click", function () {
      updateTopDivSpeakerOnClick = true;
    });

    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area,#top-div-control-speaker-name").on("focusout", function () {
      if (updateAnnotationOnClick) {
        updateAnnotationOnClick = false;

      }
      if (updateTopDivSpeakerOnClick) {
        updateTopDivSpeakerOnClick = false;
      }
    })

    $(".annotation-time-class, .annotation-time-ms-class, #annotation-type, #speaker-name, #transcription-area").on("change", function () {
      updateSegmentonTimeChange();
    });

    $("#top-div-control-speaker-name").on("change", function () {
      updateTopDivSpeaker = true;
    });



    //function to highlight current region
    function highlightRegion() {
      var highlightId = currentId;
      //////console.log(spectrum.regions.list[highlightId].element);

      Object.keys(spectrum.regions.list).forEach(function (id) {
        var region = spectrum.regions.list[id];
        if (region.id == highlightId) {
          region.element.children[0].style.backgroundColor = "rgba(94, 196, 247,1)";
          region.element.children[1].style.backgroundColor = "rgba(94, 196, 247,1)";
          region.element.style.backgroundColor = "rgba(168,221,227,0.6)";
          if ($("#peaks-container").children().is("#" + highlightId)) {
            //document.getElementById(highlightId).style.opacity = "0.8";
            document.getElementById(highlightId).style.boxShadow = "1px 1px 10px";
            //$("#annotation-box").show();
          }
        } else {
          region.element.children[0].style.backgroundColor = "rgba(0,0,0,0)";
          region.element.children[1].style.backgroundColor = "rgba(0,0,0,0)";
          region.element.style.backgroundColor = "rgba(0,0,0,0)";
          if ($("#peaks-container").children().is("#" + region.id)) {
            //document.getElementById(region.id).style.opacity = "1"
            document.getElementById(region.id).style.boxShadow = "0.8px 0.8px 2px";
            //$("#annotation-box").show();
          }

        }
      })
    }//Highlight Region End


    //function to save data to database on saveClick
    function saveClick() {        
        segmentStart = spectrum.regions.list[currentId].start;
        segmentEnd = spectrum.regions.list[currentId].end;
        var take = $("#annotation-take").val().trim()===""?1:$("#annotation-take").val();
        var micActivationAttempt = $("#mic-activation-attempt").val().trim()===""?1:$("#annotation-take").val();        
        var iteration = $("#annotation-iteration").val().trim()===""?1:$("#annotation-take").val();
        var micTap =parseAnnotationTime($("#micTap-minute").val(),$("#micTap-seconds").val(),$("#micTap-milliseconds").val());
        var micOpen=parseAnnotationTime($("#micOpen-start-minute").val(),$("#micOpen-start-seconds").val(),$("#micOpen-start-milliseconds").val());
        var micClose=parseAnnotationTime($("#micOpen-end-minute").val(),$("#micOpen-end-seconds").val(),$("#micOpen-end-milliseconds").val());
        var utteranceStart=parseAnnotationTime($("#utterance-start-minute").val(),$("#utterance-start-seconds").val(),$("#utterance-start-milliseconds").val());
        var utteranceEnd=parseAnnotationTime($("#utterance-end-minute").val(),$("#utterance-end-seconds").val(),$("#utterance-end-milliseconds").val())
        var utteranceFirstWordEnd=parseAnnotationTime($("#first-word-minute").val(),$("#first-word-seconds").val(),$("#first-word-milliseconds").val());
        var utteranceDisplayStart=parseAnnotationTime($("#utterance-display-start-minute").val(),$("#utterance-display-start-seconds").val(),$("#utterance-display-start-milliseconds").val());
        var utteranceDisplayEnd=parseAnnotationTime($("#utterance-display-end-minute").val(),$("#utterance-display-end-seconds").val(),$("#utterance-display-end-milliseconds").val());
        var finalTextDisplay=parseAnnotationTime($("#final-text-minute").val(),$("#final-text-seconds").val(),$("#final-text-milliseconds").val());
        var promptId=$("#prompt-Id").val().trim()===""?null:$("#prompt-Id").val();
        var actualText=$("#transcription-area").val();
        var utteranceText=$("#utterance-text-area").val();

        //ajax Request to Create    
        var params = {
          take,
          micActivationAttempt,
          iteration,
          micTap,
          micOpen,
          micClose,
          utteranceStart,
          utteranceEnd,
          utteranceFirstWordEnd,
          utteranceDisplayStart,
          utteranceDisplayEnd,
          finalTextDisplay,
          promptId,
          actualText,
          utteranceText,
          segmentStart,
          segmentEnd,          
          userId:user_id,
          audioId: audio_id
        }

      if (updateSegments == false) {
        ////console.log("New Save Click");

        
        ////console.log(checkOverlappingDiv(speakerName, segmentStart, segmentEnd));
        if ( hundredMillisecSegmentCheck && !segmentEndingTimeMoreThanStartingTime && (!checkOverlappingDiv(segmentStart, segmentEnd))) {
          
            //Var to store id from database
            var segmentIdFromDatabase = 0;

            $.ajax({
              method: "POST",
              url: "/create-transperfect-segment",
              data: params,
              async: true,
              success: function (response) {                                  
                segmentIdFromDatabase = response.segmentId;                
                $(`region[data-id=${currentId}]`).attr("data-id", segmentIdFromDatabase);
                spectrum.regions.list[currentId].id = segmentIdFromDatabase;
                spectrum.regions.list[segmentIdFromDatabase] = spectrum.regions.list[currentId];
                delete spectrum.regions.list[currentId];
                if (!updateAnnotationOnChange) {//Only if new segment is created
                  window.currentId = segmentIdFromDatabase;
                  window.segment_id = segmentIdFromDatabase;
                }
                //Create Div 
                createTransperfectSegments(
                    segmentIdFromDatabase, 
                    segmentStart, 
                    segmentEnd, 
                    actualText,
                    finalTextDisplay,
                    iteration,
                    micActivationAttempt,
                    micClose,
                    micOpen,
                    micTap,
                    promptId,
                    take,
                    utteranceDisplayStart,
                    utteranceDisplayEnd,
                    utteranceEnd,
                    utteranceFirstWordEnd,
                    utteranceStart,
                    utteranceText,
                    );

              }
            })
            
            updateAnnotationOnChange = false;
            updateAnnotationOnClick = false;

            //Hiding Annotation Div      
            $("#annotation-box").hide();

            //setting update segments bool to true to allow updating
            updateSegments = true;          
        } else {          
          if (!hundredMillisecSegmentCheck) {
            ////console.log("Less Than Hundred Milliseconds");
            hundredMillisecondsSegmentGap();
          } else if (segmentEndingTimeMoreThanStartingTime) {
            ////console.log("End Time More Than Start Time");
            endTimeMoreThanStartTime();
          } else if ((checkOverlappingDiv(segmentStart, segmentEnd))) {
            ////console.log("New Div for Overlapping");
            sameSpeakerOverlappingDialougeBox();
          }
        }
      } else if (updateAnnotationOnChange == true) {        
        var segmentId = currentId;
        var annotationText = "";
        var speakerName = "";
        var annotationType = "";
        var segmentclass = document.getElementById("speaker-name").value;
        ////console.log(segmentclass.replace(" ", "-"));
        var val = document.getElementById("annotation-type");   
            
            $("#annotation-div").children().each(function (index, value) {
              if (value.className == "speaker") {                               
                if (!checkOverlappingDiv( newStartTime, newEndTime)) {                  
                  
                  // annotationText = $("#transcription-area").val();
                  document.getElementById(segmentId).querySelector("p").innerText = actualText;
                  document.getElementById(segmentId).style.background = value.style.backgroundColor;                  
                  
                  document.getElementById(segmentId).style.top = "inherit";
                }
              }
            });
        

        //ajax Request To Update        
        if ( hundredMillisecSegmentCheck && !segmentEndingTimeMoreThanStartingTime && !checkOverlappingDiv(newStartTime, newEndTime)) {
          ////console.log("Update vairako");
          $.ajax({
            method: "POST",
            url: "/update-transperfect-segment",
            data: params,
            success: function () {
            }
          })
          //Hiding Annotation Div      
          $("#annotation-box").hide();
          updateAnnotationOnChange = false;
          updateAnnotationOnClick = false;

        } else {
           if (!hundredMillisecSegmentCheck) {
            ////console.log("Less Than Hundred Milliseconds");
            hundredMillisecondsSegmentGap();
          } else if (segmentEndingTimeMoreThanStartingTime) {
            ////console.log("End Time More Than Start Time");
            endTimeMoreThanStartTime();
          } else if (checkOverlappingDiv(newStartTime, newEndTime)) {
            ////console.log("Overlapping Speakser");
            sameSpeakerOverlappingDialougeBox();
          }
        }
      }
    }

//function for ctrl+singlequote for region end time
    function ctrlquote(currentregionId) {
      $("html").on("keydown", function (event) {
        if (event.ctrlKey && event.which == 222) {
          event.preventDefault();
          var currentTime = spectrum.getCurrentTime();
          updateAnnotationOnChange = true;
          updateAnnotationOnClick = true;
          //segment end variables
          var endMinute = secondsToMinutes(currentTime);
          var endSeconds = secondsToSeconds(currentTime);
          var endMilliseconds = secondsToMilliseconds(currentTime);

          //displaying texts          
          $("#annotation-end-minute").val(endMinute);
          $("#annotation-end-seconds").val(endSeconds);
          $("#annotation-end-milliseconds").val(endMilliseconds);


          var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + ($("#annotation-start-milliseconds").val());
          var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + ($("#annotation-end-milliseconds").val());

          createSegments(currentId, starting, ending);
        }
      });
    }

    function parseAnnotationTime(minute,second,millisecond){
        const value=parseInt(minute * 60) + parseInt(second) + "." + (millisecond);
        return value;
    }

    //function for ctrl+singlequote for region start time
    function ctrlcolon(currentregionId) {
      $("html").on("keydown", function (event) {
        if (event.ctrlKey && event.which == 186) {
          event.preventDefault();
          ////console.log("Pressed");
          var currentTime = spectrum.getCurrentTime();
          updateAnnotationOnChange = true;
          updateAnnotationOnClick = true;
          //segment end variables
          //segment start variables
          var startMinute = secondsToMinutes(currentTime);
          var startSeconds = secondsToSeconds(currentTime);
          var startMilliseconds = secondsToMilliseconds(currentTime);


          //displaying texts          
          $("#annotation-start-minute").val(startMinute);
          $("#annotation-start-seconds").val(startSeconds);
          $("#annotation-start-milliseconds").val(startMilliseconds);

          var starting = parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + ($("#annotation-start-milliseconds").val());
          var ending = parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + ($("#annotation-end-milliseconds").val());

          //Create Segments function call
          createSegments(currentId, starting, ending);
        }
      });
    }

    //Add New Region
    function addRegion() {
      //show annotation box
      if (!updateTopDivSpeaker) {
        $("#top-div-speaker-control").hide();
        $("#annotation-box").show();
      }

      /*
        Boolean to whether create new segment or delete previous new region and create new segment again
        Two New Segments Cannot Be Created
      */
      if (addRegionBool == true) {
        if (!updateAnnotationOnChange && !updateTopDivSpeaker) {

          renew();//Renew Annotation Box
          updateSegments = false;
          addRegionBool = false;
          segmentEnd = spectrum.getCurrentTime();
          if ((spectrum.getCurrentTime() - 2) < 0) {
            segmentStart = 0;
          } else {
            segmentStart = segmentEnd - 2;
          }

          spectrum.addRegion({
            id: segmentId,
            start: segmentStart,
            end: segmentEnd,
            drag: false,
            color: "rgba(0,0,0,0)"
          })
          currentId = segmentId;
          //highlighting current Region
          highlightRegion();

          //segment start variables
          var startMinute = secondsToMinutes(spectrum.regions.list[currentId].start);
          var startSeconds = secondsToSeconds(spectrum.regions.list[currentId].start);
          var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].start);

          //segment end variables
          var endMinute = secondsToMinutes(spectrum.regions.list[currentId].end);
          var endSeconds = secondsToSeconds(spectrum.regions.list[currentId].end);
          var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].end);

          //displaying texts   
          $("#annotation-start-minute").val(startMinute);
          $("#annotation-start-seconds").val(startSeconds);
          $("#annotation-start-milliseconds").val(startMilliseconds);
          $("#annotation-end-minute").val(endMinute);
          $("#annotation-end-seconds").val(endSeconds);
          $("#annotation-end-milliseconds").val(endMilliseconds);
        }
      } else {
        if (!updateAnnotationOnChange && !updateTopDivSpeaker) {
          spectrum.regions.list[segmentId].remove();
          updateSegments = true;
          addRegionBool = true;
          addRegion();
        }
      }

      spectrum.on("seek", function () {
        if (!updateTopDivSpeakerOnClick && !updateTopDivSpeaker && !updateAnnotationOnChange && !updateAnnotationOnClick && spectrum.regions.list[segmentId] != null) {
          spectrum.regions.list[segmentId].remove();
          updateSegments = true;
          addRegionBool = true;
        }
      })
    }//function addRegion end

    
    //function to renew annotation
    function renew() {
      $("#annotation-type").val("default");
      $("#speaker-name").val("");
      $("#transcription-area").val("");
      document.getElementById("transcription-area").style.display = "inline-table";
      //document.getElementById("speaker-name").style.display = "block";
    }//renew function end


    //Repeat a region on repeat icon click
    $("#repeat-button").on("click", function () {
      repeatRegion();
      
    });

    //function for playback 
    $("#play_back_rate").on("click", function () {
      var rate = document.getElementById("play_back_rate").value.split("x");
      playBackRate(parseFloat(rate));
    })

    //function for playBackRate
    function playBackRate(rate) {
      spectrum.setPlaybackRate(rate);
    }//function for playBackRate End

    //function for split
    function splitRegion(textBeforeCursor = "", textAfterCursor = "") {
      if(spectrum.isPlaying()){
        spectrum.pause();
      }
      var getCurrentIdForSplit=currentId;
      var spectrumCurrentTime = spectrum.getCurrentTime();
      var regionStartTime = spectrum.regions.list[currentId].start;
      var regionEndTime = spectrum.regions.list[currentId].end;
      var prevDivTitle = document.getElementById(currentId).title;
      var prevDivClassName = document.getElementById(currentId).className.replace(/-/g, " ");
      var segmentText = document.getElementById(currentId).innerText;
      var preDivColor = document.getElementById(currentId).style.background;

      //updating Previous Region on split
      if (spectrum.regions.list[currentId] != null) {
        spectrum.regions.list[currentId].update({
          start: regionStartTime,
          end: spectrumCurrentTime - 0.01
        });
      }

      //updating previous div on Split     
      var progress2 = ((spectrumCurrentTime - 0.10) - regionStartTime) / spectrum.getDuration();
      var minPxDelta = 1 / spectrum.params.pixelRatio;
      var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;
      if ($("#peaks-container").children().is("#" + currentId)) {
        document.getElementById(currentId).style.width = pos1 + "px";
      }

      

      //previous Div text 
      document.getElementById(currentId).querySelector("p").innerText = textBeforeCursor;

      

      //ajax Request to Update Previous Division 
      var updateParams = {
        segmentId: currentId,
        speakerName: prevDivClassName,
        annotationType: prevDivTitle,
        segmentStart: regionStartTime,
        segmentEnd: spectrumCurrentTime - 0.010,
        annotationText: textBeforeCursor,
        user_id,
        audio_id: audio_id
      }

      $.ajax({
        method: "POST",
        url: "/update-on-split",
        data: updateParams,
        success: function () {
          ////console.log("Updated");
        }
      })

      //ajax Request to Create new row for splitted Div 
      var params = {
        speakerName: prevDivClassName,
        annotationType: prevDivTitle,
        segmentStart: spectrumCurrentTime + 0.010,
        segmentEnd: regionEndTime,
        annotationText: textAfterCursor,
        user_id,
        audio_id: audio_id
      }

      $.ajax({
        method: "POST",
        url: "/database",
        data: params,
        success: function (response) {
          ////console.log("Success");
          //creating new Segment on Split 
          spectrum.addRegion({
            id: response.insertId,
            start: spectrumCurrentTime + 0.010,
            end: regionEndTime,
            drag: false,
            color: "rgba(0,0,0,0)"
            })
              //$(`region[data-id=${getCurrentIdForSplit}]`).attr("data-id", response.insertId);
              // spectrum.regions.list[getCurrentIdForSplit].id = response.insertId;
                //spectrum.regions.list[response.insertId] = spectrum.regions.list[getCurrentIdForSplit];
                //delete spectrum.regions.list[getCurrentIdForSplit];

                //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText) 
          createTransperfectSegments(response.insertId, prevDivClassName, prevDivTitle, spectrumCurrentTime, regionEndTime, textAfterCursor);
            if (!updateAnnotationOnChange) {//Only if new segment is created
                
                  window.currentId = response.insertId;
                  window.segment_id = response.insertId;
          //    console.log(currentId);
            }
        }
      })
    }//split Region Function end

    $("#annotation-split").on("click", function () {
      //Split test
      var firstLength = ($("#transcription-area").prop("selectionStart"));//Cursor Position in transcription-area
      var reqText = $("#transcription-area").val();
      var textBeforeCursor = reqText.substring(0, firstLength);
      var textAfterCursor = reqText.substring(firstLength, reqText.length);
      ////console.log(reqText.substring(0, firstLength));
      ////console.log(reqText.substring(firstLength, reqText.length));
      if(spectrum.regions.getCurrentRegion()){
        splitRegion(textBeforeCursor, textAfterCursor);
        updateAnnotationOnChange = false;
        updateAnnotationOnClick = false;
      }      
    })

    //function for confirming changes on close click
    function confirmChanges() {
      //if changes were made in annotation box
      if (updateAnnotationOnChange) {
        //console.log("Update Annotation Cancel");
        //Hiding Annotation Div      
        $("#annotation-box").hide();
        updateAnnotationOnChange = false;
        if ($("#peaks-container").children().is("#" + currentId)) {
          spectrum.regions.list[currentId].update({
            start: currentStartTime,
            end: currentEndTime
          });

          //segment start variables
          var startMinute = secondsToMinutes(spectrum.regions.list[currentId].start);
          var startSeconds = secondsToSeconds(spectrum.regions.list[currentId].start);
          var startMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].start);

          //segment end variables
          var endMinute = secondsToMinutes(spectrum.regions.list[currentId].end);
          var endSeconds = secondsToSeconds(spectrum.regions.list[currentId].end);
          var endMilliseconds = secondsToMilliseconds(spectrum.regions.list[currentId].end);

          //displaying texts   
          $("#annotation-start-minute").val(startMinute);
          $("#annotation-start-seconds").val(startSeconds);
          $("#annotation-start-milliseconds").val(startMilliseconds);
          $("#annotation-end-minute").val(endMinute);
          $("#annotation-end-seconds").val(endSeconds);
          $("#annotation-end-milliseconds").val(endMilliseconds);

          var progress1 = currentStartTime / spectrum.getDuration();
          var progress2 = (currentEndTime - currentStartTime) / spectrum.getDuration();
          var minPxDelta = 1 / spectrum.params.pixelRatio;
          var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
          var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;

          document.getElementById(currentId).style.left = pos + "px";
          document.getElementById(currentId).style.width = pos1 + "px";

        } else {
          if (spectrum.regions.list[currentId]) {
            spectrum.regions.list[currentId].remove();
            //updateAnnotationOnChange = false;
          }
        }
      } else if (updateTopDivSpeaker) {
        //Hiding Annotation Div    
        //console.log("Update Top Div Cancel");
        $("#top-div-speaker-control").hide();
        updateTopDivSpeaker = false;
      }

    }

    //Function to create a cancel confirm Dialogue Box
    function confirmDialogue() {
      $("#confirmation-box").show();
      $("body").not("#confirmation-box").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for confirm click 
    $(".confirm-changes").on("click", function () {
      confirmChanges();
      addRegionBool = true;
      confirmChangesboxBool = false;
      $("#confirmation-box").hide();
      $("body").css({
        backgroundColor: "#fff",
        opacity: "1"
      })
    });

    //function to deny changes on close click
    $(".discard-changes").on("click", function () {
      //updateAnnotationOnChange = true;
      confirmChangesboxBool = false;
      $("#confirmation-box").hide();
      $("#empty-speaker").hide();
      $("#hundredMilliseconds-gap").hide();
      $("#endTime-moreThanStartTime").hide();
      $("#sameSpeaker-Overlapping").hide();
      $("#top-speaker-remove-dialouge-box").hide();
      $("body").css({
        backgroundColor: "#fff",
        opacity: "1"
      })
    });

    //function for guidelines Box
    $("#help-icon").on("click", function () {
      displayGuideLines();
    });

    $("#close-guidelines").on("click", function () {
      $("#guidelines-box").hide();
      $("body").css({
        backgroundColor: "#fff",
        opacity: "1"
      })
    })

    //Displaying guidelines 
    function displayGuideLines() {
      $("#guidelines-box").show();
      $("body").not("#guidelines-box").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      });
    }

    //Function for empty speaker Dialogue Box
    function emptySpeaker() {
      $("#empty-speaker").show();
      $("body").not("#empty-speaker").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for hundredMillisecondsSegmentCheck
    function hundredMillisecondsSegmentGap() {
      $("#hundredMilliseconds-gap").show();
      $("body").not("#hundredMilliseconds-gap").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for Segment End Time More than Start Time
    function endTimeMoreThanStartTime() {
      $("#endTime-moreThanStartTime").show();
      $("body").not("#endTime-moreThanStartTime").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function for same Overlapping Speaker Dialogue Box
    function sameSpeakerOverlappingDialougeBox() {
      $("#sameSpeaker-Overlapping").show();
      $("body").not("#sameSpeaker-Overlapping").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    };

    //function for top speaker div remove dialouge box
    function topSpeakerRemoveDialougeBox() {
      $("#top-speaker-remove-dialouge-box").show();
      $("body").not("#top-speaker-remove-dialouge-box").css({
        backgroundColor: "#d9dedb",
        opacity: "0.8"
      })
    }

    //function to check and create segments
    function createSegments(currentId, starting, ending) {
      if (spectrum.regions.list[currentId] != null) {
        ////console.log("Id" + currentId);
        if ((parseFloat(ending) - parseFloat(starting)) < 0.100 && (parseFloat(ending) - parseFloat(starting)) >= 0) {
          spectrum.regions.list[currentId].update({
            start: starting,
            end: parseFloat(ending) + 0.01
          });
          hundredMillisecSegmentCheck = false;
          segmentEndingTimeMoreThanStartingTime = false;
        } else if ((parseFloat(ending) - parseFloat(starting)) < 0) {
          spectrum.regions.list[currentId].update({
            end: starting,
            start: ending
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = true;
        } else {
          spectrum.regions.list[currentId].update({
            start: parseInt($("#annotation-start-minute").val() * 60) + parseInt($("#annotation-start-seconds").val()) + "." + $("#annotation-start-milliseconds").val(),
            end: parseInt($("#annotation-end-minute").val() * 60) + parseInt($("#annotation-end-seconds").val()) + "." + $("#annotation-end-milliseconds").val()
          });
          hundredMillisecSegmentCheck = true;
          segmentEndingTimeMoreThanStartingTime = false;
        }
      }

      //highlight clicked region
      highlightRegion();

      newStartTime = spectrum.regions.list[currentId].start;
      newEndTime = spectrum.regions.list[currentId].end;
      ////console.log(newStartTime);
      var progress1 = newStartTime / spectrum.getDuration();
      var progress2 = (newEndTime - newStartTime) / spectrum.getDuration();
      var minPxDelta = 1 / spectrum.params.pixelRatio;
      var pos = Math.round((progress1) * spectrum.drawer.getWidth()) * minPxDelta;
      var pos1 = Math.round((progress2) * spectrum.drawer.getWidth()) * minPxDelta;
      if ($("#peaks-container").children().is("#" + currentId)) {
        document.getElementById(currentId).style.left = pos + "px";
        document.getElementById(currentId).style.width = pos1 + "px";
      }
    }

    //Function to Check correct speakername
    function spellCheckSpeakerName(speakerName,type) {
      
      //console.log(speakerName);
      var splitSpeakerName = speakerName.split(" ");
    
      //console.log(splitSpeakerName[0]);
      if (splitSpeakerName[0] != "speaker" ) {
        console.log("Error Here");
        console.log(type)
        if (((type=="annotation") && (splitSpeakerName == "DTMF" || splitSpeakerName == "Applause" || splitSpeakerName == "Laughter" || splitSpeakerName == "Music" || splitSpeakerName == "Noise" || splitSpeakerName == "Ringtone")) || ((type=="speaker") && (splitSpeakerName[0] == "unidentifiable" && splitSpeakerName[1] == "speaker"))) {
          
          return true;
        } else if (splitSpeakerName[0] == "pre" && splitSpeakerName[1] == "recorded" && splitSpeakerName[2] == "speaker") {
          //Insert More Code Below if pre recorded speaker name is needed too!
          if (splitSpeakerName.length != 4) {
            //console.log("HERE")
            return false;
          }
          if (isNaN(splitSpeakerName[3])) {
            //console.log("HERE")
            return false;
          }
          return true;
        }
        //console.log("HERE")
        return false;
      }
      if (isNaN(splitSpeakerName[1])) {
        if (splitSpeakerName.length == 2 || splitSpeakerName.length == 3) {
          if (splitSpeakerName.length == 3) {
            if (!isCamelCase(splitSpeakerName[2])) {
              return false;
            }
          }
          if (!isCamelCase(splitSpeakerName[1])) {
            return false;
          }
        }
        else {
          return false;
        }
      } else {
        if (splitSpeakerName.length != 2) {
          return false;
        }
        if (isNaN(splitSpeakerName[1])) {
          return false;
        }
      }
      return true;
    };//Spell Check Speaker Name function end

    function isCamelCase(str) {
      var regexp = /^[A-Z][a-z]*$/;
      return regexp.test(str)
    }

    //function to check same overlapping div
    function checkOverlappingDiv( segmentStart, segmentEnd) {
      console.trace(1);
      var overlapping = false;
      var sameSpeakerParams = {
        user_id,        
      }
      
      Object.keys(spectrum.regions.list).forEach(function (region) {
        var previousSpeakerStart = spectrum.regions.list[region].start;
        var previousSpeakerEnd = spectrum.regions.list[region].end;

        //|| (segmentStart == previousSpeakerStart && segmentEnd == previousSpeakerEnd)
        if ((segmentStart > previousSpeakerStart && segmentStart < previousSpeakerEnd) || //(segmentStart == previousSpeakerStart && segmentEnd == previousSpeakerEnd)||
          (segmentEnd > previousSpeakerStart && segmentEnd < previousSpeakerEnd) || (previousSpeakerStart > segmentStart && previousSpeakerStart < segmentEnd)) {
              overlapping=true;          
        }
      });
      return overlapping;
    }//Check OverLapping Div function End

    //function for promises and ajax request on submit
    function ajaxReq() {
      ////console.log("Hawa ");
      if (Object.keys(spectrum.regions.list).length == 0 || overallScore < 0) {
        overallScore = 100;
      } else {
        var promise = new Promise((resolve, reject) => {
          $.ajax({
            method: "POST",
            data: { audio_id: audio_id },
            url: "/get-reviews",
            async: false,
            success: function (actualResponse) {
              $.ajax({
                method: "POST",
                url: "/get-segments",
                data: {
                  user_id: user_id,
                  audio_id: audio_id
                },

                async: false,
                success: function (postResponse) {
                  actualResponseLength = actualResponse.length;

                  for (var i = 0; i < actualResponseLength; i++) {
                    var minStartValue = 0;
                    var minEndValue = 0;
                    var minDifference = 5;
                    var nearestStartSegment = 20;
                    var nearestStartSegment = 20;
                    var {
                      segment_id: actualsegmentId,
                      div_className: actualspeakerName,
                      div_title: actualannotationType,
                      segment_start: actualsegmentStart,
                      segment_end: actualsegmentEnd,
                      annotation_text: actualannotationText
                    } = actualResponse[i];
                    ////console.log(actualsegmentId + " " + i);
                    var color = "";
                    for (var j = 0; j < postResponse.length; j++) {
                      var {
                        segment_id: postssegmentId,
                        div_className: postsspeakerName,
                        div_title: postsannotationType,
                        segment_start: postssegmentStart,
                        segment_end: postssegmentEnd,
                        annotation_text: postsannotationText
                      } = postResponse[j];
                      //   var postssegmentId = postResponse[j]["segment_id"];
                      //   var postsspeakerName = postResponse[j]["div_className"];
                      //   var postsannotationType = postResponse[j]["div_title"];
                      //   var postssegmentStart = postResponse[j]["segment_start"];
                      //   var postssegmentEnd = postResponse[j]["segment_end"];
                      //   var postsannotationText = postResponse[j]["annotation_text"];
                      if (
                        Math.abs(actualsegmentStart - postssegmentStart) <
                        minDifference
                      ) {
                        minDifference = Math.abs(
                          actualsegmentStart - postssegmentStart
                        );
                        nearestStartSegment = Math.abs(
                          actualsegmentStart - postssegmentStart
                        );
                        nearestEndSegment = Math.abs(
                          actualsegmentStart - postssegmentStart
                        );
                        minStartValue = postssegmentStart;
                        minEndValue = postssegmentEnd;
                      }
                      if (
                        parseFloat(actualsegmentStart) -
                        parseFloat(postssegmentStart) <=
                        0.003 &&
                        parseFloat(actualsegmentStart) -
                        parseFloat(postssegmentStart) >=
                        0 &&
                        parseFloat(actualsegmentEnd) -
                        parseFloat(postssegmentEnd) <=
                        0.003 &&
                        parseFloat(actualsegmentEnd) -
                        parseFloat(postssegmentEnd) >=
                        0 &&
                        actualspeakerName == postsspeakerName &&
                        actualannotationType == "default"
                      ) {
                        //Correct Segment Created
                        correctSegmentCreated = true;
                        ////console.log("c" + parseFloat(actualsegmentStart));
                        ////console.log(actualspeakerName);
                        ////console.log(postsspeakerName);
                        break;
                      } else if (
                        parseFloat(actualsegmentStart) -
                        parseFloat(postssegmentStart) <=
                        0.005 &&
                        parseFloat(actualsegmentStart) -
                        parseFloat(postssegmentStart) >=
                        0 &&
                        parseFloat(actualsegmentEnd) -
                        parseFloat(postssegmentEnd) <=
                        0.005 &&
                        parseFloat(actualsegmentEnd) - parseFloat(minEndValue) >=
                        0 &&
                        actualspeakerName == postsspeakerName &&
                        actualannotationType != "default"
                      ) {
                        //Correct Segment Created
                        ////console.log(actualspeakerName);
                        ////console.log("c" + parseFloat(actualsegmentStart));
                        ////console.log(postsspeakerName);
                        correctSegmentCreated = true;
                        break;
                      } else {
                        if (
                          parseFloat(actualsegmentStart) -
                          parseFloat(postssegmentStart) <=
                          0.005 &&
                          parseFloat(actualsegmentStart) -
                          parseFloat(postssegmentStart) >=
                          0 &&
                          parseFloat(actualsegmentEnd) -
                          parseFloat(postssegmentEnd) <=
                          0.005 &&
                          parseFloat(actualsegmentEnd) -
                          parseFloat(postssegmentEnd) >=
                          0 &&
                          actualspeakerName != postsspeakerName &&
                          actualannotationType != "default"
                        ) {
                          overallScore += 1;
                          wrongAnnotationScore += 1;
                          ////console.log(                            "score Incorrect Annotation " + wrongAnnotationScore                          );
                          ////console.log(postsspeakerName);
                          ////console.log(actualspeakerName);
                        }
                        if (
                          parseFloat(actualsegmentStart) -
                          parseFloat(postssegmentStart) <=
                          0.005 &&
                          parseFloat(actualsegmentStart) -
                          parseFloat(postssegmentStart) >=
                          0 &&
                          parseFloat(actualsegmentEnd) -
                          parseFloat(postssegmentEnd) <=
                          0.005 &&
                          parseFloat(actualsegmentEnd) -
                          parseFloat(postssegmentEnd) >=
                          0 &&
                          actualspeakerName != postsspeakerName &&
                          actualannotationType == "default"
                        ) {
                          overallScore += 1;
                          wrongSpeakerScore += 1;
                          ////console.log(                            "score Speaker Incorrect " + wrongSpeakerScore
                          //);
                          ////console.log(postsspeakerName);
                          ////console.log(actualspeakerName);
                        }
                        //Incorrect Segement created
                        correctSegmentCreated = false;
                      }
                    }
                    ////console.log(correctSegmentCreated);
                    //creating Segments
                    spectrum.addRegion({
                      id: actualsegmentId + 100000,
                      start: actualsegmentStart,
                      end: actualsegmentEnd,
                      drag: false,
                      color: "rgba(0,0,0,0)"
                    });
                    //createDiv(divId,divClass,divTitle,segmentStart,segmentEnd,annotationText)
                    createTransperfectSegments(
                      actualsegmentId + 100000,                      
                      actualsegmentStart,
                      actualsegmentEnd,
                      "",
                      true
                    );
                  }
                  unnecessarySegmentsErrors +=
                    Math.abs(actualResponseLength - postsResponseLength) * 2;
                  overallScore = overallScore + unnecessarySegmentsErrors;
                  ////console.log("Total Score " + (100 - overallScore));
                  //Checking Pass or Fail
                  if (100 - overallScore > 60) {
                    passOrFail = "PASS";
                  } else {
                    passOrFail = "FAIL";
                  }
                  //Disallowing Clicking and Changing Values if the Submit request was successful
                  ////console.log("Submit Clicked");
                  disableAllInterfaceOnSubmit();
                  resolve();
                }
              });
            }
          });
        });
      }
    }//ajaxReq function end

    $("#select-display-training-segments").on("change",function(){
      displayCorrectSegment();
    });

  //Display Correct Training Segments 
    function displayCorrectSegment(){
      var selected=$("#select-display-training-segments").val();
      //console.log(selected);
      if(selected=="on"){
        $("#peaks-container").children().each(function (index, value) {
          if (this.getAttribute("actual") == "true") {
            $(this).show();
          }
          //console.log(this.getAttribute("actual"));
        });
      }else if(selected=="off"){
       $("#peaks-container").children().each(function (index, value) {
          if (this.getAttribute("actual") == "true" ) {
            $(this).hide();
          }
          //console.log(this.getAttribute("actual"));
        });
      }
    }


    //Function to Display Errors and hamburger icons
    function displayHamburger() {
      $("#errorToggle").show();
      $("#speaker-labelling-error").text(`Speaker Labelling Error: ` + wrongSpeakerScore);
      $("#annotation-labelling-error").text(`Annotation Labelling Error: ` + wrongAnnotationScore);
      $("#unnecessary-segments-errors").text(`Unnecessary Segments Error: ` + unnecessarySegmentsErrors);
      $("#total-errors").text(`Your Overall Score: ${100 - overallScore}%`);
    }//display Hamburger End

    //function to display Errors Menu
    $("#displayErrorCB").on("click", function () {
      var isChecked = $("#displayErrorCB").is(":checked");
      ////console.log($("#displayErrorCB").is(":checked"));
      if (!$("#displayErrorCB").is(":checked")) {
        $("#errorMenu").not(".showHamburger").show();
        $(".showHamburger").hide();
        $("#closeHamburger").show();
      } else {
        $("#errorMenu").hide();
        $(".showHamburger").show();
        $("#closeHamburger").hide();
      }
    });//Display Error Menu Close


    //Function to store scores in database Users Table
    function saveScores() {
      ////console.log(overallScore);
      var todayDate = new Date();
      params = {
        user_id,
        audio_id: audio_id,
        wrongSpeakerScore,
        wrongAnnotationScore,
        unnecessarySegmentsErrors,
        overallScore: 100 - (overallScore),
        passOrFail,
        is_submitted: "TRUE"
      }
      $.ajax({
        method: "POST",
        url: "/save-test-score-on-users_audio_table",
        data: params,
        success: function () {
          ////console.log("Success");
        }
      })
    };//Save Scores Function End

    //Function to call on submit click
    $("#submit-button").on("click", function () {

      //submitClick();    
      ajaxReq();
      displayHamburger();
      saveScores();
      $("#submit-button").hide();
      $("#profile-link-button").show();
      logEvent("Audio Test Submitted - S");
      getWebAppId();
    });//Submit Button Click Function End

    function getWebAppId() {
      $.ajax({
        method: "POST",
        url: "/get-web-app-id",
        data: {
          user_id: user_id
        },
        success: function (data) {

          var mailParams = {
            "user_id": `${data[0].web_app_id}`,
            "status": "3",
            "project_type_id": "4"
          }
          $.ajax({
            method: "POST",
            url: "{{ webapp_basepath }}/api/set-user-language-project-type-status",
            data: mailParams,
            success: function () {
              //console.log("Web app status set");
            }
          });
        }
      });
    }

    //clicking in profile link button
    $("#profile-link-button").on("click", () => {
      if(VENDOR_WEBSITE){
        window.location.href = "{{ VENDOR_WEBSITE_URL }}/sample#segmentation";
        
      }else{
        window.location.href = "{{ webapp_basepath }}/test/segmentation";
      }
        
      
    });//Profile Link Button function End

    //function to display current div content in annotation box
    function displayCurrentContents() {
      if (spectrum.regions.getCurrentRegion() != null && !updateAnnotationOnChange && !updateAnnotationOnClick && !updateTopDivSpeaker && !updateTopDivSpeakerOnClick) {
        $("#top-div-speaker-control").hide();
        $("#annotation-box").show();
        var segmentId = spectrum.regions.getCurrentRegion().id;
        if(segmentId!=currentId){
        currentId = spectrum.regions.getCurrentRegion().id;

        //highlight current region
        highlightRegion();

        //segment start variables
        var startMinute = secondsToMinutes(spectrum.regions.getCurrentRegion().start);
        var startSeconds = secondsToSeconds(spectrum.regions.getCurrentRegion().start);
        var startMilliseconds = secondsToMilliseconds(spectrum.regions.getCurrentRegion().start);
        currentStartTime = spectrum.regions.getCurrentRegion().start

        //segment end variables
        var endMinute = secondsToMinutes(spectrum.regions.getCurrentRegion().end);
        var endSeconds = secondsToSeconds(spectrum.regions.getCurrentRegion().end);
        var endMilliseconds = secondsToMilliseconds(spectrum.regions.getCurrentRegion().end);
        currentEndTime = spectrum.regions.getCurrentRegion().end;

        //displaying texts   
        $("#annotation-start-minute").val(startMinute);
        $("#annotation-start-seconds").val(startSeconds);
        $("#annotation-start-milliseconds").val(startMilliseconds);
        $("#annotation-end-minute").val(endMinute);
        $("#annotation-end-seconds").val(endSeconds);
        $("#annotation-end-milliseconds").val(endMilliseconds);

        //($("#peaks-container").children().is(`#${segmentId}`) > 0)
        if ($("#peaks-container").children().is(`#${segmentId}`) > 0) {          
          
          var divColor = document.getElementById(segmentId).style.background;

          //changing color of Annotation Heading
          $(".annotation-editHeading").css("backgroundColor", divColor);
            setTransperfectFields(currentId);           
          
            }
        }
        
      }
    }//DisplayCurrentContents function end

    function setTransperfectFields(segmentId){
        $("#annotation-take").val($(`#${segmentId}`).data("take"));
        $("#mic-activation-attempt").val($(`#${segmentId}`).data("mic-activation-attempt"));
        $("#annotation-iteration").val($(`#${segmentId}`).data("iteration"));
        $("#micTap-minute").val(secondsToMinutes($(`#${segmentId}`).data("mic-tap")));
        $("#micTap-seconds").val(secondsToSeconds($(`#${segmentId}`).data("mic-tap")));
        $("#micTap-milliseconds").val(secondsToMilliseconds($(`#${segmentId}`).data("mic-tap")));
        $("#micOpen-start-minute").val(secondsToMinutes($(`#${segmentId}`).data("mic-open")));
        $("#micOpen-start-seconds").val(secondsToSeconds($(`#${segmentId}`).data("mic-open")));
        $("#micOpen-start-milliseconds").val(secondsToMilliseconds($(`#${segmentId}`).data("mic-open")));
        $("#micOpen-end-minute").val(secondsToMinutes($(`#${segmentId}`).data("mic-close")));
        $("#micOpen-end-seconds").val(secondsToSeconds($(`#${segmentId}`).data("mic-close")));
        $("#micOpen-end-milliseconds").val(secondsToMilliseconds($(`#${segmentId}`).data("mic-close")));
        $("#utterance-start-minute").val(secondsToMinutes($(`#${segmentId}`).data("utterance-start")));
        $("#utterance-start-seconds").val(secondsToSeconds($(`#${segmentId}`).data("utterance-start")));
        $("#utterance-start-milliseconds").val(secondsToMilliseconds($(`#${segmentId}`).data("utterance-start")));
        $("#utterance-end-minute").val(secondsToMinutes($(`#${segmentId}`).data("utterance-end")));
        $("#utterance-end-seconds").val(secondsToSeconds($(`#${segmentId}`).data("utterance-end")));
        $("#utterance-end-milliseconds").val(secondsToMilliseconds($(`#${segmentId}`).data("utterance-end")));
        $("#first-word-minute").val(secondsToMinutes($(`#${segmentId}`).data("utterance-first-word-end")));
        $("#first-word-seconds").val(secondsToSeconds($(`#${segmentId}`).data("utterance-first-word-end")));
        $("#first-word-milliseconds").val(secondsToMilliseconds($(`#${segmentId}`).data("utterance-first-word-end")));
        $("#utterance-display-start-minute").val(secondsToMinutes($(`#${segmentId}`).data("utterance-display-start")));
        $("#utterance-display-start-seconds").val(secondsToSeconds($(`#${segmentId}`).data("utterance-display-start")));
        $("#utterance-display-start-milliseconds").val(secondsToMilliseconds($(`#${segmentId}`).data("utterance-display-start")));
        $("#utterance-display-end-minute").val(secondsToMinutes($(`#${segmentId}`).data("utterance-display-end")));
        $("#utterance-display-end-seconds").val(secondsToSeconds($(`#${segmentId}`).data("utterance-display-end")));
        $("#utterance-display-end-milliseconds").val(secondsToMilliseconds($(`#${segmentId}`).data("utterance-display-end")));
        $("#final-text-minute").val(secondsToMinutes($(`#${segmentId}`).data("final-text-display")));
        $("#final-text-seconds").val(secondsToSeconds($(`#${segmentId}`).data("final-text-display")));
        $("#final-text-milliseconds").val(secondsToMilliseconds($(`#${segmentId}`).data("final-text-display")));
        $("#prompt-Id").val($(`#${segmentId}`).data("prompt-id"));
        $("#transcription-area").val($(`#${segmentId}`).data("actual-text"));
        $("#utterance-text-area").val($(`#${segmentId}`).data("utterance-text"))
    }

    //function to disable all on submit
    function disableAllInterfaceOnSubmit() {
      $(".disable-all-on-Submit").prop('disabled', true);
      $(".disable-all-on-Submit").css({ "cursor": "not-allowed" });
    }//disable all interface on submit end   

    function displayUtterancesBtnClick(){
        const utteranceDiv=$("#utterance-div");
        const seeMoreBtn=$("#display-utterance-btn");
        
        if(utteranceDiv.css("display")=="none"){
            utteranceDiv.show();
            seeMoreBtn.html("See less..");
        }else{
            utteranceDiv.hide();
            seeMoreBtn.html("See more..");
        }
    }  

</script>    
</body>
</html>